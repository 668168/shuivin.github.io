<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>8小时外折腾记录</title>
  
  <subtitle>-- 记录做的零散事情</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fanpengtao.tk/"/>
  <updated>2018-10-21T16:59:32.585Z</updated>
  <id>http://fanpengtao.tk/</id>
  
  <author>
    <name>qanniu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>win10WSL关闭声音方法理清</title>
    <link href="http://fanpengtao.tk/post/d73bd557.html"/>
    <id>http://fanpengtao.tk/post/d73bd557.html</id>
    <published>2018-10-21T16:45:34.000Z</published>
    <updated>2018-10-21T16:59:32.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wsl-关闭声音方法网文不行，自己摸索的方法"><a href="#wsl-关闭声音方法网文不行，自己摸索的方法" class="headerlink" title="wsl 关闭声音方法网文不行，自己摸索的方法"></a>wsl 关闭声音方法网文不行，自己摸索的方法</h1><a id="more"></a><h2 id="在vim-里面的关闭方法"><a href="#在vim-里面的关闭方法" class="headerlink" title="在vim 里面的关闭方法"></a>在vim 里面的关闭方法</h2><p>在.vimrc的配置里面加入如下行即可</p><blockquote><p>“ set vb t_vb=                                “关闭提示音</p></blockquote><h2 id="vim外面终端烦人的tab音"><a href="#vim外面终端烦人的tab音" class="headerlink" title="vim外面终端烦人的tab音"></a>vim外面终端烦人的tab音</h2><p>网文说在~/inputrc 里面添加如下code,我这边测试无效.</p><blockquote><p>set bell-style none,<br>我用如下方法可以解决问题.<br>编辑 /etc/inputrc，找到#set bell-style none这一行，去掉前面的注释符号。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;wsl-关闭声音方法网文不行，自己摸索的方法&quot;&gt;&lt;a href=&quot;#wsl-关闭声音方法网文不行，自己摸索的方法&quot; class=&quot;headerlink&quot; title=&quot;wsl 关闭声音方法网文不行，自己摸索的方法&quot;&gt;&lt;/a&gt;wsl 关闭声音方法网文不行，自己摸索的方法&lt;/h1&gt;
    
    </summary>
    
    
      <category term="网管" scheme="http://fanpengtao.tk/tags/%E7%BD%91%E7%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于Hexo博客的遗留问题总结</title>
    <link href="http://fanpengtao.tk/post/d2f953d1.html"/>
    <id>http://fanpengtao.tk/post/d2f953d1.html</id>
    <published>2018-10-10T16:52:31.000Z</published>
    <updated>2018-10-21T16:59:32.585Z</updated>
    
    <content type="html"><![CDATA[<p>今晚折腾总结</p><a id="more"></a><h1 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能."></a>实现的功能.</h1><h2 id="post-模板修改"><a href="#post-模板修改" class="headerlink" title="post 模板修改"></a>post 模板修改</h2><ol><li>copyright 默认为true</li><li>tags 标签模板修改为默认多标签</li><li>加入more关键字</li></ol><h2 id="typora和hexo的配合-插入图片功能"><a href="#typora和hexo的配合-插入图片功能" class="headerlink" title="typora和hexo的配合,插入图片功能"></a>typora和hexo的配合,插入图片功能</h2><p>目前是把所有的文章图片都丢到一起.</p><p><img src="../images/1539190635604.png" alt="1539190635604"></p><p><img src="../images/1539191313849.png" alt="1539191313849"></p><p>查看网文,有人也和我.<img src="http://anynote.me/2018/05/06/local-image-with-typora/" alt="同样的思路"></p><h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><ol><li><p>typora&amp;hexo目前都没有完美的办法放到单个文章对应的目录下面.</p></li><li><p>右下角动画按照<a href="http://zhixiangliu.com/2018/05/06/20180506/" target="_blank" rel="noopener">这位兄台</a>的修改</p></li><li><p>留言系统也要按照<a href="http://zhixiangliu.com/2018/05/06/20180506/" target="_blank" rel="noopener">这位兄台</a>的修改</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今晚折腾总结&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://fanpengtao.tk/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://fanpengtao.tk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Lycamobile 电话卡记录</title>
    <link href="http://fanpengtao.tk/post/b085ccb3.html"/>
    <id>http://fanpengtao.tk/post/b085ccb3.html</id>
    <published>2018-10-10T15:15:31.000Z</published>
    <updated>2018-10-21T16:59:32.585Z</updated>
    
    <content type="html"><![CDATA[<p>介绍LycaMobile购卡/激活/充值5刀/取消语音信箱的SOP</p><a id="more"></a><h1 id="LycaMobile购卡-激活-充值5刀-取消语音信箱的SOP"><a href="#LycaMobile购卡-激活-充值5刀-取消语音信箱的SOP" class="headerlink" title="LycaMobile购卡/激活/充值5刀/取消语音信箱的SOP"></a>LycaMobile购卡/激活/充值5刀/取消语音信箱的SOP</h1><p>近期团购了一堆lycamobile卡给大家.通过@lycamobile888 tg群(该群目前需要邀请才能进)给大家不停的当客服,效率很低,总结个SOP吧.</p><h2 id="此卡用处"><a href="#此卡用处" class="headerlink" title="此卡用处"></a>此卡用处</h2><ol><li>撸Google Voice,一个实体卡大概可以撸 3个GV号码！</li><li>激活We ChatOut!</li><li>国内非<em>实</em>名注册.</li><li>美国账号注册比如美国PayPal,自行开发了.</li><li>不可描述的功能.</li></ol><h2 id="更细节的不宜网页说明的内容可以加群聊-加群方法"><a href="#更细节的不宜网页说明的内容可以加群聊-加群方法" class="headerlink" title="更细节的不宜网页说明的内容可以加群聊,加群方法:"></a>更细节的不宜网页说明的内容可以加群聊,加群方法:</h2><ol><li><a href="https://t.me/lycamobile888" target="_blank" rel="noopener">tg群链接</a></li></ol><h2 id="最低资费"><a href="#最低资费" class="headerlink" title="最低资费"></a>最低资费</h2><p>零月租套餐没有最低消费要求，在中国漫游时，打电话和接电话都是每分钟0.49美元，发短信是每条0.1美元，收短信免费；<br>另外至少每90天要用一次（比如打个电话发个短信），否则卡内余额会清零，Lycamobile会回收你的号码。<br>每90天发一次短信，一年就是要发4次，每年就是只要0.4美元就可以维持~</p><h2 id="适用机型"><a href="#适用机型" class="headerlink" title="适用机型"></a>适用机型</h2><p>大部分iPhone，国内大部分手机都可以使用。<br><strong>若自动选信号选不上的话,请尝试手动选择移动/联通 2G 信号.</strong><br>不可用的机型：电信合约机，运营商锁机，电信定制机，CDMA手机</p><h2 id="购卡方法"><a href="#购卡方法" class="headerlink" title="购卡方法"></a>购卡方法</h2><p>去这家淘宝店直接拍下35RMB包邮就好了:<br>淘宝店: <a href="http://m.tb.cn/h.3iXpKVj?sm=7886e0" target="_blank" rel="noopener">购买链接</a><br>若需要加群讨论其功能或其他相关少儿不宜的topic, 可以拍下后联系旺旺卖家,请其提供tg 群邀请.</p><h2 id="激活方法"><a href="#激活方法" class="headerlink" title="激活方法"></a>激活方法</h2><p>按照目前群友优先使用方法排序,任选一种即可:</p><ol><li>官网在线激活，<a href="https://www.lycamobile.us/en/activate-sim/" target="_blank" rel="noopener">激活地址地址</a></li><li>中国境内激活：只要电话客服，把卡上面的19位卡号报给客服即可。客服电话+1-866-277-3221，上班时间为中国时间晚上11点到第二天上午8点。</li><li>美国本地激活：有美国朋友可以让美国的朋友激活。<br>注意PIN码在激活Lycamobile时候，发送给号码的短信中！一定要保留好.<img src="/post/b085ccb3/activate-sim.png" title="激活方法1截图"></li></ol><h2 id="充值方法"><a href="#充值方法" class="headerlink" title="充值方法"></a>充值方法</h2><ol><li>目前官网充值最低是$10充值,加上税费一共是$10.4左右.但官网充值最安全.<a href="https://www.lycamobile.us/recharge" target="_blank" rel="noopener">充值链接</a></li><li>万能的淘宝有做<a href="http://m.tb.cn/h.3iXpKVj?sm=7886e0" target="_blank" rel="noopener">$5充值的链接</a>.<img src="/post/b085ccb3/rechange.png" title="充值方法1截图"></li></ol><h2 id="关闭语音信箱"><a href="#关闭语音信箱" class="headerlink" title="关闭语音信箱"></a>关闭语音信箱</h2><p>Lycamobile激活后自动开通了一个语音信箱的功能。假如你的手机处于关机状态，别人拨打电话会转接到你的语音信息。这样会产生0.46刀的费用！<br>目前有4种方式,按照便捷性排序:</p><ol><li><p>在<a href="ttps://www.lycamobile.us" target="_blank" rel="noopener">这个网址</a>右下角选红色的chat online 取消.下面有聊天模板</p><blockquote><p>[India] Welcome to Lycamobile customer support, how may I help you?<br>[India] Good day. How may I help you?<br>[David] Hello, in order to avoid unnecessary harassment and extra phone bills, please help me to cancel the voicemail function. I don’t want to receive voice messages regardless of shutdown or standby. My phone number is <em>. My puk is </em> My CIP is <em> Thank you.<br>[India] Are we still connected?<br>[David] yes<br>[India] Please give me few moments to get the details for you.<br>[India] Ticket ID: </em> was created successfully<br>[India] I have cancelled the vms service<br>[India] Is there anything else I can help you with today?<br>[David] thank you very much<br>[India] You’re welcome. Thank you for contacting Lycamobile Web Chat, have a nice day!</p></blockquote></li><li><p>手机拨打 *#21#  可以暂时关闭语音信箱（临时方案）。</p></li><li><p>拨打客服电话 1-866-277-3221 ，可以用GV拨打，让客服帮忙关闭（考验英语口语水平）！</p></li><li><p>官网可以给客服发邮件申请关闭<br> <img src="Snipaste_2018-10-10_21-45-10.png" alt="第一种方法截图"></p> <img src="/post/b085ccb3/Snipaste_2018-10-10_21-45-10.png" title="关闭语音信箱方法1截图"></li></ol><p><img src="../images/1539189663864.png" alt="1539189663864"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://51.ruyo.net/8710.html" target="_blank" rel="noopener">https://51.ruyo.net/8710.html</a><br><a href="https://www.tyf0.com/2018/05/lycamobile%E5%85%AC%E5%8F%B8%E7%9A%84%E7%BE%8E%E5%9B%BD%E6%97%A0%E6%9C%88%E7%A7%9F%E6%89%8B%E6%9C%BA%E5%8D%A1%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener">https://www.tyf0.com/2018/05/lycamobile%E5%85%AC%E5%8F%B8%E7%9A%84%E7%BE%8E%E5%9B%BD%E6%97%A0%E6%9C%88%E7%A7%9F%E6%89%8B%E6%9C%BA%E5%8D%A1%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</a><br><a href="https://qblog.org/sales/lycamobile-free-sim-introduce.html" target="_blank" rel="noopener">https://qblog.org/sales/lycamobile-free-sim-introduce.html</a> 法国韩国v</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍LycaMobile购卡/激活/充值5刀/取消语音信箱的SOP&lt;/p&gt;
    
    </summary>
    
      <category term="网络资源" scheme="http://fanpengtao.tk/categories/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="lycamoble" scheme="http://fanpengtao.tk/tags/lycamoble/"/>
    
  </entry>
  
  <entry>
    <title>Travis-Ci-Helloworld-Blog</title>
    <link href="http://fanpengtao.tk/post/d73bd556.html"/>
    <id>http://fanpengtao.tk/post/d73bd556.html</id>
    <published>2018-10-05T21:29:34.000Z</published>
    <updated>2018-10-21T16:59:32.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最终成果当然是本站了。安装，美化，SEO推广，部署通通奉上。"><a href="#最终成果当然是本站了。安装，美化，SEO推广，部署通通奉上。" class="headerlink" title="最终成果当然是本站了。安装，美化，SEO推广，部署通通奉上。"></a>最终成果当然是本站了。安装，美化，SEO推广，部署通通奉上。</h2><ul><li>持续集成自动部署已提上日程：已完成。</li><li>查看持续集成：《用TravisCI持续集成自动部署Hexo博客的个人实践》</li></ul><a id="more"></a><h2 id="Hexo-Next主题-搭建博客-“真”零基础安装配置"><a href="#Hexo-Next主题-搭建博客-“真”零基础安装配置" class="headerlink" title="Hexo + Next主题 搭建博客 “真”零基础安装配置"></a>Hexo + Next主题 搭建博客 “真”零基础安装配置</h2><p>最终成果: 本站</p><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><p>官网下载:  <strong>下一步下一步安装法</strong></p><p>node-v8.9.3-x64</p><p>C:\softEnvir\nodejs</p><p>验证安装:</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/b7lilij8GG.png?imageslim" alt="mark"></p><h4 id="设置npm下载目录"><a href="#设置npm下载目录" class="headerlink" title="设置npm下载目录"></a>设置npm下载目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix D:\softEnvDown\nodejs\node_global</span><br><span class="line">npm config set cache D:\softEnvDown\nodejs\node_cache</span><br><span class="line">npm config ls</span><br></pre></td></tr></table></figure><blockquote><p>npm模块安装的默认全局路径已经改到了相应的文件夹中，但是 这时候用户还是无法require这些模块。因为电脑系统现在还不知道你把默认路径给改了，所以需要在<code>win+R</code>–&gt;“<code>sysdm.cpl</code>–&gt;<code>高级</code>–&gt;<code>环境变量</code>打开设置对话框。</p></blockquote><ul><li>首先在<code>系统变量</code>中新建，新建一个名为<code>NODE_PATH</code>的变量，变量值: 全局模块的文件夹中的node_modules文件夹的绝对路径.</li></ul><p>即：<code>D:\softEnvDown\nodejs\node_global\node_modules</code></p><p>配置文件目录：<code>C:\Users\mtian\.npmrc</code></p><h4 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h4><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>Git-2.15.1.2-64-bit（同样官网下载: <strong>下一步下一步安装法</strong>）</p><p>C:\softEnvir\Git</p><h3 id="hexo-cli-1-0-4安装"><a href="#hexo-cli-1-0-4安装" class="headerlink" title="hexo-cli: 1.0.4安装"></a>hexo-cli: 1.0.4安装</h3><p>cmd控制台下:</p><pre><code>`npm install -g hexo-cli`</code></pre><h3 id="初始化hexo博客目录"><a href="#初始化hexo博客目录" class="headerlink" title="初始化hexo博客目录"></a>初始化hexo博客目录</h3><p>D:/mtianBlog:</p><p><code>hexo init hexoBlog</code></p><h3 id="下载next主题及主题美化"><a href="#下载next主题及主题美化" class="headerlink" title="下载next主题及主题美化"></a>下载next主题及主题美化</h3><p>官方文档地址： <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p><p>下载主题next：v5.1.4。名字改为next</p><p>然后放入<code>D:\mtianBlog\hexoBlog\themes</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure><h4 id="主题美化。"><a href="#主题美化。" class="headerlink" title="主题美化。"></a>主题美化。</h4><p>推荐阅读：<a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">https://www.jianshu.com/p/f054333ac9e6</a></p><p>部分节选：</p><ol><li>圆形头像旋转。</li></ol><p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></span><br><span class="line"><span class="comment">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 </span></span><br><span class="line"><span class="comment">  -webkit-animation-play-state:paused;</span></span><br><span class="line"><span class="comment">  animation-play-state:paused;*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>配置百度统计站长版。(官方文档有写)</li></ol><p>baidu_analytics: <em>*</em></p><ol><li>配置leancloud (官方文档有写)</li></ol><p>leancloud_visitors:<br>  enable: true<br>  app_id: *<br>  app_key: #<app_key></app_key></p><ol><li>配置搜索(更推荐localSearch)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">algolia:</span><br><span class="line">  applicationID: &apos;*&apos;</span><br><span class="line">  apiKey: &apos;*&apos;</span><br><span class="line">  adminApiKey: &apos;*&apos;</span><br><span class="line">  indexName: &apos;*&apos;</span><br><span class="line">  chunkSize: 5000</span><br><span class="line"></span><br><span class="line">$ export(windows 为 set) HEXO_ALGOLIA_INDEXING_KEY=***</span><br><span class="line">$ hexo algolia</span><br></pre></td></tr></table></figure><p>您好！当我集成Algolia时候一直出错——上传不了记录，请问知道如何解决嘛？</p><p>答案地址：<a href="https://github.com/iissnan/theme-next-docs/issues/162" target="_blank" rel="noopener">https://github.com/iissnan/theme-next-docs/issues/162</a></p><h4 id="使用gulp进行博文压缩（持续集成自动部署前提）"><a href="#使用gulp进行博文压缩（持续集成自动部署前提）" class="headerlink" title="使用gulp进行博文压缩（持续集成自动部署前提）"></a>使用gulp进行博文压缩（持续集成自动部署前提）</h4><p>在站点的根目录下执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure><p>新建文件<code>gulpfile.js</code>:</p><p><img src="http://myphoto.mtianyan.cn/blog/180105/6h9cD64BAa.png?imageslim" alt="mark"></p><p>内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line">// 压缩 public 目录 css</span><br><span class="line">gulp.task(&apos;minify-css&apos;, function() &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public 目录 html</span><br><span class="line">gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: true,</span><br><span class="line">         minifyJS: true,</span><br><span class="line">         minifyCSS: true,</span><br><span class="line">         minifyURLs: true,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public/js 目录 js</span><br><span class="line">gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.js&apos;)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task(&apos;default&apos;, [</span><br><span class="line">    &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="部署hexo："><a href="#部署hexo：" class="headerlink" title="部署hexo："></a>部署hexo：</h3><p><code>npm install hexo-deployer-git --save</code></p><p>修改站点配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/mtianyan/mtianyan.github.io</span><br><span class="line">  branch: master</span><br><span class="line">  message: new version first commit</span><br></pre></td></tr></table></figure><p>需要使用的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;1147727180@qq.com&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;mtianyan&quot;</span><br><span class="line"></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g &amp;&amp; gulp</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="将博客源码备份到github或码云-持续集成自动部署前提"><a href="#将博客源码备份到github或码云-持续集成自动部署前提" class="headerlink" title="将博客源码备份到github或码云(持续集成自动部署前提)"></a>将博客源码备份到github或码云(持续集成自动部署前提)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git remote add origin https://github.com/mtianyan/hexoBlog-Github.git</span><br><span class="line">git commit -m &quot;first&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>想要弄到码云替换第三行为下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://gitee.com/mtianyan/hexoBlog-mayun.git</span><br></pre></td></tr></table></figure><h3 id="SEO优化指南"><a href="#SEO优化指南" class="headerlink" title="SEO优化指南"></a>SEO优化指南</h3><h3 id="URL唯一化"><a href="#URL唯一化" class="headerlink" title="URL唯一化:"></a>URL唯一化:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>站点配置文件里添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">permalink: post/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><h4 id="安装sitemap站点地图生成插件"><a href="#安装sitemap站点地图生成插件" class="headerlink" title="安装sitemap站点地图生成插件"></a>安装sitemap站点地图生成插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>在站点配置文件或主题配置文件加入。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/gEGJ5chIDd.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sitemap: </span><br><span class="line">    path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p>注意缩进</p><p>在<code>hexo-site\source</code>中新建文件<code>robots.txt</code>,内容如下，请自行替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/ </span><br><span class="line">Allow: /about/ </span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: http://mtianyan.gitee.io/sitemap.xml</span><br><span class="line">Sitemap: http://mtianyan.gitee.io/baidusitemap.xml</span><br></pre></td></tr></table></figure><p><code>Allow</code>后面的就是你的<code>menu</code> 可以在主题配置文件中找到。</p><p>前往链接：<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">https://www.google.com/webmasters/</a><br>添加你的网站。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/JIicldkLjj.png?imageslim" alt="mark"></p><p>下载验证文件放入<code>hexo-site\source</code>中</p><p>Tips: 站点配置文件忽略Google的验证文件。这样<code>clean</code>的时候就不会被删除了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render: </span><br><span class="line">  - README.md</span><br><span class="line">  - google*****.html</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180104/bje64IcECF.png?imageslim" alt="mark"></p><p>打开站点地图：添加站点地图。<br><img src="http://myphoto.mtianyan.cn/blog/180104/A8IbeF4E28.png?imageslim" alt="mark"></p><p>可以进入站点地图详情查看有没有报错。</p><p><strong>robots.txt测试</strong></p><p><img src="http://myphoto.mtianyan.cn/blog/180104/I02kIkA5bf.png?imageslim" alt="mark"></p><p>确保0错误，0警告。</p><h3 id="百度搜索资源平台"><a href="#百度搜索资源平台" class="headerlink" title="百度搜索资源平台"></a>百度搜索资源平台</h3><p><a href="http://ziyuan.baidu.com/" target="_blank" rel="noopener">http://ziyuan.baidu.com/</a></p><p><img src="http://myphoto.mtianyan.cn/blog/180104/Fa7hDABmLC.png?imageslim" alt="mark"></p><p>点击用户中心。站点管理 进行 添加网站操作。</p><p>下载验证文件放入<code>hexo-site\source</code>中</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/hBgbcAegeB.png?imageslim" alt="mark"></p><p>验证完成之后点击域名进入控制台。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/LDE1J3hFd5.png?imageslim" alt="mark"></p><p>对于Robots文件进行验证。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/KB20Hi3dbb.png?imageslim" alt="mark"></p><p>点击链接提交，往下多翻点</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/Ah2j2DcDCF.png?imageslim" alt="mark"></p><p>选择sitemap：填入自己网站的sitemap地址。点击提交</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/Hd75Ffd844.png?imageslim" alt="mark"></p><p>查看状态。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/2A73HjBl59.png?imageslim" alt="mark"></p><h3 id="页面关键字优化"><a href="#页面关键字优化" class="headerlink" title="页面关键字优化"></a>页面关键字优化</h3><p>title</p><p>文件路径是<code>your-hexo-site\themes\next\layout\index.swig</code></p><p>将文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180104/fIbh9eei1a.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;最终成果当然是本站了。安装，美化，SEO推广，部署通通奉上。&quot;&gt;&lt;a href=&quot;#最终成果当然是本站了。安装，美化，SEO推广，部署通通奉上。&quot; class=&quot;headerlink&quot; title=&quot;最终成果当然是本站了。安装，美化，SEO推广，部署通通奉上。&quot;&gt;&lt;/a&gt;最终成果当然是本站了。安装，美化，SEO推广，部署通通奉上。&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;持续集成自动部署已提上日程：已完成。&lt;/li&gt;
&lt;li&gt;查看持续集成：《用TravisCI持续集成自动部署Hexo博客的个人实践》&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python文件处理-专题笔记</title>
    <link href="http://fanpengtao.tk/post/deaf66c8.html"/>
    <id>http://fanpengtao.tk/post/deaf66c8.html</id>
    <published>2018-01-05T15:02:40.000Z</published>
    <updated>2018-10-21T16:59:32.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>走近Linux之走近文件 </p></blockquote><div class="note "><p> 任何语言都离不开对文件的操作，Python语言是如何来操作和管理文件的。掌握文件的基本概念、基本操作，了解文件属性、 linux 系统的文件管理机制及os模块对文件和目录的处理等相关内容。</p><ul><li>[√]慕课网Meshare_huang老师：Python文件处理</li></ul></div><a id="more"></a><p><img src="http://myphoto.mtianyan.cn/blog/180105/ja9K6H3IF2.png?imageslim" alt="mark"></p><h1 id="文件简介"><a href="#文件简介" class="headerlink" title="文件简介"></a>文件简介</h1><p>Python的文件处理:</p><p>初学者：推荐使用虚拟机<code>VMwareStation</code> + <code>Deepin</code></p><p>必备前置条件知识储备：</p><ol><li>Linux系统知识</li><li>Linux下Python开发环境</li><li>掌握Python基础知识</li></ol><p>Python文件概念：</p><p>文件： Python中文件是<strong>对象</strong>依赖我们的具体系统。</p><p>Linux文件：<strong>一切设备都可以看成文件</strong></p><ul><li>例如：磁盘文件，管道，网络Socket，外设等。</li></ul><p>文件属性：<code>用户</code>，<code>读</code>，<code>写</code>，<code>执行权限</code>；</p><p>在Linux控制台输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#cd进一个空目录</span><br><span class="line">cd Desktop/ </span><br><span class="line">#创建一个文件夹</span><br><span class="line">mkdir PythonFile </span><br><span class="line">cd PythonFile </span><br><span class="line">touch hello.py</span><br><span class="line">vim hello.py</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180105/8h45alB3E2.png?imageslim" alt="mark"></p><p>使用<code>i</code>进入<code>insert模式</code>进行插入代码。<br>插入完成后使用<code>esc</code>退出编辑模式，输入<code>:wq</code>进行保存。</p><p><img src="http://myphoto.mtianyan.cn/blog/180105/cl7b7hk3I8.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180105/a2mgcm26Ij.png?imageslim" alt="mark"></p><p>通过<code>ls -l</code>命令可以看到文件的一些基本属性：</p><ul><li>第一个横杠代表是一个文件，还是一个目录。<code>-</code>代表是一个文件，<code>d</code>代表是一个目录<br>如下图1为一个目录。<br><img src="http://myphoto.mtianyan.cn/blog/180105/6ceahk4A44.png?imageslim" alt="mark"></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/bl7dk5hJh6.png?imageslim" alt="mark"></p><ul><li>第一组<code>rw-</code>代表当前用户对于当前文件有<code>读</code>有<code>写</code>没有<code>执行权限</code>。(<code>-</code>代表没有权限，<code>x</code>为可执行)</li><li>第二组<code>r--</code>：表示当前用户组对该文件有<code>读r</code> 没有<code>写w</code>的权限，没有<code>执行权限x</code></li><li><p>第三组<code>r--</code>：表示其他用户对该文件有<code>读r</code>权限，但没有<code>写w</code>和<code>执行x</code>权限</p></li><li><p>第一个<code>mtianyan</code>代表文件的<strong>拥有者</strong>是<code>mtianyan</code> </p></li><li>第二个<code>mtianyan</code> 代表这个文件所属的<strong>用户组</strong>是<code>mtianyan</code></li><li><code>21</code>代表文件的大小是<code>21字节</code> 后面的时间是文件的创建时间。后面是文件名。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/9mEAieLhhB.png?imageslim" alt="mark"></p><p>可以看到我们最为<strong>当前用户</strong>现在没有该文件执行权限。</p><p>使用<code>chmod</code>为文件<strong>增加权限</strong>说明：</p><ul><li>如果给所有人添加可执行权限：<code>chmod a+x 文件名</code>；</li><li>如果给文件所有者添加可执行权限：<code>chmod u+x 文件名</code>；</li><li>如果给所在组添加可执行权限：<code>chmod g+x 文件名</code>；</li><li>如果给所在组以外的人添加可执行权限：<code>chmod o+x 文件名</code>；</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/jClleHm2L3.png?imageslim" alt="mark"></p><p>可以看到我们通过<code>chmod +x hello.py</code>为当前<code>用户</code>，<code>用户组</code>，<code>其他用户</code>都添加了执行权限</p><p>Linux下首行一定要加这句话：<code>!/usr/bin/Python</code>，<code>!/usr/bin/Python</code>是告诉操作系统执行这个脚本的时候，调用<code>/usr/bin</code>下的python解释器。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/8LlgeBbeF1.png?imageslim" alt="mark"></p><p>打印出了<code>Helloworld</code>好像有点问题。以后对Linux熟了再回来看。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/jeihD8Fk7d.png?imageslim" alt="mark"></p><p><code>python</code>命令是可以正常执行的。</p><h1 id="文件基础操作"><a href="#文件基础操作" class="headerlink" title="文件基础操作"></a>文件基础操作</h1><p>主要讲解文件打开及文件不同的打开方式、使用<code>read</code>,<code>readlines</code>及<code>迭代器</code>访问文件、文件写入方式及<code>写缓存</code>处理、文件关闭及由不关闭导致的问题、文件指针及文件指针操作</p><h2 id="文件打开方式"><a href="#文件打开方式" class="headerlink" title="文件打开方式"></a>文件打开方式</h2><h3 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(name [,mode[buf]])</span><br></pre></td></tr></table></figure><ul><li><code>name</code> : 文件路径</li><li><code>mode</code> : 打开方式</li><li><code>buf</code>  : 缓冲buffering大小</li></ul><p><code>mode</code>方式有：<code>只读</code>，<code>只写</code>。<code>读写</code>。</p><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read([size])</span><br></pre></td></tr></table></figure><p>读取文件(读取<code>size个字节</code>，默认读取全部)</p><ul><li>如果文件长度大于size，我们就读size个长度。</li><li>如果文件长度小于size，我们就把文件读完。</li><li>如果没有设置size，默认全部读完。</li></ul><h3 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readline([size])</span><br></pre></td></tr></table></figure><p>读取一行</p><h3 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readlines([size])</span><br></pre></td></tr></table></figure><p>读取完文件(看到后面你就知道并不是)，返回每一行所组成的列表。我们就可以使用列表访问的方式，使用文件。</p><p>弊端：一次性读完，占用很大内存。</p><h3 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write(str)</span><br></pre></td></tr></table></figure><p>将字符串写入文件</p><h3 id="writelines"><a href="#writelines" class="headerlink" title="writelines()"></a>writelines()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writelines(sequence_of_strings) : 写多行到文件</span><br></pre></td></tr></table></figure><p><code>sequence_of_strings</code>是一个由字符型组成的列表。一次性写入多行。</p><p>输入<code>ipython</code>进入ipython环境</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/bCBh622gFI.png?imageslim" alt="mark"></p><p><code>type(f)</code>可以看到打开的文件类型就是一个文件对象。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/dBiFhaIaFD.png?imageslim" alt="mark"></p><p>拥有的方法可以使用<code>f.</code> + <code>Tab</code>自动补齐</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/lBDelEdGgl.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error：File not open for writing</span><br></pre></td></tr></table></figure><p>这里因为我们使用的是<strong>默认无参数打开，此时我们并不拥有写权限。</strong></p><p>Python文件打开方式</p><table><thead><tr><th>mode</th><th>说明</th><th>说明</th></tr></thead><tbody><tr><td>‘r’</td><td>只读方式打开</td><td>文件必须存在</td></tr><tr><td>‘w’</td><td>只写方式打开</td><td>文件不存在创建文件;存在则清空内容</td></tr><tr><td>‘a’</td><td>追加方式打开</td><td>文件不存在创建文件</td></tr><tr><td>‘r+’/‘W+’</td><td>读写方式打开</td><td></td></tr><tr><td>‘a+’</td><td>追加和读写方式打开</td></tr></tbody></table><p><code>&#39;rb&#39;</code>,<code>&#39;wb&#39;</code>,<code>&#39;ab&#39;</code>,<code>&#39;rb+&#39;</code>,<code>&#39;wb+&#39;</code>,<code>&#39;ab+&#39;</code>:都是采用二进制方式打开。</p><h3 id="练习-39-r-39-39-w-39-39-a-39-39-r-39"><a href="#练习-39-r-39-39-w-39-39-a-39-39-r-39" class="headerlink" title="练习&#39;r&#39; &#39;w&#39; &#39;a&#39; &#39;r+&#39;"></a>练习<code>&#39;r&#39;</code> <code>&#39;w&#39;</code> <code>&#39;a&#39;</code> <code>&#39;r+&#39;</code></h3><p><img src="http://myphoto.mtianyan.cn/blog/180106/EhilmC7AHd.png?imageslim" alt="mark"></p><ul><li><strong>不带参数</strong>的<code>open</code>是用<strong>只读</strong>方式打开的，所以文件<strong>不存在会报错</strong>。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/8BIFGCB5ge.png?imageslim" alt="mark"></p><ul><li>请<strong>注意关闭</strong>文件<code>f.close()</code>否则<code>cat</code>时文件内容会为空。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/kh5BdJIF4h.png?imageslim" alt="mark"></p><ul><li>当我们<strong>再次</strong>打开文件使用<code>w</code>方式。已存在的文件会被<strong>清空</strong>才打开。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/DJIDC4CcGE.png?imageslim" alt="mark"></p><ul><li>我们以<code>a</code>方式打开此时我们可以对于文件进行<strong>追加</strong>操作，原有内容并没有被清空<br>新增内容被添加到了<strong>最后</strong>。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/03d8LcbEd0.png?imageslim" alt="mark"></p><ul><li>当我们以<code>r+</code>方式打开，我们新增的内容会从<strong>文件开始</strong>替换原有内容的一部分。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/HiG3agaJdg.png?imageslim" alt="mark"></p><ul><li>当我们以<code>w+</code>方式打开，文件可以被<strong>读写</strong>。但是文件内容被清空。</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/C6k1K0ihlJ.png?imageslim" alt="mark"></p><ul><li>此时新文件可以被读写。</li></ul><p>使用二进制方式打开的使用方法与上面介绍的基本一致。</p><p>意义在于： <strong>比如读取一张图片的EXIF信息读取图片的长宽拍照日期</strong></p><p>如果我们以普通方式打开是以文本方式打开，不能读取到正确的内容。<br>当我们以二进制打开我们就可以读取到正确的<code>EXIF信息</code>。</p><p>学习了打开文件，读取文件，写入文件。文件打开方式的不同。</p><h2 id="文件读取方式"><a href="#文件读取方式" class="headerlink" title="文件读取方式"></a>文件读取方式</h2><h3 id="read-1"><a href="#read-1" class="headerlink" title="read()"></a>read()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read([size])</span><br></pre></td></tr></table></figure><p>读取文件(读取<code>size个字节</code>，默认读取全部)</p><ul><li>如果文件长度大于size，我们就读size个长度。</li><li>如果文件长度小于size，我们就把文件读完。</li><li>如果没有设置size，默认全部读完。</li></ul><h3 id="readline-1"><a href="#readline-1" class="headerlink" title="readline()"></a>readline()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readline([size])</span><br></pre></td></tr></table></figure><p>读取一行</p><h4 id="示例操作"><a href="#示例操作" class="headerlink" title="示例操作"></a>示例操作</h4><p>首先使用<code>touch mtianyan.txt</code> 和 <code>vi mtianyan.txt</code><br>创建并写入内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blog.mtianyan.cn</span><br><span class="line">blog.mtianyan.cn</span><br><span class="line">blog.mtianyan.cn</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180106/Ab332e9280.png?imageslim" alt="mark"></p><p>可以看出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">readline(size):</span><br><span class="line"><span class="keyword">if</span> len(line) &gt; size:</span><br><span class="line"><span class="keyword">return</span> size</span><br><span class="line"><span class="keyword">if</span> len(line) &lt; size:</span><br><span class="line"><span class="keyword">return</span> len(line)</span><br></pre></td></tr></table></figure><h3 id="readlines-1"><a href="#readlines-1" class="headerlink" title="readlines()"></a>readlines()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readlines([size])</span><br></pre></td></tr></table></figure><p>读取完文件(整数个buffer左右字节)，返回每一行所组成的列表。我们就可以使用列表访问的方式，使用文件。</p><p>弊端：一次性读完，占用很大内存。</p><h4 id="示例操作："><a href="#示例操作：" class="headerlink" title="示例操作："></a>示例操作：</h4><p><img src="http://myphoto.mtianyan.cn/blog/180106/Jd54A7e7jf.png?imageslim" alt="mark"></p><p>虽然设置了<code>size</code>为<code>1</code>,但是还是把所有都读出来了。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/27gh2mdJI2.png?imageslim" alt="mark"></p><p>输入<code>help(f.readlines)</code>查看定义：重复的调用<code>readline()</code>然后返回一个读到的行所组成的列表。</p><p>读取文件的大小：</p><ul><li>如果<code>size</code>小于<code>缓冲区</code>的大小，则读取<code>缓冲区大小</code>的数据</li><li>如果<code>size</code>大于<code>缓冲区</code>的大小，读取<code>size大小</code>的数据，但不是完全的等于size的大小，一般读取比size大的整行的数据.</li></ul><p>这个设置是python解释器内部的一个变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line">io.DEFAULT_BUFFER_SIZE</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180106/2mGhG36mk0.png?imageslim" alt="mark"></p><p>设置参数小于<code>8192</code>每次能读取<code>8192</code>个字节。</p><ul><li>设置参数<code>大于</code>一个<code>8192</code>小于<code>2*8192=16384</code>。则读取两个<code>buffer</code>值.</li><li><code>BUFFER</code>都是一整个一整个读</li></ul><h4 id="Linux命令使用"><a href="#Linux命令使用" class="headerlink" title="Linux命令使用"></a>Linux命令使用</h4><p>使用<code>vi</code>打开文件。<code>y</code>是复制当前行，<code>yy</code>是复制光标所在的一整行.<br>如果复制了一行，则<code>p</code>是在光标所在行的下一行粘贴，<code>10000p</code>就是粘贴10000次</p><ul><li><p>命令<code>yy，10000p</code>复制<code>10000</code>行 .然后<code>:set nu</code> 显示行数</p></li><li><p><code>gg</code>： </p><ul><li>跳转到文件头 <code>:1</code> 或 <code>gg</code></li><li>跳转到<code>文件末尾行数+gg</code> <code>:$</code> <code>Shift+g</code></li><li>跳转到指定行,例跳转到123行：<code>123gg</code>或<code>:123</code>.</li></ul></li></ul><p>使用<code>ctrl+z</code>可将程序切换到后台。用<code>fg</code>可将后台程序切换到前台。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/FI1l8ggadI.png?imageslim" alt="mark"></p><p>可以看到此时的文件以及有十几万个字节了</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/7agEmLFl9K.png?imageslim" alt="mark"></p><p>可以看出这时候不再是一次性把文件读取完了，而是读取了<code>482</code>行。</p><p><code>170051/100003</code>行，每行<code>17</code>个字节。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/l6FdaaKaAL.png?imageslim" alt="mark"></p><p>这时我们的<code>size</code>大于了缓冲区的大小<code>8192</code>。因此我们的<code>size</code>到了<code>8192</code>和<code>16384</code><br>之间。</p><p><strong>重点：系统数据是按着<code>整个buffer，整个buffer</code>来读的。此时系统会读取差不多<code>两个buffer</code>的数据。也就是<code>963*17 =16371</code> 。</strong></p><p>待探究</p><h4 id="iter-使用迭代器读取文件"><a href="#iter-使用迭代器读取文件" class="headerlink" title="iter: 使用迭代器读取文件"></a>iter: 使用迭代器读取文件</h4><p><img src="http://myphoto.mtianyan.cn/blog/180106/Ke4CkfKaiC.png?imageslim" alt="mark"></p><p>迭代器并不是把我们的文件全部存入了内存中。而是我们<strong>每使用一次<code>next</code>方法就会自动读取下一行。</strong>所以能在不消耗大量内存的情况下进行读取整个文件。</p><h2 id="文件写入与写缓存"><a href="#文件写入与写缓存" class="headerlink" title="文件写入与写缓存"></a>文件写入与写缓存</h2><h3 id="write-1"><a href="#write-1" class="headerlink" title="write()"></a>write()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write(str)</span><br></pre></td></tr></table></figure><p>将字符串写入文件</p><h3 id="writelines-1"><a href="#writelines-1" class="headerlink" title="writelines()"></a>writelines()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writelines(sequence_of_strings) : 写多行到文件</span><br></pre></td></tr></table></figure><p><code>sequence_of_strings</code>参数是一个<code>可迭代对象</code>:</p><ul><li>可以是字符串</li><li>可以是字符串所组成的元组。</li><li>可以是一个字符串所组成的迭代器。</li><li>也可是一个字符串组成的列表</li></ul><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p><img src="http://myphoto.mtianyan.cn/blog/180106/b33936E4h7.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">37</span>]: cat test.txt</span><br><span class="line">test write</span><br><span class="line">In [<span class="number">38</span>]: f = open(<span class="string">"mtianyan.txt"</span>,<span class="string">'w'</span>)</span><br><span class="line">In [<span class="number">39</span>]: f.writelines(<span class="string">'123456'</span>)</span><br><span class="line">In [<span class="number">40</span>]: f.writelines((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-40</span><span class="number">-0</span>a3726375675&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 f.writelines((1,2,3))</span><br><span class="line"></span><br><span class="line">TypeError: writelines() argument must be a sequence of strings</span><br></pre></td></tr></table></figure><p>写入一个元组会报错 ：<strong>提示必须是由字符串组成的序列。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">41</span>]: f.writelines((<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>))</span><br><span class="line">In [<span class="number">42</span>]: f.writelines([<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>])</span><br><span class="line">In [<span class="number">43</span>]: f.close()</span><br><span class="line">In [<span class="number">44</span>]: cat test.txt</span><br><span class="line">test write</span><br><span class="line">In [<span class="number">45</span>]: cat mtianyan.txt</span><br><span class="line"><span class="number">123456123123</span></span><br></pre></td></tr></table></figure><p>可以看到我们都可以正常的写入由字符串组成的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">46</span>]: f = open(<span class="string">"mtianyan.txt"</span>,<span class="string">'w'</span>)</span><br><span class="line">In [<span class="number">47</span>]: f.write(<span class="string">"11111"</span>)</span><br><span class="line">In [<span class="number">48</span>]: cat mtianyan.txt</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]:</span><br></pre></td></tr></table></figure><p>文件内容为空，因为我们没有使用<code>f.close()</code>将文件关闭。</p><p>Linux系统有一种<strong>写缓存机制</strong>。如果我们不主动调用<code>f.close()</code>或 <code>flush</code><br>他是不会写到磁盘文件的。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/8hddlFCjDk.png?imageslim" alt="mark"></p><p>写文件的过程中Python解释器进行<strong>系统调用</strong>。Linux系统内核将文件写入系统文件缓冲区。<br>当我们调用<code>f.close()</code>时，系统会更新文件到硬盘。</p><p>Python写磁盘的缓存机制</p><ol><li>主动调用<code>closed()</code>或<code>flush</code>方法。写缓存同步到磁盘</li><li>写入数据量大于或等于写缓存，写缓存同步到磁盘。（此时系统写缓存又清空，然后就又继续缓存直到<code>close()</code>)</li></ol><h4 id="实际操作-1"><a href="#实际操作-1" class="headerlink" title="实际操作"></a>实际操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">62</span>]: f = open(<span class="string">"mtianyan.txt"</span>,<span class="string">'w'</span>)</span><br><span class="line">In [<span class="number">63</span>]: f.write(<span class="string">'test write'</span>)</span><br><span class="line">In [<span class="number">64</span>]: cat mtianyan.txt</span><br><span class="line">In [<span class="number">65</span>]: f.flush()</span><br><span class="line">In [<span class="number">66</span>]: cat mtianyan.txt</span><br><span class="line">test write</span><br></pre></td></tr></table></figure><p>进行<code>flush()</code>操作时内容更新。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/LLDgdC8AIc.png?imageslim" alt="mark"></p><p><img src="http://myphoto.mtianyan.cn/blog/180106/C73B4A1gIc.png?imageslim" alt="mark"></p><p>说明我的Linux的缓冲区就是这么大<code>147456</code><br>当我们执行<code>close</code>文件会变大。因为全部写进去了。</p><h2 id="文件关闭"><a href="#文件关闭" class="headerlink" title="文件关闭"></a>文件关闭</h2><ol><li>将<strong>写缓存</strong>同步到磁盘；</li><li>linux系统中每个进程<strong>打开的文件个数是有限的；</strong></li><li>如果打开文件数到了系统限制，在打开文件就会失败；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mtianyan@mtianyan-deep:~/Desktop/PythonFile$ ps</span><br><span class="line">   PID TTY          TIME CMD</span><br><span class="line">  5587 pts/1    00:00:00 bash</span><br><span class="line">  5918 pts/1    00:00:02 ipython</span><br></pre></td></tr></table></figure><p>看到ipython进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mtianyan@mtianyan-deep:~/Desktop/PythonFile$ cat /proc/5918/limits </span><br><span class="line">Limit                     Soft Limit           Hard Limit           Units     </span><br><span class="line">Max open files            1024                 1048576              files</span><br></pre></td></tr></table></figure><ul><li><code>file.fileno()</code>:文件描述符；每打开一个就会加1，直到1024失败<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n [3]: for i in range(1027):</span><br><span class="line">   ...:     f = open(&quot;mtianyan.txt&quot;,&apos;r&apos;)</span><br><span class="line">   ...:     print (&quot;%d：%d&quot; %(i,f.fileno()))</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/8iIjg1LI07.png?imageslim" alt="mark"></p><p>并没有起到效果。<code>fileno</code>在<code>10</code>和<code>12</code>不断来回</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1025</span>):</span><br><span class="line">    ...:     list_f.append(open(<span class="string">"mtianyan.txt"</span>,<span class="string">'w'</span>))</span><br><span class="line">    ...:     <span class="keyword">print</span> (<span class="string">"%d:%d"</span> %(i,list_f[i].fileno()))</span><br><span class="line">    ...:</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1010:1022</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IOError                                   Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-10-dd5ee4024396&gt; in &lt;module&gt;()</span><br><span class="line">      1 for i in range(1025):</span><br><span class="line">----&gt; 2     list_f.append(open(&quot;mtianyan.txt&quot;,&apos;w&apos;))</span><br><span class="line">      3     print (&quot;%d:%d&quot; %(i,list_f[i].fileno()))</span><br><span class="line">      4 </span><br><span class="line"></span><br><span class="line">IOError: [Errno 24] Too many open files: &apos;mtianyan.txt&apos;</span><br></pre></td></tr></table></figure><p>因此我们需要养成<strong>良好编码习惯记得关闭文件。</strong></p><h2 id="文件指针。"><a href="#文件指针。" class="headerlink" title="文件指针。"></a>文件指针。</h2><ol><li>写入文件后，必须打开才能读取写入的内容</li><li>读取文件后，无法重新再次读取读取过的内容</li></ol><p>比如：写完文件必须关闭才能读到我们写入的内容。</p><p>文件指针用于定位我们当前文件所执行到的位置：</p><ul><li>使用<code>open()</code>打开时文件指针就在起始位置。 </li><li><code>read(3)</code>文件指针就会往后挪<code>3</code>个位置。指向<code>第四个位置</code>。</li><li><code>write(&#39;mtianyan&#39;)</code>就会从当前文件指针<code>4</code>开始写。文件指针就会移动<code>8个字节</code>。</li></ul><p>我们之前的问题都是因为我们无法使文件指针归于起始位置的，<br>下面我们学习自由操作文件指针：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">seek(offset[,whence]):移动文件指针</span><br><span class="line">offset 偏移量，可以为负数</span><br><span class="line">whence：偏移相对位置：</span><br><span class="line">os.SEEK_SET:相对文件的起始位置<span class="number">0</span></span><br><span class="line">os,SEEK_CUR:相对文件的当前位置<span class="number">1</span></span><br><span class="line">os.SEEK_END:相对文件的结尾位置<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: f = open(<span class="string">'mtianyan.txt'</span>,<span class="string">'r+'</span>)</span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> os</span><br><span class="line">In [<span class="number">3</span>]: f.tell() </span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>f.tell()</code>（函数）返回当前文件的偏移返回的是一个整数，也许是一个长整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: f.read(<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'tes'</span></span><br><span class="line">In [<span class="number">5</span>]: f.tell()</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">3</span></span><br><span class="line">In [<span class="number">6</span>]: f.seek(<span class="number">0</span>, os.SEEK_SET)</span><br><span class="line">In [<span class="number">7</span>]: f.tell()</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以看出我们可以使用<code>f.seek(0, os.SEEK_SET)</code>来进行指针归零。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: f.seek(<span class="number">0</span>,os.SEEK_END)</span><br><span class="line">In [<span class="number">9</span>]: f.tell()</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">3139</span></span><br><span class="line">In [<span class="number">10</span>]: ls -l mtianyan.txt</span><br><span class="line">-rw-r--r-- <span class="number">1</span> mtianyan mtianyan <span class="number">3139</span> <span class="number">1</span>月   <span class="number">6</span> <span class="number">03</span>:<span class="number">58</span> mtianyan.txt</span><br><span class="line">In [<span class="number">11</span>]: f.read(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">''</span></span><br></pre></td></tr></table></figure><p>当然我们也可以把文件指针指到末尾去。文件指针已经在末尾了，向后继续读取会为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: f.seek(<span class="number">-5</span>,os.SEEK_END)</span><br><span class="line">In [<span class="number">13</span>]: f.read(<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'231\n\n'</span></span><br></pre></td></tr></table></figure><p>使用<code>f.seek(-5,os.SEEK_END)</code>可以将文件指针<strong>倒着</strong>移回去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [14]: f.tell()</span><br><span class="line">Out[14]: 3139</span><br><span class="line">In [15]: f.seek(-5,os.SEEK_CUR)</span><br><span class="line">In [16]: f.tell()</span><br><span class="line">Out[16]: 3134</span><br></pre></td></tr></table></figure><p>读取<code>5</code>个之后，指针又跑到了<code>3139</code>：使用<code>f.seek(-5,os.SEEK_CUR)</code><br>又可以从当前位置往前移。</p><p>当文件<strong>偏移大于文件长度会</strong>出现的问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [17]: f.seek(0,os.SEEK_END)</span><br><span class="line">In [18]: f.tell()</span><br><span class="line">Out[18]: 3139</span><br><span class="line">In [19]: f.seek(-3140,os.SEEK_END)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IOError                                   Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-19-331d0bc629ca&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 f.seek(-3140,os.SEEK_END)</span><br><span class="line"></span><br><span class="line">IOError: [Errno 22] Invalid argument</span><br></pre></td></tr></table></figure><p>会报错：告诉我们这是一个<strong>无效的参数。</strong>类似于索引越界等。</p><h1 id="文件属性及OS模块使用"><a href="#文件属性及OS模块使用" class="headerlink" title="文件属性及OS模块使用"></a>文件属性及OS模块使用</h1><p>讲解文件属性、标准文件、文件命令行参数、文件编码格式、使用os模块中方法对文件进行操作、使用os模块中的方法对目录进行操作</p><h2 id="文件属性编码格式"><a href="#文件属性编码格式" class="headerlink" title="文件属性编码格式"></a>文件属性编码格式</h2><h3 id="Python文件属性"><a href="#Python文件属性" class="headerlink" title="Python文件属性"></a>Python文件属性</h3><ul><li><code>file.fileno()</code>:文件描述符；每打开一个就会加1，直到1024失败</li><li><code>file.mode:</code>文件打开权限</li><li><code>file.encoding:</code>文件编码格式</li><li><code>file.closed:</code>文件是否关闭</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: f.fileno()</span><br><span class="line">Out[<span class="number">20</span>]: <span class="number">12</span></span><br><span class="line">In [<span class="number">21</span>]: f.closed</span><br><span class="line">Out[<span class="number">21</span>]: <span class="keyword">False</span></span><br><span class="line">In [<span class="number">22</span>]: f.mode</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">'r+'</span></span><br><span class="line">In [<span class="number">23</span>]: f.encoding</span><br></pre></td></tr></table></figure><p>没有返回值：为<code>ASCII</code>码文件。应该与系统相关。</p><h3 id="Python标准文件"><a href="#Python标准文件" class="headerlink" title="Python标准文件"></a>Python标准文件</h3><ul><li>文件标准输入：<code>sys.stdin</code>；</li><li>文件标准输出：<code>sys.stdout</code>；</li><li>文件标准错误：<code>sys.stderr</code>;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: <span class="keyword">import</span> sys</span><br><span class="line">In [<span class="number">27</span>]: type(sys.stdin)</span><br><span class="line">Out[<span class="number">27</span>]: file</span><br><span class="line">In [<span class="number">28</span>]: sys.stdin.mode</span><br><span class="line">Out[<span class="number">28</span>]: <span class="string">'r'</span></span><br><span class="line">In [<span class="number">29</span>]: sys.stdin.read()</span><br></pre></td></tr></table></figure><p>系统的<code>sys.stdin</code>的<code>read()</code>是指从控制台读入数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [32]: sys.stdin.fileno()</span><br><span class="line">Out[32]: 0</span><br></pre></td></tr></table></figure><p>系统的<code>sys.stdin</code>的<code>fileno</code>为0。也就是我们启动一个进程，他<strong>首先</strong>会<strong>打开标准输入</strong>：从控制台读数据。</p><p><code>a = raw_input()</code> 其实内部是调用<code>sys.stdin</code>来读取数据的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [37]: sys.stdout.mode</span><br><span class="line">Out[37]: &apos;w&apos;</span><br><span class="line">In [38]: sys.stdout.write(&quot;1000&quot;)</span><br><span class="line">1000</span><br></pre></td></tr></table></figure><p><code>sys.stdout</code>只可以写，不可以读。写入相当于<strong>写入到控制台，会直接显示</strong>。</p><p><code>print</code>实际内部调用的是<code>stdout</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [39]: sys.stdout.fileno()</span><br><span class="line">Out[39]: 1</span><br></pre></td></tr></table></figure><p><code>sys.stdout</code>是系统在启动程序时<strong>第二个</strong>打开的。</p><p>也就是系统会先为我们<strong>打开输入</strong>，<strong>再打开输出</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: sys.stderr.mode</span><br><span class="line">Out[<span class="number">40</span>]: <span class="string">'w'</span></span><br><span class="line">In [<span class="number">41</span>]: sys.stderr.write(<span class="string">"error"</span>)</span><br><span class="line">error</span><br><span class="line">In [<span class="number">42</span>]: sys.stderr.fileno()</span><br><span class="line">Out[<span class="number">42</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>sys.stderr</code>是系统在启动程序时第二个打开的。<br><strong>先开输入，再开输出。第三err输出。</strong></p><h3 id="Python文件命令行参数"><a href="#Python文件命令行参数" class="headerlink" title="Python文件命令行参数"></a>Python文件命令行参数</h3><p><code>sys</code>模块提供了<code>sys.argv</code>，通过该属性可以得到命令行参数</p><p>很多程序都是这么做的：比如加上<code>-v</code>,根据<strong>不同的参数完成不同的功能。</strong></p><p><code>sys.argv</code>是一个字符串组成的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print len(sys.argv)</span><br><span class="line">    for arg in sys.argv:</span><br><span class="line">        print arg</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">D:\mtianBlog\hexoBlog-Github\source\_posts\test.py</span><br></pre></td></tr></table></figure><p>直接运行,我们没有提供参数，打印出了当前文件的绝对路径文件名。</p><h3 id="Python文件编码方式。"><a href="#Python文件编码方式。" class="headerlink" title="Python文件编码方式。"></a>Python文件编码方式。</h3><p>使用普通方式打开文件：写入<code>u天涯明月笙</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [3]: f.write(u&apos;天涯明月笙&apos;)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">UnicodeEncodeError                        Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-3-3cd15b559bd9&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 f.write(u&apos;天涯明月笙&apos;)</span><br><span class="line"></span><br><span class="line">UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 0-4: ordinal not in range(128)</span><br></pre></td></tr></table></figure><p>会报错：<code>UnicodeEncodeError</code>因为我们的文件是<code>ascii</code>格式的。不能将<code>Unicode</code>字符串写入。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = unicode.encode(<span class="string">u'天涯'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line">In [<span class="number">2</span>]: a</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'\xe5\xa4\xa9\xe6\xb6\xaf'</span></span><br><span class="line">In [<span class="number">3</span>]: f.write(a)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [7]: cat mtianyan.txt</span><br><span class="line">天涯</span><br></pre></td></tr></table></figure><p>我们可以用<code>codecs</code>模块提供方法创建制定编码格式文件.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">f = codecs.open(<span class="string">'test.txt'</span>,<span class="string">'w'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line">f.encoding</span><br></pre></td></tr></table></figure><p><code>open(fname,mode,encoding,errors,buffering):</code>使用指定编码格式打开文件</p><h2 id="linux文件系统"><a href="#linux文件系统" class="headerlink" title="linux文件系统"></a>linux文件系统</h2><p><strong>所有</strong>设备都可以看为文件:</p><ul><li>包括磁盘(ext2,ext4)文件,NFS文件系统，各种外设</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180106/12m2BBaiD8.png?imageslim" alt="mark"></p><p><code>虚拟文件系统</code>为文件提供<code>文件节点</code></p><p>每一个外设在内核中都有一个对应的<strong>驱动程序</strong>。通过<strong>系统调用</strong>对文件节点进行访问。把所有外设作为文件处理。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/f5HcLchgiF.png?imageslim" alt="mark"></p><p>在操作系统之上的Python解释器,Python程序跑在解释器中。</p><p><img src="http://myphoto.mtianyan.cn/blog/180106/I0167hf15I.png?imageslim" alt="mark"></p><p>使用<code>open()</code>会访问<code>文件节点</code>。设备节点对应虚拟文件系统的方法，这个文件系统与驱动绑定。<br>驱动会操作硬件设备。</p><h2 id="os模块对文件和目录进行操作"><a href="#os模块对文件和目录进行操作" class="headerlink" title="os模块对文件和目录进行操作"></a>os模块对文件和目录进行操作</h2><p>使用os模块来打开文件：</p><p><code>os.open(filename, flag [,mode])</code>打开文件</p><pre><code>- os.O_CREAT:创建文件- os.O_RDONLY:只读方式打开- os.O_WRONLY:只写方式打开- os.O_RDWR:读写方式打开</code></pre><p><code>os.read(fd, buffersize)</code>:读取文件，返回值为读取的内容<br><code>os.write(fd, string)</code>:写入文件 ,返回值是写入数据的大小<br><code>os.lseek(fd, pos, how)</code>: 文件指针操作<br><code>os.close(fd)</code>:关闭文件</p><p><code>umask</code>获取系统的默认权限。我的是<code>0022</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]:fd = os.open(<span class="string">'mtianyan.txt'</span>,os.O_CREAT | os.O_RDWR)</span><br><span class="line">In [<span class="number">15</span>]: n = os.write(fd,<span class="string">"mtianyan"</span>)</span><br><span class="line">In [<span class="number">16</span>]: n</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">8</span></span><br><span class="line">In [<span class="number">17</span>]: os.lseek(fd,<span class="number">0</span>,os.SEEK_SET)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">0</span></span><br><span class="line">In [<span class="number">18</span>]: os.read(fd,<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">'mtian'</span></span><br><span class="line">Out[<span class="number">19</span>]: os.close()</span><br></pre></td></tr></table></figure><p>使用os是为了跨平台。</p><h3 id="os方法"><a href="#os方法" class="headerlink" title="os方法"></a>os方法</h3><table><thead><tr><th>os方法</th><th>说明</th></tr></thead><tbody><tr><td>os.access(path, mode)</td><td>判断该文件权限：F_OK存在,权限:R_OK ,W_OK, X_OK</td></tr><tr><td>os.listdir(path)</td><td>返回当path路径下所有文件名组成的列表</td></tr><tr><td>os.remove(path)</td><td>删除文件</td></tr><tr><td>os.rename(old, new)</td><td>修改文件或者目录名</td></tr><tr><td>os.mkdir(path[, mode])</td><td>创建目录</td></tr><tr><td>os.makedirs(path[, mode])</td><td>创建多级目录</td></tr><tr><td>os.removedirs(path)</td><td>删除多级目录</td></tr><tr><td>os.rmdir(path)</td><td>删除目录(目录必须空目录)</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.access(&apos;mtianyan,txt&apos;,os.R_OK)</span><br><span class="line">os.listdir(&apos;./&apos;)</span><br><span class="line">os.rename(&apos;test/&apos;,&apos;test1&apos;)</span><br></pre></td></tr></table></figure><h3 id="os-path方法"><a href="#os-path方法" class="headerlink" title="os.path方法"></a>os.path方法</h3><table><thead><tr><th>os.path方法</th><th>说明</th></tr></thead><tbody><tr><td>os.path.exists(path)</td><td>当前路径是否存在,也可以判断是否有该文件</td></tr><tr><td>os.path.isdir(s)</td><td>是否是一个目录</td></tr><tr><td>os.path.isfile(path)</td><td>是否是一个文件</td></tr><tr><td>os.path.getsize(filename)</td><td>返回文件大小，返回目录文件大小</td></tr><tr><td>os.path.dirname(p)</td><td>返回路径的目录</td></tr><tr><td>os.path.basename(p)</td><td>返回路径的文件名</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">os.path.exists(&apos;./mtianyan.txt&apos;)</span><br><span class="line"># True</span><br><span class="line">os.path.isdir(&apos;./&apos;&apos;)</span><br><span class="line"># True</span><br><span class="line">os.path.isdir(&apos;mtianyan.txt&apos;)</span><br><span class="line"># False</span><br><span class="line">os.path.isfile(&apos;mtianyan.txt&apos;)</span><br><span class="line"># True</span><br></pre></td></tr></table></figure><h1 id="文件练习"><a href="#文件练习" class="headerlink" title="文件练习"></a>文件练习</h1><p>使用Python来管理<code>ini</code>文件：实现<code>查询</code>，<code>添加</code>，<code>删除</code>，<code>保存</code>。</p><ul><li>掌握文件的基本操作</li><li>认识<code>ini</code>文件</li><li>了解<code>ConfigPaser</code></li></ul><h2 id="ini配置文件格式："><a href="#ini配置文件格式：" class="headerlink" title="ini配置文件格式："></a>ini配置文件格式：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">节： [session]</span><br><span class="line">参数(键=值)  name=value</span><br><span class="line"></span><br><span class="line">[port]</span><br><span class="line">port1 = 800</span><br><span class="line">port2 = 900</span><br></pre></td></tr></table></figure><p>定位带<code>port</code>这个节，然后找到。</p><h2 id="ConfigParser"><a href="#ConfigParser" class="headerlink" title="ConfigParser"></a>ConfigParser</h2><p>mtianyan.txt内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[userinfo]</span><br><span class="line">name = mtianyan</span><br><span class="line">pwd = abc</span><br><span class="line"></span><br><span class="line">[study]</span><br><span class="line">python = 15</span><br><span class="line">java_base = 20</span><br></pre></td></tr></table></figure></p><p>两个概念：<code>sections(大的分类)</code>和<code>option小的选项</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line">cfg = ConfigParser.ConfigParser()</span><br><span class="line"></span><br><span class="line">help(cfg.read)</span><br><span class="line"></span><br><span class="line">cfg.read(<span class="string">'mtianyan.txt'</span>)</span><br><span class="line"><span class="comment"># ['mtianyan.txt']</span></span><br><span class="line">cfg.sections() <span class="comment">#返回节点值：userinfo，study</span></span><br><span class="line"><span class="comment"># ['userinfo', 'study']</span></span><br><span class="line"><span class="keyword">for</span> se <span class="keyword">in</span> cfg.sections():</span><br><span class="line"><span class="keyword">print</span> se</span><br><span class="line"><span class="keyword">print</span> cfg.items(se)</span><br><span class="line"><span class="comment">#遍历出整个文件</span></span><br></pre></td></tr></table></figure></p><p>遍历结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">userinfo</span><br><span class="line">[(<span class="string">'name'</span>, <span class="string">'johntian'</span>), (<span class="string">'pwd'</span>, <span class="string">'abc'</span>)]</span><br><span class="line">study</span><br><span class="line">[(<span class="string">'python_base'</span>, <span class="string">'15'</span>), (<span class="string">'python_junior'</span>, <span class="string">'20'</span>), (<span class="string">'linux_base_'</span>, <span class="string">'15'</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cfg.set(<span class="string">'userinfo'</span>, <span class="string">'pwd'</span>, <span class="string">'1234567'</span>)     <span class="comment">#修改键值</span></span><br><span class="line">cg.set(<span class="string">'userinfo'</span>,<span class="string">'email'</span>,<span class="string">'1147727180.com'</span>)//增加键值</span><br><span class="line"></span><br><span class="line">cfg.remove_option(<span class="string">'user info'</span>,<span class="string">'email'</span>)  //删除键值</span><br></pre></td></tr></table></figure><h2 id="文件操作练习"><a href="#文件操作练习" class="headerlink" title="文件操作练习"></a>文件操作练习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1: dump ini</span></span><br><span class="line"><span class="string">2: del section</span></span><br><span class="line"><span class="string">3: del item</span></span><br><span class="line"><span class="string">4: modify item</span></span><br><span class="line"><span class="string">5: add section</span></span><br><span class="line"><span class="string">6: save modify</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student_info</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, recordfile)</span>:</span></span><br><span class="line">        self.logfile = recordfile</span><br><span class="line">        self.cfg = ConfigParser.ConfigParser()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cfg_load</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cfg.read(self.logfile)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cfg_dump</span><span class="params">(self)</span>:</span></span><br><span class="line">        se_list = self.cfg.sections()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"**********************&gt;"</span></span><br><span class="line">        <span class="keyword">for</span> se <span class="keyword">in</span> se_list:</span><br><span class="line">            <span class="keyword">print</span> se</span><br><span class="line">            <span class="keyword">print</span> self.cfg.items(se)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"&lt;*********************"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_item</span><span class="params">(self, section, key)</span>:</span></span><br><span class="line">        self.cfg.remove_option(section, key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_section</span><span class="params">(self, sescion)</span>:</span></span><br><span class="line">        self.cfg.remove_option(section)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_section</span><span class="params">(self, section)</span>:</span></span><br><span class="line">        self.cfg.add_section(section)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_item</span><span class="params">(self, section, key, value)</span>:</span></span><br><span class="line">        self.cfg.set(section, key, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        fp = open(self.logfile, <span class="string">'w'</span>)</span><br><span class="line">        self.cfg.write(fp)</span><br><span class="line">        fp.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    info = student_info(<span class="string">'mtianyan.txt'</span>)</span><br><span class="line">    info.cfg_load()</span><br><span class="line">    info.cfg_dump()</span><br><span class="line">    info.add_section(<span class="string">'userinfo'</span>)</span><br><span class="line">    info.set_item(<span class="string">'userinfo'</span>, <span class="string">'pwd'</span>, <span class="string">'abc'</span>)</span><br><span class="line">    info.cfg_dump()</span><br><span class="line">    info.add_section(<span class="string">'login'</span>)</span><br><span class="line">    info.set_item(<span class="string">'login'</span>, <span class="string">'2018-0106'</span>, <span class="string">'20'</span>)</span><br><span class="line">    info.cfg_dump()</span><br><span class="line">    info.save()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">**********************&gt;</span><br><span class="line">**********************&gt;</span><br><span class="line">userinfo</span><br><span class="line">[(&apos;pwd&apos;, &apos;abc&apos;)]</span><br><span class="line">&lt;*********************</span><br><span class="line">**********************&gt;</span><br><span class="line">userinfo</span><br><span class="line">[(&apos;pwd&apos;, &apos;abc&apos;)]</span><br><span class="line">&lt;*********************</span><br><span class="line">login</span><br><span class="line">[(&apos;2018-0106&apos;, &apos;20&apos;)]</span><br><span class="line">&lt;*********************</span><br><span class="line">[Finished in 0.3s]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;走近Linux之走近文件 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt; 任何语言都离不开对文件的操作，Python语言是如何来操作和管理文件的。掌握文件的基本概念、基本操作，了解文件属性、 linux 系统的文件管理机制及os模块对文件和目录的处理等相关内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[√]慕课网Meshare_huang老师：Python文件处理&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="python从入门到精通" scheme="http://fanpengtao.tk/categories/python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    
    
      <category term="Python" scheme="http://fanpengtao.tk/tags/Python/"/>
    
      <category term="专题笔记" scheme="http://fanpengtao.tk/tags/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
      <category term="文件处理" scheme="http://fanpengtao.tk/tags/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>用TravisCI持续集成自动部署Hexo博客的个人实践</title>
    <link href="http://fanpengtao.tk/post/90a759d5.html"/>
    <id>http://fanpengtao.tk/post/90a759d5.html</id>
    <published>2018-01-04T12:21:45.000Z</published>
    <updated>2018-10-21T16:59:32.589Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>优秀的程序员都是不用持续集成的 </p></blockquote><div class="note "><p> 前几天我面试了一个码农，连续几个专业问题他都没答上来。<br>尴尬之余，我问它：「你没有什么理想吗？你现在最渴望的事情是什么？」<br>码农转悠着大眼睛，不假思索道：「做一个持续集成的自动部署！」<br>真没想到在面试中居然还有这种操作。<br>我问为什么这能成为现阶段最渴望的事情。<br>他反问「你就没有改动代码频繁，deploy无数次到崩溃的夜晚吗？寂寞长夜，总想好好专心写写博客，宽慰下自己啊。」<br>今天我就要做为一个不优秀的程序员使用持续集成。</p></div><a id="more"></a><p>观看本教程的前置条件：</p><ol><li>已经配置好了hexo博客。拥有一个仓库如：<code>mtianyan.github.io</code>\</li><li>已经将博客的源码也<code>push</code>到了一个仓库如：<code>hexoBlog-Github</code></li><li>已经配置了使用gulp进行博文压缩。</li></ol><p>参考：推荐观看我的博文《Hexo+Next主题搭建博客安装美化及SEO优化指南》<code>中将博客源码备份到github或码云</code> 与 <code>使用gulp进行博文压缩</code></p><p>完成上述前置条件，虽然不是必须的，但是可以与我保持一致。减少错误。</p><p>部分内容转载来源参考博客: <a href="https://www.karlzhou.com/2016/05/28/travis-ci-deploy-blog/" target="_blank" rel="noopener">https://www.karlzhou.com/2016/05/28/travis-ci-deploy-blog/</a></p><p>个人对上面博客做了新版本的修订。我最近每天改动博客的内容。一会目录有问题，一会改了站点参数，主题参数，出现Bug,<br>不停的提交快崩溃了：寂寞长夜，总想好好专心写写博客，宽慰下自己啊。</p><p>本文是一次在这个命题下的个人实践记录：大部分文字转载自参考博客</p><p>通常更新一篇Hexo博客文章，基本流程是：</p><ol><li>本地新建post页面</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo n travis-ci-deploy-blog</span><br><span class="line">INFO  Created: e:\WORK\GitHub\think-diff.me.source\source\_posts\travis-ci-deploy-blog.md</span><br></pre></td></tr></table></figure><ol><li>在文本编辑器里用<code>markdown</code>语法编辑新建页面</li><li>本地生成public文件：<code>hexo g &amp;&amp; gulp</code></li><li>启动本地测试web server：<code>hexo s --debug</code></li><li>浏览器打开<code>http://localhost:4000/</code>, 浏览生成文章</li><li>如果满意，即可部署到Github存放page仓库里：<code>hexo d</code></li></ol><p>本文主要介绍如何利用<code>TravisCI</code>自动完成第<code>3-6</code>步.</p><h1 id="What-is-Travis-CI"><a href="#What-is-Travis-CI" class="headerlink" title="What is Travis CI?"></a>What is Travis CI?</h1><p>Travis CI</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/9G63Bg3iaa.png?imageslim" alt="mark"></p><p><code>CI(Continuous Integration)</code>翻译为<code>持续集成</code>。<code>Travis CI</code>是一个提供<strong>持续集成功能</strong>的平台，在<code>Github</code>上，可以添加<code>Travis CI</code>，当有<code>code push</code>时候，会推送通知到<code>Travis</code>，根据设置的脚本运行指定任务。</p><p>目前有两个站点:</p><ol><li><p><code>Travis.org</code> 对于所有<code>public</code>项目完全免费</p></li><li><p><code>Travics.com</code> 只针对<code>private</code>项目，提供更多一些额外功能，如<code>cache</code>，并行<code>build</code>个数</p></li></ol><p>两个站点只能看到各自的项目，不能通用。</p><h1 id="Why-we-need-Travis-CI"><a href="#Why-we-need-Travis-CI" class="headerlink" title="Why we need Travis CI?"></a>Why we need Travis CI?</h1><p>有人可能会有疑问: 在本地写完博客，直接一个命令<code>hexo d</code>，不就搞定了么， 为啥要费力搞<code>CI</code>？</p><p>的确, 想用<code>TravisCI</code>来自动部署Hexo博客程序，需要不少设置（瞎折腾），为了给大伙信心，列举一些优点：</p><div class="note success"><p>优点1：直接在线编辑文件，立即生效</p></div><p>假设你已经发表了一篇文章，过了几天你在朋友机器上浏览发现有几个明显的错别字，对于有强迫症的，这是不能容忍的。 但你手头又没有完整的hexo+nodejs+git的开发环境，重新下载git，node，hexo配置会花费不少时间，特别不划算。</p><p>如果按照这篇完整折腾完，你可以直接用浏览器访问github个人项目仓库，直接编辑那篇post的原md文件，前后2分钟改完。 稍等片刻，你的博客就自动更新了。</p><div class="note success"><p>优点2：自动部署，同时部署到多个地方</p></div><p>在<code>gitcafe</code>是被收购之前，很多同学（包括我）都是托管在上面的，国内访问速度比<code>Github</code>快很多。<br>配合<code>DNS</code>根据<code>IP</code>位置可以自动选择导到<code>gitcafe</code>, 还是<code>github</code>，甚至你还可以部署到七牛云的静态网站。<br>利用<code>Travis CI</code>可同时更新多个仓库。</p><p>比如我的博客现在有两个站：一个部署在码云，一个部署在github。都需要我自己手动部署。</p><p>注：最后发现码云并不支持。emmmmm</p><div class="note success"><p>优点3：部署快捷方便</p></div><p>手动<code>deploy</code>需要推送<code>public</code>整个folder到github上，当后期网站文章、图片较多时候，对于天朝的网络，有时候连接github 就是不顺畅，经常要傻等不少上传时间。<br>有了CI，你可以只提交<code>post</code>文件里单独的<code>md</code>文件即可，很快很爽，谁用谁知道。</p><div class="note success"><p>优点4：bigger than bigger<br>build icon</p></div><p>你的项目<code>Readme</code>里面可以显示<code>CI build</code>图标，很酷有没有？<br>另外通过设置，可以在当<code>build失败</code>时<strong>自动发邮件提醒你。</strong><br>上面的图标，如果登陆后你在Github项目里，直接点击图标，会跳转到你当前项目build的log界面，很方便。</p><p>当然有了<code>CI</code>，你可以做很多事情，如<code>自动运行单元测试</code>，<code>成功后再deploy</code>等等。很多项目里的持续集成基本也是这个道理。</p><h1 id="How-to-use-Travis-CI-to-deploy-hexo-blog"><a href="#How-to-use-Travis-CI-to-deploy-hexo-blog" class="headerlink" title="How to use Travis CI to deploy hexo blog?"></a>How to use Travis CI to deploy hexo blog?</h1><p>原博主是使用private项目演示的，虽然我也就用学校邮箱加入了<code>Github</code>的<code>Education plan</code> 但是为了通用性，我本次做了<code>public</code>的实践。</p><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h3 id="准备Travis-CI账号-传送门：public项目-private项目-在登陆成功后"><a href="#准备Travis-CI账号-传送门：public项目-private项目-在登陆成功后" class="headerlink" title="准备Travis CI账号, 传送门：public项目, private项目, 在登陆成功后."></a>准备Travis CI账号, 传送门：<a href="https://travis-ci.org/" target="_blank" rel="noopener">public项目</a>, <a href="https://travis-ci.com/" target="_blank" rel="noopener">private项目</a>, 在登陆成功后.</h3><p><img src="http://myphoto.mtianyan.cn/blog/180104/A9fAbhaL19.png?imageslim" alt="mark"></p><p>如果发现没有<code>Repositories</code>，点击上图加号会看到自己的目录然后把想要持续集成的仓库开关打开，会自动hook到Github。</p><p><img src="http://myphoto.mtianyan.cn/blog/180105/l1HkKEIcjh.png?imageslim" alt="mark"></p><p>注意: 这里需要打开的是自己的</p><h3 id="准备Github-Personal-Access-Token。"><a href="#准备Github-Personal-Access-Token。" class="headerlink" title="准备Github Personal Access Token。"></a>准备Github Personal Access Token。</h3><p>在Github的setting页面，左侧面板选择<code>Developer settings</code>然后<code>Personal access tokens</code>, 右上角点击<code>Generate new token</code>。生成<code>token</code>时候需要确定<code>访问scope</code>，这里我们选择第一个<code>repo</code>即可。<strong>重要：生成的<code>token</code>只有第一次可见，一定要保存下来备用。</strong></p><p><img src="http://myphoto.mtianyan.cn/blog/180104/k9k94G963L.png?imageslim" alt="mark"></p><h3 id="可选操作：除非你对于Travis-CI保存你的密钥不信任，才需要做，否则可以直接跳过省事"><a href="#可选操作：除非你对于Travis-CI保存你的密钥不信任，才需要做，否则可以直接跳过省事" class="headerlink" title="(可选操作：除非你对于Travis CI保存你的密钥不信任，才需要做，否则可以直接跳过省事)"></a>(可选操作：除非你对于Travis CI保存你的密钥不信任，才需要做，否则可以直接跳过省事)</h3><p>推荐直接跳过：有点奇怪原博主加了密又自行设置了环境变量保存token。加密在最后都没有用到。。。</p><ul><li>准备<a href="https://github.com/travis-ci/travis.rb" target="_blank" rel="noopener">Travis命令行工具</a>，需要依赖ruby环境。对于Windows环境，可以使用这里的<a href="https://rubyinstaller.org/downloads/" target="_blank" rel="noopener">安装包</a>，安装完成后可用<code>ruby -v</code>检查。</li></ul><p>请安装<code>2.4.x</code>版本。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/3bjG0jfmc4.png?imageslim" alt="mark"></p><p><strong>注意</strong>不要安装<code>2.5</code>版本。暂时不支持。会报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Error installing travis: The last version of ffi (&gt;= 1.3.0) to support your Ruby &amp; RubyGems was 1.9.18. Try installing it with `gem install ffi -v 1.9.18` and then running the current command again ffi requires Ruby version &lt; 2.5, &gt;= 2.0. The current ruby version is 2.5.0.</span><br></pre></td></tr></table></figure><ul><li>安装命令行工具，参考这里<a href="https://github.com/travis-ci/travis.rb#installation" target="_blank" rel="noopener">官方文档</a>：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure><p>验证travis安装成功</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/cgGbjIaA75.png?imageslim" alt="mark"></p><ul><li>用Github的用户名/密码登录这个命令行工具。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis login</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180104/BGK3J1449G.png?imageslim" alt="mark"></p><p>登陆成功后，开始加密，参考下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt -r &lt;github name&gt;/&lt;github repo&gt; GH_Token=XXX</span><br><span class="line"></span><br><span class="line">#sample：</span><br><span class="line">travis encrypt -r mtianyan/hexoBlog-Github GH_TOKEN=33ba3948bxxx</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180104/BcCm1JgH4B.png?imageslim" alt="mark"></p><p>把输出的<code>secure:&quot;xxxx&quot;</code>保存。可以在文件的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   - secure: `你加密后的`</span><br></pre></td></tr></table></figure><p><code>travis-ci</code>会自动对于你的密钥进行解密。当做加密前的环境变量:<code>GH_TOKEN</code></p><h3 id="配置-travis-yml（如果没有，新建"><a href="#配置-travis-yml（如果没有，新建" class="headerlink" title="配置.travis.yml（如果没有，新建)"></a>配置<code>.travis.yml</code>（如果没有，新建)</h3><p>添加环境变量来保护自己的github密钥。</p><p><img src="http://myphoto.mtianyan.cn/blog/180105/k5jdFhABe3.png?imageslim" alt="mark"></p><p>点击<code>more options</code> 选择 <code>setting</code>.</p><p><img src="http://myphoto.mtianyan.cn/blog/180105/i8KFECDafl.png?imageslim" alt="mark"></p><p>找到环境变量值。将自己在github得到的<code>个人token值</code> 作为<code>value</code>，<code>name</code>可以自行定义<br><code>Travis_Token</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180105/Gjb2cI7287.png?imageslim" alt="mark"></p><p>下面<code>gulp</code>的压缩安装，参考我Hexo中教程的方法。<br>如果不需要压缩，可自行替换为<code>hexo g</code></p><p>我个人的<code>.travis.yml</code> 可供<a href="https://github.com/mtianyan/hexoBlog-Github/blob/master/.travis.yml" target="_blank" rel="noopener">参考</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">language: node_js  #设置语言</span><br><span class="line"></span><br><span class="line">node_js: stable  #设置相应的版本</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">    apt: true</span><br><span class="line">    directories:</span><br><span class="line">        - node_modules # 缓存不经常更改的内容</span><br><span class="line"></span><br><span class="line">before_install:</span><br><span class="line">    - export TZ=&apos;Asia/Shanghai&apos; # 更改时区</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - npm install  #安装hexo及插件</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hexo clean  #清除</span><br><span class="line">  - hexo g &amp;&amp; gulp  #生成</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  - git clone https://$&#123;GH_REF&#125; .deploy_git  # GH_REF是最下面配置的仓库地址</span><br><span class="line">  - cd .deploy_git</span><br><span class="line">  - git checkout master</span><br><span class="line">  - cd ../</span><br><span class="line">  - mv .deploy_git/.git/ ./public/   # 这一步之前的操作是为了保留master分支的提交记录，不然每次git init的话只有1条commit</span><br><span class="line">  - cd ./public</span><br><span class="line">  - git config user.name &quot;mtianyan&quot;  #修改name</span><br><span class="line">  - git config user.email &quot;1147727180@qq.com&quot;  #修改email</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m &quot;Travis CI Auto Builder at `date +&quot;%Y-%m-%d %H:%M&quot;`&quot;  # 提交记录包含时间 跟上面更改时区配合</span><br><span class="line">  - git push --force --quiet &quot;https://$&#123;Travis_Token&#125;@$&#123;GH_REF&#125;&quot; master:master  #Travis_Token是在Travis中配置环境变量的名称</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - master  #只监测master分支，master是我的分支的名称，可根据自己情况设置</span><br><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   - GH_REF: github.com/mtianyan/mtianyan.github.io.git  #设置GH_REF，注意更改yourname</span><br><span class="line"></span><br><span class="line"># configure notifications (email, IRC, campfire etc)</span><br><span class="line"># please update this section to your needs!</span><br><span class="line"># https://docs.travis-ci.com/user/notifications/</span><br><span class="line">notifications:</span><br><span class="line">  email:</span><br><span class="line">    - 1147727180@qq.com</span><br><span class="line">    - mtianyan@outlook.com</span><br><span class="line">  on_success: change</span><br><span class="line">  on_failure: always</span><br></pre></td></tr></table></figure><p>这里需要注意的是：<code>GH_REF</code>，这个地址其实就是你github上存放<code>静态博客最终文件的仓库地址</code>，末尾加上<code>.git</code>。</p><h3 id="集成build-icon，在Travis-CI控制台里，点击那个icon，选择markdown的样式，然后放到项目Readme里即可。"><a href="#集成build-icon，在Travis-CI控制台里，点击那个icon，选择markdown的样式，然后放到项目Readme里即可。" class="headerlink" title="集成build icon，在Travis CI控制台里，点击那个icon，选择markdown的样式，然后放到项目Readme里即可。"></a>集成<code>build icon</code>，在<code>Travis CI</code>控制台里，点击那个<code>icon</code>，选择<code>markdown</code>的样式，然后放到项目<code>Readme</code>里即可。</h3><p><img src="http://myphoto.mtianyan.cn/blog/180105/bl7HDma64l.png?imageslim" alt="mark"></p><h3 id="大功告成后的使用。"><a href="#大功告成后的使用。" class="headerlink" title="大功告成后的使用。"></a>大功告成后的使用。</h3><p>你可以在本地hexo源码目录内，使用命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -am &quot;实验&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>来将自己的博客源码提交至<code>github中的源码仓库</code> CI检测到你的源码更新改动会自动帮你编译<code>git push 到你的静态页面存放仓库</code></p><p><img src="http://myphoto.mtianyan.cn/blog/180105/j9fA5GhEfk.png?imageslim" alt="mark"></p><p>在<code>commit</code>记录中会显示<code>bulid</code>的状态。</p><p>注意：有点慢。毕竟他要在Ci的服务器上根据你的配置文件安装下载，然后使用它的虚拟机进行部署。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;优秀的程序员都是不用持续集成的 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt; 前几天我面试了一个码农，连续几个专业问题他都没答上来。&lt;br&gt;尴尬之余，我问它：「你没有什么理想吗？你现在最渴望的事情是什么？」&lt;br&gt;码农转悠着大眼睛，不假思索道：「做一个持续集成的自动部署！」&lt;br&gt;真没想到在面试中居然还有这种操作。&lt;br&gt;我问为什么这能成为现阶段最渴望的事情。&lt;br&gt;他反问「你就没有改动代码频繁，deploy无数次到崩溃的夜晚吗？寂寞长夜，总想好好专心写写博客，宽慰下自己啊。」&lt;br&gt;今天我就要做为一个不优秀的程序员使用持续集成。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="运维环境配置" scheme="http://fanpengtao.tk/categories/%E8%BF%90%E7%BB%B4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="环境搭建" scheme="http://fanpengtao.tk/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Hexo" scheme="http://fanpengtao.tk/tags/Hexo/"/>
    
      <category term="TravisCI" scheme="http://fanpengtao.tk/tags/TravisCI/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器-专题笔记</title>
    <link href="http://fanpengtao.tk/post/aaa76191.html"/>
    <id>http://fanpengtao.tk/post/aaa76191.html</id>
    <published>2018-01-04T08:41:46.000Z</published>
    <updated>2018-10-21T16:59:32.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>学会装饰器，Python更进阶 </p></blockquote><div class="note "><p> 函数作用域到闭包到装饰器讲解，及闭包和装饰器的运用。</p><ul><li>[√] 慕课网Meshare_huang老师: python进阶</li></ul></div><a id="more"></a><p><img src="http://myphoto.mtianyan.cn/blog/180104/J8Gm6gi9BF.png?imageslim" alt="mark"></p><h1 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h1><p>介绍 Python 的函数作用域，了解函数作用域 <code>LEGB</code> 间关系。</p><p>主要内容:</p><ul><li>函数作用域LEGB</li><li>闭包理解与使用</li><li>装饰器</li></ul><p><code>LEGB</code>: <code>L&gt;E&gt;G&gt;B</code></p><ul><li><code>L: local</code> 函数内部作用域</li><li><code>E: enclosing</code> 函数内部与内嵌函数之间(主要是内置函数对我们函数变量的一个引用，称之为闭包)</li><li><code>G: global</code> 全局作用域: 我们所定义的全局变量。</li><li><code>B: build-in</code> 内置作用域: Python解释器默认导入的一些变量。</li></ul><p><code>build-in</code>比如：<code>tuple</code>，<code>list</code>，<code>元组</code>等。</p><p>知识点： <code>LEGB</code>原则: 首先从<code>函数内部作用域</code>查找，然后去<code>enclosing作用域</code>中去查找,然后依次是<code>全局</code> 和<code>内置</code>。</p><p>例子(使用Python3.4版本 + sublimeText)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">passline = <span class="number">60</span>          <span class="comment">#passline 是全局变量（global）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(val)</span>:</span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"></span><br><span class="line">func(<span class="number">89</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass</span><br></pre></td></tr></table></figure><p>分析：</p><ul><li>当我们定义一个函数时，会引入一个作用域：<code>L: local</code>.</li><li>当我们对于<code>func</code>函数进行调用时，<code>val</code>就是我们的一个本地变量。</li><li>在函数内部并没有定义<code>passline</code> 的值。这个时候回去全局变量找查找。如果全局没有还会继续向上查找<code>B: build-in</code></li></ul><p>当总分变为150.我们的<code>passline</code>应该设为<code>90</code>,如果我们不想修改全局的<code>passline</code>,<br>我们可以在函数内部定义新的passline。因为<code>L&gt;G</code>,所以会以我们自己函数内部的<code>local</code>域为准。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">passline = <span class="number">60</span>          <span class="comment">#passline 是全局变量（global）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">90</span>      <span class="comment">#这里的passline是函数内部作用域(local)</span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"></span><br><span class="line">func(<span class="number">89</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed</span><br></pre></td></tr></table></figure><p>Python解释器查找顺序为<code>L--&gt;E--&gt;G--&gt;B</code>,如果已经找到，就不会找更上层。</p><p>如果我们需要拿到两个分数中的更大值。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Max</span><span class="params">(val1,val2)</span>:</span></span><br><span class="line"><span class="keyword">return</span> max(val1,val2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (Max(<span class="number">90</span>,<span class="number">100</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure><p><code>Max</code>函数内部引用了一个内置函数方法<code>max</code>.这个内置方法在<code>Max</code>函数中以及整个文件中都没有定义。</p><p>这个<code>max</code>存在于我们的<code>build-in</code>.Python解释器在运行时会自动导入内置的方法。比如<code>list,tuple</code></p><p>函数内部的函数产生<code>enclosing</code>：</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">passline = <span class="number">60</span>          <span class="comment">#passline 是全局变量（global）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">90</span>      <span class="comment">#这里的passline是函数内部作用域(local)</span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> (val)</span><br><span class="line"><span class="comment"># 调用方式1</span></span><br><span class="line">in_func()</span><br><span class="line"><span class="comment"># 调用方式2：将in_func()返回。这样我们就可以在外部调用。</span></span><br><span class="line">func(<span class="number">89</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">failed</span><br><span class="line">89</span><br></pre></td></tr></table></figure><p><code>val</code>变量的查找过程:  <code>print (val)</code> 中val的查找过程。</p><ul><li><code>in_func()</code>内部并没有定义这个<code>val</code>的值。也就是<code>local作用域</code>中没有这个值.</li><li>下一步我们就会去<code>enclosing</code>作用域查找。也就是我们的<code>func(val)</code>中引入的有val变量。</li><li>找到传入的<code>val</code>值<code>89</code></li></ul><h1 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h1><p>介绍什么是闭包，为什么使用闭包，闭包作用</p><h2 id="装饰器之闭包1"><a href="#装饰器之闭包1" class="headerlink" title="装饰器之闭包1"></a>装饰器之闭包1</h2><p><code>closure</code>：内部函数对<code>enclosig</code>作用域的变量进行引用</p><blockquote><p>概念：如果在一个内部函数里，对在<code>外部作用域（但不是在全局作用域）</code>也就是<code>enclosig</code>作用域的变量进行引用，那么内部函数就被认为是<code>闭包（closure）</code></p></blockquote><p>函数实质与属性</p><ul><li>函数是一个对象</li><li>函数执行完之后内部变量回收(如果我们中间产生一个变量，这个变量返回那么他不会被回收: 因为他的引用计数还补为0)</li><li>作为一个对象函数拥有自己的属性(闭包函数的特殊属性)</li><li>函数返回值</li></ul><p>正常的调用参考上一章代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">passline = <span class="number">60</span>          <span class="comment">#passline 是全局变量（global）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">90</span>     </span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> (val)</span><br><span class="line">in_func()</span><br><span class="line"><span class="keyword">return</span> in_func <span class="comment"># in_func是func内部的一个函数对象。</span></span><br><span class="line">f = func(<span class="number">89</span>) <span class="comment">#使用f来接收返回值</span></span><br><span class="line">f() <span class="comment">#infunc</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">failed</span><br><span class="line">89</span><br><span class="line">89</span><br></pre></td></tr></table></figure><p><code>func</code>执行完成之后，他的<code>val</code>值就会消失。但是我们再次调用<code>f()</code><br>因为<code>infunc</code>的引用计数还没有归零。所以会一直保留。</p><ul><li>当我们这时候运行<code>f()</code>，<code>val</code>值是哪来的呢？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (f.__closure__)</span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&lt;cell at 0x0000000005236C48: int object at 0x00000000052169F8&gt;,)</span><br></pre></td></tr></table></figure></p><p>这里面有一个<code>int object</code> 地址为: <code>0x00000000052169F8</code></p><p>添加一行查看<code>传入func</code>的<code>val</code>的<code>id</code>值(<code>%x</code> 表示使用<code>16进制</code>打印。<code>id()</code>可打印出<code>val</code>的<code>id</code>)     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def func(val):</span><br><span class="line">print (&apos;%x&apos;%id(val))</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180105/g5IG6mbE7m.png?imageslim" alt="mark"></p><p>可以看出<code>value</code>的<code>id</code>值和<code>__closure__</code>中的那个<code>int object</code>的值一样。</p><p>如果我引用了外部<code>enclosing</code>的值。会将该值保存在<code>函数的属性</code>中。<br>当我们调用<code>f()</code>时并没有去代码中查找。而是去函数的属性(<code>Local域</code>)中查找.</p><p>可以理解为在<code>in_func</code>定义的时候，函数属性中会添加<code>(val,)</code><br>这个属性的值是一个元组。是不能变得。</p><p>总分从<code>100</code>到<code>150</code>涉及到passline的取值问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">passline = <span class="number">60</span>  <span class="comment">#100      </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">90</span> <span class="comment"># 150</span></span><br></pre></td></tr></table></figure><p>最常用的解决方案是定义两个函数分别处理:</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_150</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">90</span> <span class="comment"># 150    </span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_100</span><span class="params">(val)</span>:</span></span><br><span class="line">passline = <span class="number">60</span> <span class="comment"># 150    </span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line">func_100(<span class="number">89</span>) </span><br><span class="line">func_150(<span class="number">89</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pass</span><br><span class="line">failed</span><br></pre></td></tr></table></figure><p>上面两个函数在处理逻辑上基本一致，如果后期对于打印出来的信息要做修改，就得修改两遍。</p><p>如要为print添加数值的显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_150</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d pass'</span> %val)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_100</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d pass'</span> %val)</span><br></pre></td></tr></table></figure><p>所有的改动都得做两遍。（这里想起了c++的模板）</p><p>进阶版修改:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">set_passline</span><span class="params">(passline)</span>:</span> <span class="comment">#passline = 60</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmp</span><span class="params">(val)</span>:</span> <span class="comment">#cmp 的__closure__属性中加入passline</span></span><br><span class="line"><span class="keyword">if</span> val &gt;= passline:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'%x'</span>%id(passline))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'%x'</span>%id(passline))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'failed'</span>)</span><br><span class="line"><span class="keyword">return</span> cmp</span><br><span class="line"></span><br><span class="line">f_100 = set_passline(<span class="number">60</span>)</span><br><span class="line">f_150 = set_passline(<span class="number">90</span>)</span><br><span class="line"><span class="keyword">print</span> (type(f_100)) <span class="comment"># f_100就是一个函数对象。__closure__属性中存放着passline</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (f_100.__closure__)</span><br><span class="line">f_100(<span class="number">89</span>)</span><br><span class="line"><span class="keyword">print</span> (f_150.__closure__)</span><br><span class="line">f_150(<span class="number">89</span>)</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180105/7DEIlh1eli.png?imageslim" alt="mark"></p><p>理解：闭包就是<code>内部函数(cmp)</code>对于<code>外层函数(set_passline)</code>变量(<code>passline</code>)的使用（也就是对<code>enclosing作用域变量</code>的使用），会将我们使用的这个变量(<code>passline</code>)放到我们的<code>__closure__</code>这个属性中。当我们内部函数处理时会直接对于这个属性值进行使用。</p><p>闭包的作用：</p><ul><li>封装</li><li>代码复用</li></ul><h2 id="装饰器之闭包2"><a href="#装饰器之闭包2" class="headerlink" title="装饰器之闭包2"></a>装饰器之闭包2</h2><p>上节我们接触到的<code>enclosing域</code>中的变量<code>passline</code>是一个整数，我们可不可以把它换成一个函数对象呢。</p><p>废话，当然可以。</p><p>例子： 求一组数据的总分和平均分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_average</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(arg) / len(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(my_average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15</span><br><span class="line">3</span><br></pre></td></tr></table></figure><ul><li>此时如果我们的<code>my_average</code>需要加上一个对于传入参数不为0的判断。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(my_average())</span><br></pre></td></tr></table></figure><p>因为传入为空会报<code>除0</code>错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZeroDivisionError: integer division or modulo by zero</span><br></pre></td></tr></table></figure><ul><li>而我们如果想要给<code>my_sum</code>传一个字符串进去。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(my_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'6'</span>))</span><br></pre></td></tr></table></figure><p>会报错不支持<code>int</code>和<code>str</code>相加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: unsupported operand type(s) for +: &apos;int&apos; and &apos;str&apos;</span><br></pre></td></tr></table></figure><p>说明我们的函数写的不够健全。我们还需要对于函数的参数进行判断。</p><ol><li>判断参数有没有长度。也就是不能为空。</li><li>对于参数的类型进行判断，限制为只是<code>int型</code></li></ol><p>普通版实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val, int):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> sum(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_average</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val, int):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> sum(arg) / len(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(my_average(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'6'</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">None</span><br><span class="line">3</span><br><span class="line">None</span><br></pre></td></tr></table></figure><p>可以看出两部分代码都有重合，我们使用进阶方法，使用闭包方式完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'in mysum arg='</span>, arg)</span><br><span class="line">    <span class="keyword">return</span> sum(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_average</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'in my_average arg='</span>, arg)</span><br><span class="line">    <span class="keyword">return</span> sum(arg) / len(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_dec</span><span class="params">(*arg)</span>:</span>  <span class="comment"># my_sum -&gt; __closure__</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'in dec arg='</span>, arg)</span><br><span class="line">        <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val, int):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> func(*arg)</span><br><span class="line">    <span class="keyword">return</span> in_dec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dec() return indec -&gt; my_sum;</span></span><br><span class="line"><span class="comment"># mysum = in_dec(*arg);</span></span><br><span class="line">my_sum = dec(my_sum)</span><br><span class="line">my_average = dec(my_average)</span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'6'</span>))</span><br><span class="line"><span class="comment"># print(my_average(1, 2, 3, 4, 5))</span></span><br><span class="line"><span class="comment"># print(my_average())</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&apos;in dec arg=&apos;, (1, 2, 3, 4, 5))</span><br><span class="line">(&apos;in mysum arg=&apos;, (1, 2, 3, 4, 5))</span><br><span class="line">15</span><br><span class="line">(&apos;in dec arg=&apos;, (1, 2, 3, 4, 5, &apos;6&apos;))</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>我们把原有的重复的逻辑操作放进了我们的<code>in_dec</code>中。<br><code>def dec(func):</code>中<code>func</code>是我们传入的一个参数。因此我们调用这个函数时。我们可以指定它做什么</p><p>此时我们想要让<code>func()</code>对于<code>arg</code>进行处理。所以<code>return func(*arg)</code></p><p>函数名可以进行重新赋值：<code>my_sum = dec(my_sum)</code></p><ul><li>第一步我们调用的是<code>dec(func)</code>,调用之后将<code>my_sum</code>传了进去。因为在<code>in_dec</code>中我们对他进行了使用。所以我们的<code>in_dec</code>就是一个闭包。<ul><li>这个时候<code>my_sum</code>就已经作为<code>in_dec</code>的一个<code>__closure__</code> 属性被保存。那么在<code>in_dec</code>内部就可以直接使用<code>my_sum</code></li></ul></li><li>第二步<code>my_sum = dec(my_sum)</code>时。<code>my_sum</code>将保存<code>dec()</code>被调用后的返回值也就是<code>in_dec(*arg)</code>对象。</li></ul><p>具体执行函数： </p><ul><li>第一步是调用的<code>in_dec</code>函数</li><li>第二步是调用的<code>func</code>也就是<code>my_sum</code></li></ul><p>这里所有参数的处理都是<code>in_dec</code>处理的。所以当第二个直接返回<code>0</code>时，<code>my_sum</code>直接没有被调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dec() return indec -&gt; my_sum;</span></span><br><span class="line"><span class="comment"># mysum = in_dec(*arg);</span></span><br></pre></td></tr></table></figure><h1 id="Python装饰器"><a href="#Python装饰器" class="headerlink" title="Python装饰器"></a>Python装饰器</h1><p>python装饰器</p><pre><code>- 装饰器用来装饰函数- 返回一个函数对象- 被装饰函数标识符指定返回的函数对象(A被装饰了，再用A接收被装饰后返会的新对象)被装饰的函数去哪了？- 语法糖 @deco</code></pre><p><code>my_sum = dec(my_sum)</code>执行过程：</p><ul><li><code>dec(my_sum)</code>将<code>my_sum</code>作为一个参数传给<code>dec</code>函数.</li><li><code>dec</code>函数内部有一个内置的函数<code>in_dec</code></li><li>内置函数作为返回值重新赋给了<code>my_sum</code></li></ul><p>理解：装饰器就是对于闭包的一个使用。Python提供了语法糖<code>@</code></p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"call dec"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_dec</span><span class="params">(*arg)</span>:</span>  <span class="comment"># my_sum</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'in dec arg='</span>, arg)</span><br><span class="line">        <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val, int):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> func(*arg)</span><br><span class="line">    <span class="keyword">return</span> in_dec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dec</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'in mysum arg='</span>, arg)</span><br><span class="line">    <span class="keyword">return</span> sum(arg)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call dec</span><br></pre></td></tr></table></figure><p>并没有显式的调用任何方法，但是打印出了<code>call dec</code><br>因为<code>@dec</code>就相当于<code>my_sum = dec(my_sum)</code>已经进行了调用。此时的<code>my_sum</code>已经是装饰后的函数<code>in_dec</code>了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><p><code>@dec</code>就相当于<code>my_sum = dec(my_sum)</code>，这是python解释器支持的语法糖。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"call dec"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_dec</span><span class="params">(*arg)</span>:</span>  <span class="comment"># my_sum</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">'in dec arg='</span>, arg)</span><br><span class="line">        <span class="keyword">if</span> len(arg) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> arg:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(val, int):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> func(*arg)</span><br><span class="line">    print(<span class="string">'return in_dec'</span>)</span><br><span class="line">    <span class="keyword">return</span> in_dec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dec</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*arg)</span>:</span>  <span class="comment"># my_sum = in_dec</span></span><br><span class="line">    print(<span class="string">'in mysum arg='</span>, arg)</span><br><span class="line">    <span class="keyword">return</span> sum(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call dec</span><br><span class="line">return in_dec</span><br><span class="line">(&apos;in dec arg=&apos;, (1, 2, 3, 4, 5))</span><br><span class="line">(&apos;in mysum arg=&apos;, (1, 2, 3, 4, 5))</span><br><span class="line">15</span><br></pre></td></tr></table></figure><p>装饰器就是对于我们的函数进行了功能的丰富。内部继续调用具体函数，<br>将新函数返回，并覆盖原函数变量。实质就是对于闭包的使用。<br><code>my_sum</code>当做<code>enclosing</code>域的变量。被内置函数<code>in_dec</code>所使用。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_deco</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'in decp'</span>)</span><br><span class="line">        func()</span><br><span class="line">    print(<span class="string">'call deco'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (type(bar))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call deco</span><br><span class="line">&lt;type &apos;NoneType&apos;&gt;</span><br></pre></td></tr></table></figure><p>因为我们在外层函数<code>deco</code>中返回的是<code>None</code></p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_deco</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'in decp'</span>)</span><br><span class="line">        func()</span><br><span class="line">    print(<span class="string">'call deco'</span>)</span><br><span class="line">    <span class="keyword">return</span> in_deco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in bar'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(type(bar))</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call deco</span><br><span class="line">&lt;type &apos;function&apos;&gt;</span><br><span class="line">in decp</span><br><span class="line">in bar</span><br></pre></td></tr></table></figure><p>给被装饰函数加上参数：第二个装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">'in bar'</span>, x + y)</span><br></pre></td></tr></table></figure><p>我们如果给被装饰函数加上了参数。那么也要对要返回的内置函数<code>in_deco</code>加上参数。<br>否则报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: bar() takes exactly 2 arguments (0 given)</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_deco</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        print(<span class="string">'in decp'</span>)</span><br><span class="line">        func(x, y)</span><br><span class="line">    print(<span class="string">'call deco'</span>)</span><br><span class="line">    <span class="keyword">return</span> in_deco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">'in bar'</span>, x + y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(type(bar))</span><br><span class="line">bar(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call deco</span><br><span class="line">&lt;type &apos;function&apos;&gt;</span><br><span class="line">in decp</span><br><span class="line">(&apos;in bar&apos;, 3)</span><br></pre></td></tr></table></figure><p>要同时对于<code>in_deco(x, y)</code>和<code>func(x, y)</code>都加上参数。</p><p>假设我们是Python解释器：</p><ul><li>我们看到了<code>@deco</code>我们将会调用<code>deco()</code>然后将<code>bar</code>也就是被装饰函数作为参数传入。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deco(bar) -&gt; indeco</span><br><span class="line">bar -&gt; in_deco  #(enclosing作用域)变量保存在in_deco的`__closure__`使用。</span><br><span class="line">bar() in_deco() 重新调用自己属性中的被装饰函数</span><br></pre></td></tr></table></figure><ul><li>调用之后<code>deco</code>会返回一个<code>in_deco</code>的函数对象。</li><li>现在根本没地方选的。只能存在原来的<code>bar</code>中。因此<code>bar</code>已经变成了<code>in_deco</code></li><li>而<code>in_deco</code>中调用的<code>func(x,y)</code>是存放在自己的<code>bar.__closure__</code>中了。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_deco</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        print(<span class="string">'%x'</span> % id(func))</span><br><span class="line">        print(in_deco.__closure__)</span><br><span class="line">        print(<span class="string">'in deco'</span>)</span><br><span class="line">        func(x, y)</span><br><span class="line">    print(<span class="string">'call deco'</span>)</span><br><span class="line">    <span class="keyword">return</span> in_deco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">'%x'</span> % id(bar))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call deco</span><br><span class="line">5491ba8</span><br><span class="line">(&lt;cell at 0x0000000004F66F78: function object at 0x0000000005491BA8&gt;, &lt;cell at 0x000000000546EA38: function object at 0x0000000005491C18&gt;)</span><br><span class="line">in deco</span><br><span class="line">5491c18</span><br></pre></td></tr></table></figure><p>可以看出<code>in_deco.__closure__</code>已经将<code>原始bar函数</code>进行了保存。</p><p>这里就有一个问题了？可以看出里面保存着两个变量。(第一个是一个函数对象<code>func</code>，第二个便是我们的<code>原始bar</code>)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;学会装饰器，Python更进阶 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt; 函数作用域到闭包到装饰器讲解，及闭包和装饰器的运用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[√] 慕课网Meshare_huang老师: python进阶&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="python从入门到精通" scheme="http://fanpengtao.tk/categories/python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    
    
      <category term="Python" scheme="http://fanpengtao.tk/tags/Python/"/>
    
      <category term="装饰器" scheme="http://fanpengtao.tk/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="专题笔记" scheme="http://fanpengtao.tk/tags/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python进阶学习笔记</title>
    <link href="http://fanpengtao.tk/post/1d8f9861.html"/>
    <id>http://fanpengtao.tk/post/1d8f9861.html</id>
    <published>2018-01-03T08:24:58.000Z</published>
    <updated>2018-10-21T16:59:32.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>进阶的基础是学会入门</p></blockquote><div class="note "><p> Python零基础入门课程学习完之后。我继续复习进阶知识。课程知识+个人总结以及知识点标注与相关难点探究。</p><ul><li>[√] 慕课网廖雪峰老师的: python进阶</li></ul></div><a id="more"></a><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/fmeLmg3Cfj.png?imageslim" alt="mark"></p><p>课程详细介绍Python强大的函数式编程和面向对象编程，掌握Python高级程序设计的方法。</p><h1 id="打好基础再来进阶"><a href="#打好基础再来进阶" class="headerlink" title="打好基础再来进阶"></a>打好基础再来进阶</h1><p>在<a href="http://blog.mtianyan.cn/2018/01/02/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/#more" target="_blank" rel="noopener">基础入门笔记</a>中我们学到了以下知识:</p><ol><li>安装Python环境</li><li>变量和数据类型：Python内置的基本类型</li><li>List和Tuple：顺序的集合类型</li><li>条件判断和循环：控制程序流程</li><li>Dict和Set：根据key访问的集合类型</li><li>函数：定义和调用函数</li><li>切片：如何对list进行切片</li><li>迭代：如何用for循环迭代集合类型</li><li>列表生成式:如何快速生成列表</li></ol><p>注：我个人对于自认为重要的知识点都进行了<code>知识点</code>关键字标记。如果想复习的小伙伴可以<br><code>ctrl + f</code> 输入关键字 <code>知识点</code> 进行查看。<br>对于重要以及较难的编程题目我进行了关键字 <code>天涯</code>的标记。</p><p>进阶课程中将会学到的知识：</p><ul><li>函数式编程：注意与函数编程区别</li><li>模块：模块的使用</li><li>面向对象：概念，属性，方法，基础，多态。</li><li>定制类：利用Python的特殊方法定制类</li></ul><p>学习目标：<code>掌握函数式编程</code> <code>掌握面向对象编程</code> <code>能够编写模块化的程序</code></p><h1 id="Python函数式编程"><a href="#Python函数式编程" class="headerlink" title="Python函数式编程"></a>Python函数式编程</h1><p>讲解Python函数式编程概念，高阶函数的概念和实际用法，以及装饰器函数的原理和实现方式。</p><h2 id="函数式编程简介"><a href="#函数式编程简介" class="headerlink" title="函数式编程简介"></a>函数式编程简介</h2><p>函数: function,入门课程学习过的<br>函数式：functional, 一种编程范式</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/2D0jkLJF7L.png?imageslim" alt="mark"></p><p><code>函数式编程</code> 是一种抽象的编程模式</p><p>不同语言的抽象层次不同:</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/j5BFgIfGL2.png?imageslim" alt="mark"></p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/kCAJl5AELJ.png?imageslim" alt="mark"></p><p>上图中语言越往上越高级，抽象程度越高。越往上抽象就逐渐向数学接近</p><p>知识点: 函数式编程的特点:</p><ul><li>把计算视为函数而非指令(这样不贴近计算机而是贴进计算)</li><li>纯函数式编程: 不需要变量，没有副作用，测试简单。(函数任意执行多少次结果确定)</li><li>支持高阶函数，代码简洁</li></ul><p>知识点: python支持的函数式编程</p><ul><li>不是纯函数式编程：允许有变量</li><li>支持高阶函数：函数也可以作为变量传入</li><li>支持闭包：有了闭包就能返回函数</li><li>有限度的支持匿名函数。</li></ul><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>高阶函数：</p><ul><li>变量可以指向函数</li></ul><p>demo:</p><p>直接输入<code>abs</code>返回的是一个函数对象。<br>而变量<code>f</code> 通过赋值运算符指向<code>abs函数对象</code><br>然后此时<code>f</code>这个函数名就可以实现调用<code>abs()</code></p><p>知识点: <strong>函数名其实就是指向函数的一个变量(一个很普通的变量)</strong></p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/mI85AiHJ0D.png?imageslim" alt="mark"></p><p><code>abs</code> 就是一个<strong>普通的</strong>变量名。通过赋值运算符指向了python内置的<code>abs函数对象</code>。<br>我们可以把它当做普通变量处理。</p><p>知识点: <strong>高阶函数高在自己能接受函数作为参数</strong></p><p>高阶函数: 能接收函数作为参数的函数。</p><ul><li>变量可以指向函数</li><li>函数的参数可以接受变量 </li></ul><p>所以一个函数可以接收另一个函数作为参数。这时我们把能接收函数做参数的函数成为高阶函数。</p><p>demo: 接受abs函数</p><ul><li>定义一个函数，接收<code>x</code>,<code>y</code>,<code>f</code>三个参数。</li><li>其中<code>x</code>,<code>y</code>是数值，<code>f</code>是函数</li><li><code>def add(x,y,f)</code></li><li><code>return f(x) + f(y)</code></li></ul><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/46d9BIKF7C.png?imageslim" alt="mark"></p><p>只要我们理解: 变量可以指向函数,函数可以作为一个变量传递给另一个函数就可以了。</p><p>待探究:</p><p>如果刚才我们一直没有关闭窗口。也就是我们的<code>abs</code>变量还指向的是<code>len</code>函数对象。</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/L4mgiEdD15.png?imageslim" alt="mark"></p><p>解决方案:</p><blockquote><p>暂无待续</p></blockquote><h2 id="把函数作为参数"><a href="#把函数作为参数" class="headerlink" title="把函数作为参数"></a>把函数作为参数</h2><p>上一节我们讲了高阶函数的概念，并编写了一个简单的高阶函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br></pre></td></tr></table></figure><p>如果传入<code>abs</code>作为参数<code>f</code>的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">-5</span>, <span class="number">9</span>, abs)</span><br></pre></td></tr></table></figure><p>根据函数的定义，函数执行的代码实际上是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="number">-5</span>) + abs(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>由于参数 <code>x</code>, <code>y</code> 和 <code>f</code>都可以任意传入，如果 <code>f</code>传入其他函数，就可以得到不同的返回值。</p><h3 id="编程任务"><a href="#编程任务" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>利用add(x,y,f)函数，计算：</p></blockquote><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/C6Ib1GlF8A.png?imageslim" alt="mark"></p><p>注意: python中的<code>sqrt</code>函数在<code>math</code>包中。需要<code>import</code>进来<br><code>import</code>的相关知识后面会讲的。这里只需要用一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># from math import sqrt</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> add(<span class="number">25</span>, <span class="number">9</span>,  math.sqrt)</span><br><span class="line"><span class="comment"># 如果采用第二行import方法调用时如下</span></span><br><span class="line"><span class="keyword">print</span> add(<span class="number">25</span>, <span class="number">9</span>,  sqrt)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8.0</span><br></pre></td></tr></table></figure><h2 id="map-函数"><a href="#map-函数" class="headerlink" title="map()函数"></a>map()函数</h2><p><code>map()</code>是 Python <strong>内置</strong>的高阶函数，它接收一个函数<code>f</code>和一个 <code>list</code>，并通过把函数<code>f</code><strong>依次作用</strong>在<code>list</code>的每个元素上，得到一个新的<code>list</code>并返回这个<code>list</code>。</p><p>例如，对于<code>list [1, 2, 3, 4, 5, 6, 7, 8, 9]</code></p><p>如果希望把list的每个元素都作平方，就可以用map()函数：</p><p>因此，我们只需要传入函数<code>f(x)=x*x</code>，就可以利用map()函数完成这个计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"><span class="keyword">print</span> map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 9, 10, 25, 36, 49, 64, 81]</span><br></pre></td></tr></table></figure><p>知识点； 注意：map()函数不改变原有的 list，而是<strong>返回一个新的 list</strong>。</p><p>利用<code>map()</code>函数，可以把一个 list 转换为另一个 list，只需要传入转换函数。</p><p>由于list包含的元素可以是<strong>任何类型</strong>，因此，map() 不仅仅可以处理只包含数值的 list，事实上它可以处理包含任意类型的 list，<strong>只要传入的函数f可以处理这种数据类型</strong>。</p><h3 id="编程任务-1"><a href="#编程任务-1" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>假设用户输入的英文名字不规范，没有按照首字母大写，后续字母小写的规则，请利用<code>map()</code>函数.</p></blockquote><p>把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list：</p><p>输入：<code>[&#39;adam&#39;, &#39;LISA&#39;, &#39;barT&#39;]</code><br>输出：<code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code></p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_name</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>].upper() + s[<span class="number">1</span>:].lower()</span><br><span class="line"><span class="keyword">print</span> map(format_name, [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>])</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><h2 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce()函数"></a>reduce()函数</h2><p><code>reduce()</code>函数也是Python<strong>内置的</strong>一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数<code>f</code>，一个<code>list</code>，但<code>知识点</code>：<strong>行为和 <code>map()</code>不同，reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。</strong></p><p>例如，编写一个<code>f</code>函数，接收<code>x</code>和<code>y</code>，返回<code>x和y的和</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def f(x, y):</span><br><span class="line">    return x + y</span><br></pre></td></tr></table></figure><p>调用 reduce(f, [1, 3, 5, 7, 9])时，reduce函数将做如下计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">先计算头两个元素：f(1, 3)，结果为4；</span><br><span class="line">再把结果和第3个元素计算：f(4, 5)，结果为9；</span><br><span class="line">再把结果和第4个元素计算：f(9, 7)，结果为16；</span><br><span class="line">再把结果和第5个元素计算：f(16, 9)，结果为25；</span><br><span class="line">由于没有更多的元素了，计算结束，返回结果25。</span><br></pre></td></tr></table></figure><p>上述计算实际上是对 list 的所有元素求和。虽然Python内置了求和函数<code>sum()</code>，但是，利用reduce()求和也很简单。</p><p><code>知识点</code>：reduce()还可以接收第3个可选参数，作为计算的初始值。如果把初始值设为100，计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(f, [1, 3, 5, 7, 9], 100)</span><br></pre></td></tr></table></figure><p>结果将变为125，因为第一轮计算是：</p><ul><li>计算初始值和第一个元素：f(100, 1)，结果为101。</li></ul><h3 id="编程任务-2"><a href="#编程任务-2" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>Python内置了求和函数sum()，但没有求积的函数，请利用recude()来求积：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[2, 4, 5, 7, 12]</span><br><span class="line">输出：2*4*5*7*12的结果</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prod</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*y</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> reduce(prod, [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">12</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3360</span><br></pre></td></tr></table></figure><h2 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h2><p><code>filter()</code>函数是 Python 内置的另一个有用的高阶函数，<code>filter()</code>函数接收一个函数 <code>f</code> 和一个<code>list</code>，这个函数 <code>f</code> 的作用是对每个元素进行判断，返回 <code>True</code>或 <code>False</code>，<code>filter()</code> 知识点：<strong>根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。</strong></p><p>例如，要从一个<code>list [1, 4, 6, 7, 9, 12, 17]</code><br>中删除偶数，保留奇数，首先，要编写一个判断奇数的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure><p>然后，利用<code>filter()</code>过滤掉偶数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter(is_odd, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">17</span>])</span><br><span class="line">结果：[<span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">17</span>]</span><br></pre></td></tr></table></figure><p>利用<code>filter()</code>，可以完成很多有用的功能，例如，删除 <code>None</code> 或者<code>空字符串</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_not_empty</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> len(s.strip()) &gt; <span class="number">0</span></span><br><span class="line">filter(is_not_empty, [<span class="string">'test'</span>, <span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">'  '</span>, <span class="string">'END'</span>])</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;test&apos;, &apos;str&apos;, &apos;END&apos;]</span><br></pre></td></tr></table></figure><p>知识点: </p><p>注意: <code>s.strip(rm)</code> 删除 <code>s</code> 字符串中<code>开头、结尾处</code>的 <code>rm</code> 序列的字符。</p><p>当<code>rm</code>为空时，默认删除空白符（包括’\n’, ‘\r’, ‘\t’, ‘ ‘)，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;     123&apos;</span><br><span class="line">a.strip()</span><br></pre></td></tr></table></figure><p>结果： ‘123’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=&apos;\t\t123\r\n&apos;</span><br><span class="line">a.strip()</span><br><span class="line">结果：&apos;123&apos;</span><br></pre></td></tr></table></figure><h3 id="编程任务-3"><a href="#编程任务-3" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请利用<code>filter()</code>过滤出1~100中平方根是整数的数，即结果应该是：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_sqr</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x)%<span class="number">1</span>==<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> filter(is_sqr, range(<span class="number">1</span>, <span class="number">101</span>))</span><br></pre></td></tr></table></figure><p>注: <code>sqrt</code>函数是开根号的函数，返回值为<code>浮点数</code>。在<code>math</code>包中。</p><ul><li><code>math.sqrt(4)</code> 结果是 <code>2.0</code></li></ul><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><h2 id="自定义排序函数"><a href="#自定义排序函数" class="headerlink" title="自定义排序函数"></a>自定义排序函数</h2><p>Python内置的 sorted()函数可对list进行排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[5, 9, 12, 21, 36]</span><br></pre></td></tr></table></figure><p><code>知识点</code>: 但 <code>sorted()</code>也是一个高阶函数，它可以<strong>接收一个比较函数</strong>来实现<strong>自定义排序</strong>，比较函数的定义是，传入两个待比较的元素 <code>x</code>, <code>y</code>，如果 <code>x</code>应该排在<code>y</code>的前面，返回<code>-1</code>，如果<code>x</code> 应该排在 <code>y</code> 的后面，返回 <code>1</code>。如果 <code>x</code> 和 <code>y</code> 相等，返回 <code>0</code>。</p><p>因此，如果我们要实现倒序排序，只需要编写一个<code>reversed_cmp</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reversed_cmp</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; y:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>解析上面函数:</p><ul><li>当<code>x&gt;y</code>时，return<code>-1</code>.向<code>sorted</code>表明<code>x</code>应排在<code>y</code>的前面。也就是越大的排越靠前(俗称逆序)</li><li>其他情况同理可得</li></ul><p>这样，调用 <code>sorted()</code> 并传入 <code>reversed_cmp</code>就可以实现倒序排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>], reversed_cmp)</span><br><span class="line">[<span class="number">36</span>, <span class="number">21</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>知识点：sorted()也可以对字符串进行排序，<strong>字符串默认按照ASCII大小来比较：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>])</span><br><span class="line">[<span class="string">'Credit'</span>, <span class="string">'Zoo'</span>, <span class="string">'about'</span>, <span class="string">'bob'</span>]</span><br></pre></td></tr></table></figure><p>‘Zoo’排在’about’之前是因为’Z’的ASCII码比’a’小。</p><h3 id="编程任务-4"><a href="#编程任务-4" class="headerlink" title="编程任务"></a>编程任务</h3><p>对字符串排序时，有时候忽略大小写排序更符合习惯。请利用<code>sorted()</code>高阶函数，实现忽略大小写排序的算法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;]</span><br><span class="line">输出：[&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;]</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmp_ignore_case</span><span class="params">(s1, s2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> cmp(s1.lower(), s2.lower())</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], cmp_ignore_case)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;]</span><br></pre></td></tr></table></figure><h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h2><p>Python的函数不但可以返回<code>int、str、list、dict</code>等数据类型，还可以返回函数！</p><p>解析：因为前面我们讲过Python中的函数为高阶函数。也就是可以把函数作为一个参数使用。既然是一个参数(变量)，那么可以被用来返回也不奇怪了。</p><p>例如，定义一个函数 <code>f()</code>，我们让它返回一个函数 <code>g</code>，可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'call f()...'</span></span><br><span class="line">    <span class="comment"># 定义函数g:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call g()...'</span></span><br><span class="line">    <span class="comment"># 返回函数g:</span></span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>仔细观察上面的函数定义，我们在函数<code>f</code>内部又定义了一个函数 <code>g</code>。由于函数 <code>g</code>也是一个对象，函数名 <code>g</code> 就是一个指向函数 <code>g</code> 的变量，所以，最外层函数 <code>f</code> 可以返回变量 <code>g</code>，也就是函数 <code>g</code> 本身。</p><p>调用函数 f，我们会得到 f 返回的一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = f()   <span class="comment"># 调用f()</span></span><br><span class="line">call f()...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x   <span class="comment"># 变量x是f()返回的函数：</span></span><br><span class="line">&lt;function g at <span class="number">0x1037bf320</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x()   <span class="comment"># x指向函数，因此可以调用</span></span><br><span class="line">call g()...   <span class="comment"># 调用x()就是执行g()函数定义的代码</span></span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/h8Ik6FD4gL.png?imageslim" alt="mark"></p><p>知识点: 图中<code>x = f()</code>对于<code>f()</code>进行调用的同时将返回值存入了<code>x</code>中。<br>因此<code>x</code>存放上了f函数的返回值: <code>g函数</code>。因为<code>x</code>指向一个函数对象。所以我们可以调用该函数对象。</p><p>请注意区分返回函数和返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myabs</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> abs   <span class="comment"># 返回函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myabs2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> abs(x)   <span class="comment"># 返回函数调用的结果，返回值是一个数值</span></span><br></pre></td></tr></table></figure><p>知识点: 返回函数可以把一些<strong>计算延迟执行</strong>。例如，如果定义一个普通的求和函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(lst)</span><br></pre></td></tr></table></figure><p>调用calc_sum()函数时，将立刻计算并得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; calc_sum([1, 2, 3, 4])</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>但是，如果返回一个函数，就可以<code>延迟计算</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> sum(lst)</span><br><span class="line">    <span class="keyword">return</span> lazy_sum</span><br></pre></td></tr></table></figure><p>调用calc_sum()并没有计算出结果，而是返回函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = calc_sum([1, 2, 3, 4])</span><br><span class="line">&gt;&gt;&gt; f</span><br><span class="line">&lt;function lazy_sum at 0x1037bfaa0&gt;</span><br></pre></td></tr></table></figure><p>对返回的函数进行调用时，才计算出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f()</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>由于可以返回函数，我们在后续代码里就可以决定到底要不要调用该函数。</p><h3 id="编程任务-5"><a href="#编程任务-5" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请编写一个函数calc_prod(lst)，它接收一个list，返回一个函数，返回函数可以计算参数的乘积。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_prod</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prod</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> reduce((<span class="keyword">lambda</span> x, y : x * y),lst)</span><br><span class="line">    <span class="keyword">return</span> prod</span><br><span class="line"></span><br><span class="line">f = calc_prod([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> f()</span><br></pre></td></tr></table></figure><p>解析: <code>reduce((lambda x, y : x * y),lst)</code></p><p>reduce为一个高阶函数，传入两个参数。</p><ul><li>参数一为<code>(lambda x, y : x * y)</code>这是一个<code>lambda</code>函数。表示传入参数<code>x</code>,<code>y</code>。然后进行<code>x * y</code>运算。</li><li>参数二: 一个可迭代对象。</li></ul><p>过程:</p><ul><li><code>1 * 2</code>得到结果 <code>2</code></li><li><code>2 * 3</code>得到结果 <code>6</code></li><li><code>6 * 4</code>得到结果 <code>24</code>  </li></ul><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>在函数内部定义的函数和外部定义的函数是一样的，<strong>只是他们无法被外部访问：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'g()...'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'f()...'</span></span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>知识点；将 <code>g</code> 的定义移入函数 <code>f</code> 内部，防止其他代码调用 <code>g</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'f()...'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'g()...'</span></span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>但是，考察上一小节定义的 <code>calc_sum</code> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> sum(lst)</span><br><span class="line">    <span class="keyword">return</span> lazy_sum</span><br></pre></td></tr></table></figure><p><code>知识点</code> 注意: 发现没法把 <code>lazy_sum</code> 移到 <code>calc_sum</code> 的外部，因为它引用了 <code>calc_sum</code> 的参数 <code>lst</code>。也就是在<code>calc_sum</code>函数外部定义的<code>lazy_sum</code>函数，就没办法接收传入<code>calc_sum</code>函数的参数。</p><p><code>知识点:python闭包的定义</code></p><p>像这种内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数本身的情况，称为<strong>闭包（Closure）</strong>。</p><p>闭包的特点是<strong>返回的函数还引用了外层函数的局部变量</strong></p><ul><li>如被返回的<code>lazy_sum</code> 函数还引用了传入<code>calc_sum</code>函数的变量(局部)</li></ul><p>所以，要<code>知识点:</code> 正确使用闭包，就要确保引用的局部变量在函数返回后不能变。举例如下：</p><p>希望一次返回3个函数，分别计算1x1,2x2,3x3:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> f1(), f2(), f3()</span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/jamj54aBiF.png?imageslim" alt="mark"></p><p>你可能认为调用<code>f1()</code>，<code>f2()</code>和<code>f3()</code>结果应该是<code>1，4，9</code>，但实际结果全部都是 <code>9</code>。</p><p><code>知识点:</code> 原因就是当count()函数返回了3个函数时，这3个函数所引用的变量 i 的值已经变成了3。由于f1、f2、f3并没有被调用，所以，此时他们并未计算 <code>i*i</code>，当 <code>f1</code> 被调用时：</p><p><code>个人解析：</code>  <code>f1, f2, f3 = count()</code>调用<code>count()</code>函数, 进入<code>count()</code>函数内部。</p><ul><li><code>fs = []</code>创建一个空的集合</li><li><code>for i in range(1, 4):</code> 循环执行三次代码块</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1, 4):</span><br><span class="line">        def f():</span><br><span class="line">             return i*i</span><br><span class="line">        fs.append(f)</span><br></pre></td></tr></table></figure><ul><li>第一次执行时，定义一个<code>f()</code>函数，该函数此时被直接调用时的返回值为 <code>i*i</code> ;然后将f函数作为一个元素加入空列表<code>fs</code>中。验证代码如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我现在的返回值：%d"</span>,f()</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> f1(), f2(), f3()</span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/FHdEl98B64.png?imageslim" alt="mark"></p><ul><li>然后继续执行。直到把三个函数都当做元素存入<code>fs</code>。至此<code>f1, f2, f3 = count()</code>运行完毕</li><li><code>print f1(), f2(), f3()</code> 调用这三个函数。此时<code>f()</code>被调用。执行<code>i*i</code>,但是现在的<code>i</code> 值为3.所以三个值都为9.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">9</span>     <span class="comment"># 因为f1现在才计算i*i，但现在i的值已经变为3</span></span><br></pre></td></tr></table></figure><p><strong>因此，返回函数不要引用任何循环变量，或者后续会发生变化的变量。</strong></p><h3 id="编程任务-天涯"><a href="#编程任务-天涯" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><blockquote><p>返回闭包不能引用循环变量，请改写count()函数，让它正确返回能计算<code>1x1、2x2、3x3</code>的函数。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(i)</span>:</span></span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">lambda</span> : i*i</span><br><span class="line">        fs.append(f(i))</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"><span class="keyword">print</span> f1(), f2(), f3()</span><br></pre></td></tr></table></figure><p>解析：往<code>fs</code>中添加的元素不在是<code>f函数</code>本身。此时添加的对象是<code>f函数的调用</code>也就是他被调用后的返回值<code>lambda : i*i</code> 一个<code>lambda</code>函数对象。</p><p><code>lambda : i*i</code>时它使用的变量是当次循环传入的i值。而不是循环变量<code>i</code></p><p>解析二：</p><p>考察下面的函数 f:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> j*j</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>它可以正确地返回一个闭包<code>g</code>，<code>g</code>所引用的变量<code>j</code>不是循环变量，因此将正常执行。</p><p>使用下一个函数来将循环变量在单词循环之时持久化。</p><p>参考代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></span><br><span class="line">                <span class="keyword">return</span> j*j</span><br><span class="line">            <span class="keyword">return</span> g</span><br><span class="line">        r = f(i)</span><br><span class="line">        fs.append(r)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"><span class="keyword">print</span> f1(), f2(), f3()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 4 9</span><br></pre></td></tr></table></figure><p>附加解法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"我现在的返回值：%d"</span>,f()</span><br><span class="line">        fs.append(f())</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> f1, f2, f3</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便。</p><p>在Python中，对匿名函数提供了有限支持。还是以<code>map()</code>函数为例，计算 <code>f(x)=x的平方</code> 时，除了定义一个<code>f(x)</code>的函数外，还可以直接传入<code>匿名函数</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><p>通过对比可以看出，匿名函数 <code>lambda x: x * x</code>实际上就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><p>关键字lambda 表示匿名函数，<strong>冒号前面的 x 表示函数参数</strong>。</p><p><code>知识点:</code> 匿名函数有个限制，<strong>就是只能有一个表达式，不写return，返回值就是该表达式的结果。</strong></p><p>使用匿名函数，可以不必定义函数名，直接创建一个函数对象，很多时候可以简化代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>], <span class="keyword">lambda</span> x,y: -cmp(x,y))</span><br><span class="line">[<span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>注：<code>cmp(x,y)</code> 函数用于比较2个对象，如果 <code>x &lt; y</code>返回 <code>-1</code>, 如果 <code>x == y</code> 返回 0, 如果 <code>x &gt; y</code> 返回 1。</p><p>前面我们知道排序函数。是接收到return<code>-1</code>.向<code>sorted</code>表明<code>x</code>应排在<code>y</code>的前面。也就是小的<code>x</code>排前面,那么此时是正序排列。而<code>-cmp(x,y)</code>则是逆序排列。</p><p>返回函数的时候，也可以返回匿名函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myabs = <span class="keyword">lambda</span> x: -x <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> x </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myabs(<span class="number">-1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myabs(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>解析:</p><p>匿名函数本质上就是一个函数，它所抽象出来的东西是一组运算。<br>Python lambda总共以下2种写法，一种是不含<code>if…else…</code>的，一种是包含<code>if…else…</code>的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lambda &lt;args&gt;: &lt;return-expression&gt;</span><br><span class="line">lambda &lt;args&gt;: &lt;return-expression&gt; if &lt;cond-expression&gt; else &lt;return-expression&gt;</span><br></pre></td></tr></table></figure><p>更多学习资源:</p><p><a href="http://locatino.github.io/2015/08/03/playing-python-lambda/" target="_blank" rel="noopener">http://locatino.github.io/2015/08/03/playing-python-lambda/</a></p><p>如果想要在匿名函数中做一些除了return-expression，其他事情（比如说print()）,应该怎么写？<br>确实不太好写，不过我还是想出了一个非常投机取巧的办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: <span class="keyword">True</span> <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> print(x) == <span class="keyword">None</span> <span class="keyword">else</span> x<span class="string">")</span></span><br></pre></td></tr></table></figure><p>上面这个函数不仅返回了x的值，并且还打印了x.<br>这里我把需要执行的语句(print())转换成了逻辑表达式，而且是一个永远为真的表达式，它一定会执行，并且对业务的逻辑判断没有影响。<br>前提是你必须准确的知道需要执行的语句的返回值，才能写出永远为真的表达式。</p><p>and语句的短路：所以一定要保证前面x%2 == 0为真。此时<code>if x % 2 == 0 and print(x)</code><br>返回<code>print(x)</code></p><h3 id="编程任务-6"><a href="#编程任务-6" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>利用匿名函数简化以下代码：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_not_empty</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> len(s.strip()) &gt; <span class="number">0</span></span><br><span class="line">filter(is_not_empty, [<span class="string">'test'</span>, <span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">'  '</span>, <span class="string">'END'</span>])</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> filter(<span class="keyword">lambda</span> s:s <span class="keyword">and</span> len(s.strip()) &gt; <span class="number">0</span>, [<span class="string">'test'</span>, <span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">'  '</span>, <span class="string">'END'</span>])</span><br></pre></td></tr></table></figure><p>既要满足s非空，又要满足s不是结束字符等。</p><p>注意: <code>s.strip(rm)</code> 删除 <code>s</code> 字符串中<code>开头、结尾处</code>的 <code>rm</code> 序列的字符。</p><p>当<code>rm</code>为空时，默认删除空白符（包括’\n’, ‘\r’, ‘\t’, ‘ ‘)</p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;test&apos;, &apos;str&apos;, &apos;END&apos;]</span><br></pre></td></tr></table></figure><h2 id="Python中的装饰器"><a href="#Python中的装饰器" class="headerlink" title="Python中的装饰器"></a>Python中的装饰器</h2><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/1B7l8FLjij.png?imageslim" alt="mark"></p><p>在不改变原函数的情况下，想在运行时动态的增加新功能。可以极大地简化代码，避免每个函数编写重复性代码。</p><p>示例:</p><ul><li>希望对下列函数调用增加log功能，打印出函数调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*x*x</span><br></pre></td></tr></table></figure><p>方法一: 直接修改原函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'call f1()'</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'call f2()'</span></span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'call f3()'</span></span><br><span class="line">    <span class="keyword">return</span> x*x*x</span><br></pre></td></tr></table></figure><p>高阶函数：</p><ul><li>可以接收函数作为参数</li><li>可以返回函数</li><li>是否可以接收一个函数，对其包装，然后返回一个新函数。</li></ul><p>方法二: 通过高阶函数返回新函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_fn</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call'</span> + f.__name__ + <span class="string">'()'</span></span><br><span class="line">        <span class="keyword">return</span> f(x)</span><br><span class="line">    <span class="keyword">return</span> fn</span><br></pre></td></tr></table></figure><p>代码解析：我们可以定义一个<code>new_fn</code>这样一个函数。接收<code>f</code>参数。<br>返回一个<code>fn新函数</code> </p><ul><li>在这个新函数内部首先我们用print语句打印出了一行日志。<br>紧接着我们对原函数进行调用。返回原函数的结果。</li></ul><p>至此我们就得到了一个新的函数。它即包含了原函数的调用（也就是返回原函数调用后的值，又有一行日志来增强原函数的功能。</p><p>这里的<code>new_fn(f)</code>这个高阶函数就是装饰器函数：</p><p>知识点： 调用装饰器函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g1 = new_fn(f1)</span><br><span class="line"><span class="keyword">print</span> g1(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>向<code>new_fn</code>传入<code>f1</code>，然后会</p><ul><li>先定义一个<code>fn(x)</code>函数。</li><li>进入<code>fn(x)</code>函数内部：执行第一行打印log，然后如果有对于<code>fn(x)</code>的调用会返回传入的<code>f</code>函数并为其传入参数<code>x</code>.</li></ul><p>但是很明显：现在只是定义了这个函数<code>fn(x)</code>,并没有进行调用。</p><ul><li>所以此时<code>g1 = new_fn(f1)</code>的执行结果便是<code>new_fn</code>的返回值。返回<code>fn</code><br>对象，并被存入了<code>g1</code>变量中。此时对于<code>g1</code>的调用就是对于<code>fn</code>的调用。</li></ul><p><code>print g1(5)</code>实际就是调用了<code>fn</code>函数。</p><ul><li>即打印了日志</li><li>得到了原函数的返回值<code>return f(x)</code></li></ul><p>方法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1 = new_fn(f1)</span><br><span class="line"><span class="keyword">print</span> f1(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>将<code>f1</code>作为参数传入的<code>new_fn</code>的返回值 <code>fn</code> 保存回<code>f1</code>本身<br>因为函数名本身也是变量。所以我们就用这种方法彻底的隐藏了<code>f1</code><br>的原始定义函数。这时候f1就是装饰以后的函数。</p><p>注： <code>_name_</code> 是函数的一个属性，取到函数名。</p><p>Python内置的<code>@</code>语法就是为了简化装饰器的调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@new_fn</span><br><span class="line">def f1(x):</span><br><span class="line">    return x*2</span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180104/Jkbm893lC7.png?imageslim" alt="mark"></p><p><strong>装饰器的作用</strong></p><p>可以极大地简化代码，避免每个函数编写重复性代码</p><ul><li>打印日志<code>@log</code></li><li>检测性能<code>@performance</code></li><li>数据库事务<code>@transaction</code></li><li>URL路由<code>@post(&#39;/register&#39;)</code></li></ul><p><code>@post(&#39;/register&#39;)</code>让这个函数来处理指定的url。</p><h2 id="编写无参数decorator"><a href="#编写无参数decorator" class="headerlink" title="编写无参数decorator"></a>编写无参数decorator</h2><p>知识点：Python的 <code>decorator</code> 本质上就是一个高阶函数，它<strong>接收一个函数作为参数，然后，返回一个新函数。</strong></p><p>使用 <code>decorator</code> 用Python提供的 <code>@</code> 语法，这样可以避免手动编写 <code>f = decorate(f)</code> 这样的代码。</p><p>考察一个<code>@log</code>的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></span><br><span class="line">        <span class="keyword">return</span> f(x)</span><br><span class="line">    <span class="keyword">return</span> fn</span><br></pre></td></tr></table></figure><p>对于阶乘函数，@log工作得很好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call factorial()...</span><br><span class="line">3628800</span><br></pre></td></tr></table></figure><p>但是，对于参数不是一个的函数，调用将报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="keyword">print</span> add(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test.py&quot;, line 15, in &lt;module&gt;</span><br><span class="line">    print add(1,2)</span><br><span class="line">TypeError: fn() takes exactly 1 argument (2 given)</span><br></pre></td></tr></table></figure><p>因为 <code>add()</code> 函数需要传入两个参数，但是<code>@log</code>写死了只含一个参数的返回函数。</p><p>要让 <code>@log</code> 自适应任何参数定义的函数，可以利用Python的 <code>*args</code> 和 <code>**kw</code>，保证任意个数的参数总是能正常调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> fn</span><br></pre></td></tr></table></figure><p>现在，对于任意函数，<code>@log</code> 都能正常工作。</p><p>注：</p><ul><li><code>*args</code>表示任何多个无名参数，它是一个<code>tuple</code></li><li><code>**kw</code>表示关键字参数，它是一个<code>dict</code>。</li><li>并且同时使用<code>*args和**kwargs</code>时，必须<code>*args</code>参数列要在<code>**kw</code>前</li></ul><p>参考博客：</p><ul><li><a href="http://blog.csdn.net/feisan/article/details/1729905" target="_blank" rel="noopener">http://blog.csdn.net/feisan/article/details/1729905</a></li><li><a href="https://n3xtchen.github.io/n3xtchen/python/2014/08/08/python-args-and-kwargs" target="_blank" rel="noopener">https://n3xtchen.github.io/n3xtchen/python/2014/08/08/python-args-and-kwargs</a></li></ul><p>Python里，<code>带*的参数</code>就是用来接受可变数量参数的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcD</span><span class="params">(a, b, *c)</span>:</span></span><br><span class="line">  <span class="keyword">print</span> a</span><br><span class="line">  <span class="keyword">print</span> b</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"length of c is: %d "</span> % len(c)</span><br><span class="line">  <span class="keyword">print</span> c</span><br></pre></td></tr></table></figure><p>调用<code>funcD(1, 2, 3, 4, 5, 6)</code>结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">length of c is: 4</span><br><span class="line">(3, 4, 5, 6)</span><br></pre></td></tr></table></figure><p>如果一个函数定义中的最后一个形参有 <code>**</code>前缀,所有正常形参之外的其他的<code>关键字参数</code>都将被放置在一个字典中传递给函数，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcF</span><span class="params">(a, **b)</span>:</span></span><br><span class="line">  <span class="keyword">print</span> a</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">print</span> x + <span class="string">": "</span> + str(b[x])</span><br></pre></td></tr></table></figure><p>调用<code>funcF(100, c=&#39;你好&#39;, b=200)</code>，执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">c: 你好</span><br><span class="line">b: 200</span><br></pre></td></tr></table></figure><p>大家可以看到，<code>b</code>是一个<code>dict</code>对象实例，它接受了关键字参数<code>b</code>和<code>c</code>。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>使用 Mysql Python 库时候,经常看到这个样子的代码，db_conf 一般都从配置文件读取，这时优雅的不定字典参数就派上用途了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector  </span><br><span class="line"></span><br><span class="line">db_conf = &#123;</span><br><span class="line">user=<span class="string">'xx'</span>,</span><br><span class="line">password=<span class="string">'yy'</span>, </span><br><span class="line">host=<span class="string">'xxx.xxx.xxx.xxx'</span>,</span><br><span class="line">database=<span class="string">'zz'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(</span><br><span class="line">user=db_conf[<span class="string">'user'</span>],</span><br><span class="line">password=db_conf[<span class="string">'password'</span>], </span><br><span class="line">host=db_conf[<span class="string">'host'</span>],</span><br><span class="line">database=db_conf[<span class="string">'database'</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>修改版：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector  </span><br><span class="line"></span><br><span class="line">db_conf = &#123;</span><br><span class="line">user=<span class="string">'xx'</span>,</span><br><span class="line">password=<span class="string">'yy'</span>, </span><br><span class="line">host=<span class="string">'xxx.xxx.xxx.xxx'</span>,</span><br><span class="line">database=<span class="string">'zz'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cnx = mysql.connector.connect(**db_conf)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="编程任务-天涯-1"><a href="#编程任务-天涯-1" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><blockquote><p>请编写一个<code>@performance</code>，它可以打印出函数调用的时间。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">performance</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_time</span><span class="params">(x)</span>:</span></span><br><span class="line">        t1= time.time()</span><br><span class="line">        res = f(x)</span><br><span class="line">        t2=time.time()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call %s() in %fs'</span> % (f.__name__, (t2 - t1))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> log_time</span><br><span class="line"></span><br><span class="line"><span class="meta">@performance</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>解析：</p><ul><li><code>performance(f)</code>是一个高阶函数，传入一个参数：函数对象,返回包装后的新函数。</li><li><code>log_time(x)</code>是被高阶函数包裹的新函数。它复杂把旧函数的参数作为自己的参数。<br>在自己内部执行想要额外添加的功能。然后调用原函数，将原函数调用后的返回值作为自己的返回值。</li></ul><p><code>time</code>模块(参考time模块内容)</p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call factorial() in 0.004899s</span><br><span class="line">3628800</span><br></pre></td></tr></table></figure><h2 id="编写带参数decorator"><a href="#编写带参数decorator" class="headerlink" title="编写带参数decorator"></a>编写带参数decorator</h2><p>考察上一节的 <code>@log</code> 装饰器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></span><br><span class="line">        <span class="keyword">return</span> f(x)</span><br><span class="line">    <span class="keyword">return</span> fn</span><br></pre></td></tr></table></figure><p>发现对于被装饰的函数，<code>log</code>打印的语句是不能变的（除了函数名）。</p><p>如果有的函数非常重要，希望打印出<code>&#39;[INFO] call xxx()...&#39;</code>，有的函数不太重要，希望打印出<code>&#39;[DEBUG] call xxx()...&#39;</code>，这时，<code>log</code>函数本身就需要传入<code>&#39;INFO&#39;</code>或<code>&#39;DEBUG&#39;</code>这样的参数，类似这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log('DEBUG')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>把上面的定义翻译成高阶函数的调用，就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_func = log(&apos;DEBUG&apos;)(my_func)</span><br></pre></td></tr></table></figure><p>解：<code>log(&#39;DEBUG&#39;)(my_func)</code>装饰器函数<code>log(&#39;DEBUG&#39;)&#39;</code>被调用传入<code>my_func</code>原函数对象</p><p>上面的语句看上去还是比较绕，再展开一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log_decorator = log(&apos;DEBUG&apos;)</span><br><span class="line">my_func = log_decorator(my_func)</span><br></pre></td></tr></table></figure><p>也就是装饰器函数本身是<code>log(&#39;DEBUG&#39;)</code>,然后为该函数调用时传入参数<code>my_func</code></p><p>上面的语句又相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log_decorator = log(&apos;DEBUG&apos;)</span><br><span class="line">@log_decorator</span><br><span class="line">def my_func():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>知识点：所以，带参数的<code>log</code>函数首先返回一个<code>decorator</code>函数，再让这个d<code>ecorator</code>函数接收<code>my_func</code>并返回新函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(prefix)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'[%s] %s()...'</span> % (prefix, f.__name__)</span><br><span class="line">            <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> log_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('DEBUG')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">print</span> test()</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] test()...</span><br><span class="line">None</span><br></pre></td></tr></table></figure><p>与上一节无参数做比较:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call '</span> + f.__name__ + <span class="string">'()...'</span></span><br><span class="line">        <span class="keyword">return</span> f(x)</span><br><span class="line">    <span class="keyword">return</span> fn</span><br></pre></td></tr></table></figure><p>可以看出它在log(f)的上层又多加了一层函数外壳。使得<br>带参数的log函数首先返回一个decorator函数。</p><p>知识点：无参数装饰器为两层结构。有参数装饰器为三层结构</p><p>对于这种<code>3层嵌套</code>的<code>decorator</code>定义，你可以先把它拆开：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准decorator:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[%s] %s()...'</span> % (prefix, f.__name__)</span><br><span class="line">        <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回decorator:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(prefix)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> log_decorator(f)</span><br></pre></td></tr></table></figure><p>拆开以后会发现，调用会失败，因为在3层嵌套的<code>decorator</code>定义中，最内层的<code>wrapper</code>引用了最外层的参数<code>prefix</code>，所以，<strong>把一个闭包拆成普通的函数调用会比较困难。</strong>不支持闭包的编程语言要实现同样的功能就需要更多的代码。</p><p>那么我们如何拆开才能保证正确呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">未完待续</span><br></pre></td></tr></table></figure><h3 id="编程任务-天涯-2"><a href="#编程任务-天涯-2" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><p>上一节的<code>@performance</code>只能打印秒，请给 <code>@performace</code>增加一个参数，允许传入<code>&#39;s&#39;</code>或<code>&#39;ms&#39;</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@performance('ms')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>实现代码(天涯):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">performance</span><span class="params">(unit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perf_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            t1 = time.time()</span><br><span class="line">            r = f(*args, **kw)</span><br><span class="line">            t2 = time.time()</span><br><span class="line">            t = (t2 - t1)*<span class="number">1000</span> <span class="keyword">if</span> unit ==<span class="string">'ms'</span> <span class="keyword">else</span> (t2 - t1)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'call %s() in %f %s'</span>%(f.__name__, t, unit)</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> perf_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@performance('ms')  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>最外层输入：参数<code>unit</code>，返回：接收了参数的装饰器函数对象。</li><li>次外层输入：参数<code>f</code> 函数对象。返回: 被包装过的函数对象<code>wrapper</code></li><li>最内层输入：参数为<code>*args, **kw</code>。进行额外的处理加返回：返回<code>f</code>函数调用的返回值。</li></ul><p>人肉运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">perf_decorator = performance(&apos;ms&apos;)</span><br><span class="line">factorial = perf_decorator(factorial(10))</span><br><span class="line">factorial = wrapper</span><br><span class="line">factorial(10) = wrapper(10)</span><br><span class="line"># 然后执行 print 并返回 f(*args, **kw)的值</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call factorial() in 6.043911 ms</span><br><span class="line">3628800</span><br></pre></td></tr></table></figure><h2 id="完善decorator"><a href="#完善decorator" class="headerlink" title="完善decorator"></a>完善decorator</h2><p><code>@decorator</code>可以动态实现函数功能的增加，但是，经过<code>@decorator</code>“改造”后的函数，和原函数相比，除了功能多一点外，有没有其它不同的地方？</p><p>在没有decorator的情况下，打印函数名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">print</span> f1.__name__</span><br></pre></td></tr></table></figure><p>输出： <code>f1</code></p><p>有decorator的情况下，再打印函数名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">print</span> f2.__name__</span><br></pre></td></tr></table></figure><p>输出： <code>wrapper</code></p><p>可见，由于<code>decorator</code>返回的新函数函数名已经不是<code>&#39;f2&#39;</code>，而是<code>@log</code>内部定义的<code>&#39;wrapper&#39;</code>。这对于那些依赖函数名的代码就会失效。<code>decorator</code>还改变了函数的<code>__doc__</code>等其它属性。<code>知识点:</code> 如果要让调用者看不出一个函数经过了<code>@decorator</code>的“改造”，<strong>就需要把原函数的一些属性复制到新函数中：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">    wrapper.__name__ = f.__name__</span><br><span class="line">    wrapper.__doc__ = f.__doc__</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>这样写<code>decorator</code>很不方便，因为我们也很难把原函数的所有必要属性都一个一个复制到新函数上，所以Python内置的<code>functools</code>可以用来自动化完成这个“复制”的任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>最后需要指出，由于我们把原函数签名改成了<code>(*args, **kw)</code>，因此，<strong>无法获得原函数的原始参数信息。</strong>即便我们采用固定参数来装饰只有一个参数的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></span><br><span class="line">        <span class="keyword">return</span> f(x)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>也可能改变原函数的参数名，因为新函数的参数名始终是 <code>&#39;x&#39;</code>，原函数定义的参数名不一定叫 <code>&#39;x&#39;</code>。</p><h3 id="编程任务-7"><a href="#编程任务-7" class="headerlink" title="编程任务"></a>编程任务</h3><p>请思考带参数的<code>@decorator</code>，<code>@functools.wraps</code>应该放置在哪：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">performance</span><span class="params">(unit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perf_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            ???</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> perf_decorator</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">performance</span><span class="params">(unit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perf_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">        @functools.wraps(f)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kv)</span>:</span></span><br><span class="line">            t0 = time.time()</span><br><span class="line">            r = f(*args,**kv)</span><br><span class="line">            t1 = time.time()</span><br><span class="line">            t = (t1 - t0) <span class="keyword">if</span> unit ==<span class="string">'s'</span> <span class="keyword">else</span> (t1 - t0) * <span class="number">1000</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'call %s() in %s %s'</span> % (f.__name__, t, unit)</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> perf_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@performance('ms')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> factorial.__name__</span><br></pre></td></tr></table></figure><p>tips:</p><ul><li>最外层输入：参数<code>unit</code>，返回：接收了参数的装饰器函数对象。</li><li>次外层输入：参数<code>f</code> 函数对象。返回: 被包装过的函数对象<code>wrapper</code></li><li>最内层输入：参数为<code>*args, **kw</code>。进行额外的处理加返回：返回<code>f</code>函数调用的返回值。</li></ul><p>搞清每一层的输入输出就可以成功写出来</p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">factorial</span><br></pre></td></tr></table></figure><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>当一个函数有很多参数时，调用者就需要提供多个参数。如果减少参数个数，就可以简化调用者的负担。</p><p>比如，<code>int()</code>函数可以把字符串转换为整数，当仅传入字符串时，<code>int()</code>函数默认按<code>十进制</code>转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>但<code>int()</code>函数还提供额外的<code>base</code>参数，默认值为10。如果传入base参数，就可以做<code>N</code>进制的转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>, base=<span class="number">8</span>)</span><br><span class="line"><span class="number">5349</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>, <span class="number">16</span>)</span><br><span class="line"><span class="number">74565</span></span><br></pre></td></tr></table></figure><p><code>知识点</code>：假设要转换大量的二进制字符串，每次都传入<code>int(x, base=2)</code>非常麻烦，于是，我们想到，可以定义一个<code>int2()</code>的函数，默认把<code>base=2</code>传进去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(x, base)</span><br></pre></td></tr></table></figure><p>这样，我们转换二进制就非常方便了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure><p><code>functools.partial</code>就是帮助我们创建一个<strong>偏函数</strong>的，不需要我们自己定义<code>int2()</code>，可以直接使用下面的代码创建一个新的函数<code>int2</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import functools</span><br><span class="line">&gt;&gt;&gt; int2 = functools.partial(int, base=2)</span><br><span class="line">&gt;&gt;&gt; int2(&apos;1000000&apos;)</span><br><span class="line">64</span><br><span class="line">&gt;&gt;&gt; int2(&apos;1010101&apos;)</span><br><span class="line">85</span><br></pre></td></tr></table></figure><p>所以，<code>functools.partial</code>可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定<strong>默认值</strong>，这样，新函数调用的难度就降低了。</p><p><code>知识点</code>：偏函数是为一个多参数函数设定参数的默认值，可以降低函数调用的难度。</p><h3 id="编程任务-8"><a href="#编程任务-8" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>在第7节中，我们在<code>sorted</code>这个高阶函数中传入自定义排序函数就可以实现忽略大小写排序。请用<code>functools.partial</code>把这个复杂调用变成一个简单的函数：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted_ignore_case(iterable)</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">sorted_ignore_case = functools.partial(sorted,key=str.lower)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> sorted_ignore_case([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;]</span><br></pre></td></tr></table></figure><p><code>functools.partial</code> 传入两个参数，一个是原函数。一个是原函数包含的默认参数。</p><p>官方文档对于<code>sorted</code>的说明：</p><p>key specifies a function of one argument that is used to extract a comparison key from each list <code>element:key=str.lower</code>. The default value isNone.</p><p>课外知识：</p><p><code>sort</code> 与 <code>sorted</code> 区别：</p><ul><li><code>sort</code> 是应用在 <code>list</code> 上的方法，<code>sorted</code> 可以对<code>所有可迭代的对象</code>进行排序操作。</li><li><code>list</code> 的 <code>sort</code> 方法返回的是对已经存在的列表进行操作，而内建函数 <code>sorted</code>方法返回的是一个新的 <code>list</code>，而不是在原来的基础上进行的操作。</li></ul><p><code>sorted</code> 语法：</p><p><code>sorted(iterable[, cmp[, key[, reverse]]])</code></p><p>参数说明：</p><ul><li>iterable – 可迭代对象。</li><li>cmp – 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。</li><li>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。</li></ul><h1 id="Python的模块"><a href="#Python的模块" class="headerlink" title="Python的模块"></a>Python的模块</h1><p>如何编写和导入模块，以及如何安装并使用第三方模块</p><h2 id="模块和包。"><a href="#模块和包。" class="headerlink" title="模块和包。"></a>模块和包。</h2><p>概念：模块和包。</p><p>当我们的代码越来越多的时候:</p><ul><li>将所有代码放入一个py文件:难以维护</li></ul><p>我们如果将代码分拆放入多个py文件,好处:</p><pre><code>- 同一个名字变量互不影响</code></pre><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180104/jgfCd55HCf.png?imageslim" alt="mark"></p><p>存在于两个文件中的同名变量，函数互不影响。</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180104/A78d86Bf66.png?imageslim" alt="mark"></p><p>这时我们称文件<code>a</code>为<code>模块a</code>,<code>b</code>为<code>模块b</code>.</p><p>知识点： 模块的名字就是python文件的名字。</p><p>引用其他模块方法：</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180104/EidCflgfg6.png?imageslim" alt="mark"></p><p>当模块变多之后他们很容易重名。</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180104/98jd95BjkJ.png?imageslim" alt="mark"></p><p>路人甲与路人乙都写了<code>util.py</code>,产生了冲突。</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180104/8LDiD7EJHL.png?imageslim" alt="mark"></p><p>同名的模块放入不同的包中。就可以了。<br>此时即使有同名的模块，但是他们的完整名字变成了<code>p1.util</code> 和 <code>p2.util</code><br>，就不冲突了。</p><ul><li>引用完整模块</li></ul><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180104/4dcEACCI50.png?imageslim" alt="mark"></p><p>全部都要写完整名称。<code>p1.util</code> <code>p1.util.f(2,10)</code></p><ul><li>包就是文件夹</li><li>模块就是<code>xxx.py</code>文件</li><li>包可以有多级</li></ul><p>区分包和普通目录</p><p>包下面必须有一个<code>__init__.py</code>这样一个特殊的文件。<br>每一个包的<strong>每一层目录</strong>都要有这个文件。</p><p>即使这个文件是空文件，也必须让这个文件存在。这样Python才能识别这是一个包。</p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>要使用一个模块，我们必须首先导入该模块。Python使用<code>import</code>语句导入一个模块。例如，导入<strong>系统自带</strong>的模块 <code>math</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><p>你可以认为<code>math</code>就是一个指向已导入模块的变量，通过该变量，我们可以访问math模块中所定义的所有公开的函数、变量和类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.pow(<span class="number">2</span>, <span class="number">0.5</span>) <span class="comment"># pow是函数</span></span><br><span class="line"><span class="number">1.4142135623730951</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.pi <span class="comment"># pi是变量</span></span><br><span class="line"><span class="number">3.141592653589793</span></span><br></pre></td></tr></table></figure><p>注意：<code>pow()</code>方法返回 <code>x的y次方</code> 的值。</p><p>内置的 <code>pow()</code> 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow(x, y[, z])</span><br></pre></td></tr></table></figure><p>函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于<code>pow(x,y) %z</code><br>但是会更有效率一点。</p><p>如果我们只希望导入用到的<code>math</code>模块的某几个函数，而不是所有函数，可以用下面的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from math import pow, sin, log</span><br></pre></td></tr></table></figure><p>这样，可以直接引用 <code>pow</code>, <code>sin</code>, <code>log</code> 这3个函数，但<code>math</code>的其他函数没有导入进来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pow(2, 10)</span><br><span class="line">1024.0</span><br><span class="line">&gt;&gt;&gt; sin(3.14)</span><br><span class="line">0.0015926529164868282</span><br></pre></td></tr></table></figure><p>如果遇到名字冲突怎么办？比如<code>math</code>模块有一个<code>log</code>函数，<code>logging</code>模块也有一个<code>log</code>函数，如果同时使用，如何解决名字冲突？</p><p>如果使用<code>import</code>导入模块名，由于<strong>必须通过模块名引用函数名，因此不存在冲突：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import math, logging</span><br><span class="line">print math.log(10)   # 调用的是math的log函数</span><br><span class="line">logging.log(10, &apos;something&apos;)   # 调用的是logging的log函数</span><br></pre></td></tr></table></figure><p>如果使用 <code>from...import</code> 导入 <code>log</code> 函数，势必引起冲突。这时，可以给函数起个<strong>“别名”</strong>来避免冲突：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> log <span class="keyword">as</span> logger   <span class="comment"># logging的log现在变成了logger</span></span><br><span class="line"><span class="keyword">print</span> log(<span class="number">10</span>)   <span class="comment"># 调用的是math的log</span></span><br><span class="line">logger(<span class="number">10</span>, <span class="string">'import from logging'</span>)   <span class="comment"># 调用的是logging的log</span></span><br></pre></td></tr></table></figure><h3 id="编程任务-9"><a href="#编程任务-9" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>Python的<code>os.path</code>模块提供了 <code>isdir()</code> 和 <code>isfile()</code>函数，请导入该模块，并调用函数判断指定的目录和文件是否存在。</p></blockquote><p>注意: 可以在本机上测试是否存在相应的文件夹和文件。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">print</span> os.path.isdir(<span class="string">r'C:\Windows'</span>)</span><br><span class="line"><span class="keyword">print</span> os.path.isfile(<span class="string">r'C:\Windows\notepad.exe'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="动态导入模块"><a href="#动态导入模块" class="headerlink" title="动态导入模块"></a>动态导入模块</h2><p>如果导入的模块不存在，Python解释器会报 <code>ImportError</code> 错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> something</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: No module named something</span><br></pre></td></tr></table></figure><p>有的时候，两个不同的模块提供了相同的功能，比如 <code>StringIO</code> 和 <code>cStringIO</code> 都提供了<code>StringIO</code>这个功能。</p><p>这是因为Python是动态语言，解释执行，因此Python代码运行速度慢。</p><p>如果要提高Python代码的运行速度，最简单的方法是把某些关键函数用 C 语言重写，这样就能大大提高执行速度。</p><p>同样的功能，<code>StringIO</code> 是纯Python代码编写的，而 <code>cStringIO</code> <strong>部分</strong>函数是 C 写的，因此 <code>cStringIO</code>运行速度更快。</p><p>利用<code>ImportError</code>错误，我们经常在Python中<strong>动态</strong>导入模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> cStringIO <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> StringIO <span class="keyword">import</span> StringIO</span><br></pre></td></tr></table></figure><p>上述代码先尝试从cStringIO导入，如果失败了（比如cStringIO没有被安装），再尝试从StringIO导入。这样，如果cStringIO模块存在，则我们将获得更快的运行速度，如果cStringIO不存在，则顶多代码运行速度会变慢，但不会影响代码的正常执行。</p><p><code>try</code> 的作用是捕获错误，并在捕获到指定错误时执行 <code>except</code> 语句。</p><p>这里先用一下，更多内容在Python错误与异常处理中讲。</p><h3 id="编程任务-10"><a href="#编程任务-10" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>利用<code>import ... as ...，</code>还可以动态导入不同名称的模块。<br>Python 2.6/2.7提供了<code>json</code> 模块，但Python 2.5以及更早版本没有json模块，不过可以安装一个<code>simplejson</code>模块，这两个模块提供的函数签名和功能都一模一样。</p></blockquote><p>试写出导入json 模块的代码，能在Python 2.5/2.6/2.7都正常运行。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> simplejson</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> json.dumps(&#123;<span class="string">'python'</span>:<span class="number">2.7</span>&#125;)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：Python的<code>Json</code>模块<code>序列化</code>与<code>反序列化</code>的过程分别是 <code>encoding</code>和 <code>decoding</code></p><ul><li>encoding(编码)：把一个<code>Python对象编码</code>转换成<code>Json</code>字符串</li><li>decoding(解码)：把<code>Json</code>格式字符串解码转换成<code>Python对象</code></li></ul><p>对于简单数据类型<code>string、unicode、int、float、list、tuple、dict</code>，可以直接处理。</p><p><code>json.dumps</code>方法对简单数据类型<code>encoding</code></p><p><code>知识点</code>联系对比：</p><p>在Python入门中接触的<code>Unicode</code>编码中。</p><ul><li><code>decode</code>的作用是将其他编码的字符串转换成<code>unicode</code>编码，如<code>str1.decode(&#39;gb2312&#39;)</code>，表示将<code>gb2312</code>编码的字符串<code>str1</code>转换成<code>unicode</code>编码。</li><li><code>encode</code>的作用是将<code>unicode</code>编码转换成其他编码的字符串，如<code>str2.encode(‘gb2312’)</code>，表示将<code>unicode</code>编码的字符串<code>str2</code>转换成<code>gb2312</code>编码</li></ul><h2 id="使用future"><a href="#使用future" class="headerlink" title="使用future"></a>使用<strong>future</strong></h2><p>Python的新版本会引入新的功能，但是，实际上这些功能在上一个老版本中就已经存在了。要“试用”某一新的特性，就可以通过导入<code>__future__</code>模块的某些功能来实现。</p><p>例如，Python 2.7的整数除法运算结果仍是整数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 10 / 3</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>python2.7下：</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180104/j3CefF1Lji.png?imageslim" alt="mark"></p><p>但是，Python 3.x已经改进了整数的除法运算，<code>/</code>除将得到浮点数，<code>//</code>除才仍是整数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> // <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>要在Python 2.7中引入3.x的除法规则，导入<code>__future__</code>的<code>division</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="number">10</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br></pre></td></tr></table></figure><p>当新版本的一个特性与旧版本不兼容时，该特性将会在旧版本中添加到<code>__future__</code>中，以便旧的代码能在旧版本中测试新特性。</p><h3 id="编程任务-11"><a href="#编程任务-11" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>在Python 3.x中，字符串统一为<code>unicode</code>，不需要加前缀 <code>u</code>，而以字节存储的<code>str</code>则必须加前缀 <code>b</code>。请利用<code>__future__</code>的<code>unicode_literals</code>在Python 2.7中编写<code>unicode</code>字符串。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line">s = <span class="string">'am I an unicode?'</span></span><br><span class="line"><span class="keyword">print</span> isinstance(s, unicode)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h2><p>虽然内置了许多模块，但是很多有用的第三方包需要我们自己下载。</p><p>两种方法安装第三方模块</p><ul><li>easy_install</li><li>pip install(推荐，因为pip内置)</li></ul><p>我推荐安装的<strong>Anaconda</strong>也已经内置了<code>pip</code></p><p>安装体验。</p><p><code>pip install web.py</code></p><p>cmd下进入python命令行就可以导入web.py了</p><p>查找第三方模块名字：</p><p><a href="https://pypi.python.org/pypi" target="_blank" rel="noopener">https://pypi.python.org/pypi</a></p><p>在这里可以搜索。</p><h1 id="Python面向对象编程"><a href="#Python面向对象编程" class="headerlink" title="Python面向对象编程"></a>Python面向对象编程</h1><p>如何创建类和实例，如何定义类的属性和方法。</p><h2 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h2><p>面向对象编程是一种程序设计范式: 把程序看做不同对象的相互调用。</p><p>是对于<strong>现实世界</strong>建立的对象模型。</p><p>面向对象编程的基本思想(类和实例):</p><ul><li><code>类</code>：用于定于抽象类型（比如人、汽车、花等抽象的一类事物）</li><li><code>实例</code>：根据类的定义被创建出来的</li></ul><p>类的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>通过类创建具体的实例，通过类名与一个类似于函数调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = Person()</span><br><span class="line">xiaojun = Person()</span><br><span class="line">xiaohong = Person()</span><br></pre></td></tr></table></figure><p>比如人的实例有小明、小胡等具体的人，他们有年龄、性别和爱好等不同的属性和方法</p><p><strong>面向对象最重要的思想就是：数据封装</strong></p><p>在类中把数据封装起来。不同的实例它具有相同的数据类型，但是他拥有不同的属性。</p><h2 id="定义类并创建实例"><a href="#定义类并创建实例" class="headerlink" title="定义类并创建实例"></a>定义类并创建实例</h2><p>在Python中，类通过 <code>class</code> 关键字定义。以 <code>Person</code> 为例，定义一个<code>Person</code>类如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>按照 Python 的编程习惯，<strong>类名以大写字母开头，紧接着是(object)</strong>，表示该类是从哪个类<code>继承</code>下来的。类的继承将在后面的章节讲解，现在我们只需要简单地从object类继承。</p><p>有了<code>Person</code>类的定义，就可以创建出具体的<code>xiaoming、xiaohong</code>等实例。创建实例使用 <code>类名+()</code>，类似函数调用的形式创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = Person()</span><br><span class="line">xiaohong = Person()</span><br></pre></td></tr></table></figure><h3 id="编程任务-12"><a href="#编程任务-12" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请练习定义Person类，并创建出两个实例，打印实例，再比较两个实例是否相等。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">xiaoming = Person()</span><br><span class="line">xiaohong = Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> xiaoming</span><br><span class="line"><span class="keyword">print</span> xiaohong</span><br><span class="line"><span class="keyword">print</span> xiaoming==xiaohong</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Person instance at 0x7f434c37d050&gt;</span><br><span class="line">&lt;__main__.Person instance at 0x7f434c3813f8&gt;</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h2 id="创建实例属性"><a href="#创建实例属性" class="headerlink" title="创建实例属性"></a>创建实例属性</h2><p>虽然可以通过<code>Person</code>类创建出<code>xiaoming、xiaohong</code>等实例，但是这些实例看上除了地址不同外，没有什么其他不同。在现实世界中，区分<code>xiaoming、xiaohong</code>要依靠他们各自的<code>名字</code>、<code>性别</code>、<code>生日</code>等属性。</p><p>如何让每个实例拥有各自不同的属性？由于Python是动态语言，对每一个实例，都可以直接给他们的属性赋值.</p><p>例如，给xiaoming这个实例加上<code>name、gender和birth</code>属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = Person()</span><br><span class="line">xiaoming.name = <span class="string">'Xiao Ming'</span></span><br><span class="line">xiaoming.gender = <span class="string">'Male'</span></span><br><span class="line">xiaoming.birth = <span class="string">'1990-1-1'</span></span><br></pre></td></tr></table></figure><p>给xiaohong加上的属性不一定要和xiaoming相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xiaohong = Person()</span><br><span class="line">xiaohong.name = <span class="string">'Xiao Hong'</span></span><br><span class="line">xiaohong.school = <span class="string">'No. 1 High School'</span></span><br><span class="line">xiaohong.grade = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>实例的属性可以像普通变量一样进行操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xiaohong.grade = xiaohong.grade + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="编程任务-13"><a href="#编程任务-13" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请创建包含两个 Person 类的实例的 list，并给两个实例的 name 赋值，然后按照 name 进行排序。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">p1.name = <span class="string">'Bart'</span></span><br><span class="line"></span><br><span class="line">p2 = Person()</span><br><span class="line">p2.name = <span class="string">'Adam'</span></span><br><span class="line"></span><br><span class="line">p3 = Person()</span><br><span class="line">p3.name = <span class="string">'Lisa'</span></span><br><span class="line"></span><br><span class="line">L1 = [p1, p2, p3]</span><br><span class="line">L2 = sorted(L1,key=<span class="keyword">lambda</span> x:x.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> L2[<span class="number">0</span>].name</span><br><span class="line"><span class="keyword">print</span> L2[<span class="number">1</span>].name</span><br><span class="line"><span class="keyword">print</span> L2[<span class="number">2</span>].name</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Adam</span><br><span class="line">Bart</span><br><span class="line">Lisa</span><br></pre></td></tr></table></figure><p>python3下该代码只需要<code>print</code>加上括号。也可以正常运行。</p><h2 id="初始化实例属性"><a href="#初始化实例属性" class="headerlink" title="初始化实例属性"></a>初始化实例属性</h2><p>虽然我们可以自由地给一个实例绑定各种属性，但是，现实世界中，一种类型的实例应该拥有相同名字的属性。例如，<strong>Person</strong>类应该在创建的时候就拥有<code>name</code>、<code>gender</code> 和 <code>birth</code> 属性，怎么办？</p><p>在定义 <code>Person</code> 类时，可以为Person类添加一个特殊的<code>__init__()</code>方法被自动调用，我们就能在此为每个实例都统一加上以下属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, birth)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.birth = birth</span><br></pre></td></tr></table></figure><p><code>__init__()</code> 方法的第一个参数必须是 <code>self</code>（<strong>也可以用别的名字，但建议使用习惯用法</strong>），后续参数则可以自由指定，和定义函数没有任何区别。</p><p>相应地，创建实例时，就<strong>必须要提供除 self 以外的参数</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = Person(<span class="string">'Xiao Ming'</span>, <span class="string">'Male'</span>, <span class="string">'1991-1-1'</span>)</span><br><span class="line">xiaohong = Person(<span class="string">'Xiao Hong'</span>, <span class="string">'Female'</span>, <span class="string">'1992-2-2'</span>)</span><br></pre></td></tr></table></figure><p>有了<code>__init__()</code>方法，每个<code>Person</code>实例在创建时，都会有 <code>name</code>、<code>gender</code> 和<code>birth</code> 这3个属性，并且，被赋予不同的属性值，访问属性使用.操作符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> xiaoming.name</span><br><span class="line"><span class="comment"># 输出 'Xiao Ming'</span></span><br><span class="line"><span class="keyword">print</span> xiaohong.birth</span><br><span class="line"><span class="comment"># 输出 '1992-2-2'</span></span><br></pre></td></tr></table></figure><p>知识点：要特别注意的是，初学者定义<code>__init__()</code>方法常常忘记了 <code>self</code> 参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(name, gender, birth)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xiaoming = Person(<span class="string">'Xiao Ming'</span>, <span class="string">'Male'</span>, <span class="string">'1990-1-1'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: __init__() takes exactly <span class="number">3</span> arguments (<span class="number">4</span> given)</span><br></pre></td></tr></table></figure><p>这会导致创建失败或运行不正常，因为第一个参数name被Python解释器传入了实例的引用，从而导致整个方法的调用参数位置全部没有对上。</p><h3 id="编程任务-14"><a href="#编程任务-14" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请定义Person类的<code>__init__</code>方法，除了接受 <code>name、gender 和 birth</code> 外，还可接受任意关键字参数，并把他们都作为属性赋值给实例。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, birth,**kw)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.birth = birth</span><br><span class="line">        self.__dict__.update(kw)</span><br><span class="line">        <span class="comment"># setattr(self, k, v)也可以 </span></span><br><span class="line"></span><br><span class="line">xiaoming = Person(<span class="string">'Xiao Ming'</span>, <span class="string">'Male'</span>, <span class="string">'1990-1-1'</span>, job=<span class="string">'Student'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> xiaoming.name</span><br><span class="line"><span class="keyword">print</span> xiaoming.job</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Xiao Ming</span><br><span class="line">Student</span><br></pre></td></tr></table></figure><p><code>**kw</code>是一个可变的存入<code>dict</code>的变量。</p><p>知识点:</p><ul><li><code>self.__dict__.update(kw)</code></li></ul><p>解释器内部会将<code>**kw</code>拆分成对应的dict.</p><p><code>setattr()</code>方法接受3个参数：<code>setattr(对象，属性，属性的值)</code></p><p><code>setattr(self,k,v)</code>相当于<code>self.k = v</code></p><p><code>kw.iteritems()</code>历遍字典kw的所有<code>key</code>和<code>value</code>，分别匹配k，v</p><p>我们在运行期定义的属性和类定义时定义的属性都被放在了<code>__dict__</code>里。</p><p>推荐文章：<a href="http://hbprotoss.github.io/posts/python-descriptor.html" target="_blank" rel="noopener">http://hbprotoss.github.io/posts/python-descriptor.html</a></p><h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><p>我们可以给一个实例绑定很多属性，如果有些属性不希望被外部访问到怎么办？</p><p>Python对属性权限的控制是通过<strong>属性名</strong>来实现的，如果一个属性由<code>双下划线</code>开头<code>(__)</code>，该属性就无法被外部访问。看例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self._title = <span class="string">'Mr'</span></span><br><span class="line">        self.__job = <span class="string">'Student'</span></span><br><span class="line">p = Person(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="keyword">print</span> p.name</span><br><span class="line"><span class="comment"># =&gt; Bob</span></span><br><span class="line"><span class="keyword">print</span> p._title</span><br><span class="line"><span class="comment"># =&gt; Mr</span></span><br><span class="line"><span class="keyword">print</span> p.__job</span><br><span class="line"><span class="comment"># =&gt; Error</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Person'</span> object has no attribute <span class="string">'__job'</span></span><br></pre></td></tr></table></figure><p>可见，只有以双下划线开头的<code>__job</code>不能直接被外部访问。</p><p>知识点： 但是，如果一个属性以<code>__xxx__</code>的形式定义，那它又可以被外部访问了，以”<strong>xxx</strong>“定义的属性在Python的类中被称为<strong>特殊属性</strong>，有很多<code>知识点:</code><strong>预定义</strong>的特殊属性可以使用，通常我们不要把普通属性用<code>__xxx__</code>定义。</p><p>以单下划线开头的属性<code>_xxx</code>虽然也可以被外部访问，但是，按照习惯，他们<strong>不应该被外部访问</strong>。</p><h3 id="编程任务-15"><a href="#编程任务-15" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请给Person类的<code>__init__</code>方法中添加<code>name</code>和<code>score</code>参数，并把<code>score</code>绑定到<code>__score</code>属性上，看看外部是否能访问到。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">'Bob'</span>, <span class="number">59</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p.name</span><br><span class="line"><span class="keyword">try</span> :</span><br><span class="line">    <span class="keyword">print</span> p.__score</span><br><span class="line"><span class="keyword">except</span> AttributeError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'attributeerror'</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bob</span><br><span class="line">attributeerror</span><br></pre></td></tr></table></figure><h2 id="创建类属性"><a href="#创建类属性" class="headerlink" title="创建类属性"></a>创建类属性</h2><p>类是<code>模板</code>，而实例则是根据类创建的对象。</p><p><code>知识点:</code> 绑定在一个实例上的属性不会影响其他实例，但是，类本身也是一个对象，如果在类上绑定一个属性，则所有实例都可以访问类的属性，并且，所有实例访问的类属性都是同一个！也就是说，实例属性每个实例各自拥有，互相独立，<strong>而类属性有且只有一份。</strong></p><p>定义类属性可以直接在 <code>class</code> 中定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    address = <span class="string">'Earth'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br></pre></td></tr></table></figure><p>因为类属性是直接绑定在类上的，所以，<code>知识点：</code> 访问<code>类属性</code>不需要<code>创建实例</code>，就可以<strong>直接访问</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> Person.address</span><br><span class="line"><span class="comment"># =&gt; Earth</span></span><br></pre></td></tr></table></figure><p>对一个实例调用类的属性也是可以访问的，所有实例都可以访问到它所属的类的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>)</span><br><span class="line"><span class="keyword">print</span> p1.address</span><br><span class="line"><span class="comment"># =&gt; Earth</span></span><br><span class="line"><span class="keyword">print</span> p2.address</span><br><span class="line"><span class="comment"># =&gt; Earth</span></span><br></pre></td></tr></table></figure><p>由于Python是动态语言，<strong>类属性也是可以动态添加和修改的：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person.address = &apos;China&apos;</span><br><span class="line">print p1.address</span><br><span class="line"># =&gt; &apos;China&apos;</span><br><span class="line">print p2.address</span><br><span class="line"># =&gt; &apos;China&apos;</span><br></pre></td></tr></table></figure><p>因为<strong>类属性只有一份，所以，当Person类的address改变时，所有实例访问到的类属性都改变了</strong>。</p><h3 id="编程任务-16"><a href="#编程任务-16" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请给 <code>Person</code> 类添加一个类属性 <code>count</code>，每创建一个实例，<code>count</code> 属性就加 1，这样就可以统计出一共创建了多少个 Person 的实例。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        Person.count=Person.count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="keyword">print</span> Person.count</span><br><span class="line"></span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>)</span><br><span class="line"><span class="keyword">print</span> Person.count</span><br><span class="line"></span><br><span class="line">p3 = Person(<span class="string">'Tim'</span>)</span><br><span class="line"><span class="keyword">print</span> Person.count</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="类属性和实例属性名字冲突怎么办"><a href="#类属性和实例属性名字冲突怎么办" class="headerlink" title="类属性和实例属性名字冲突怎么办"></a>类属性和实例属性名字冲突怎么办</h2><p>修改类属性会导致所有实例访问到的类属性全部都受影响，但是，如果在实例变量上修改类属性会发生什么问题呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    address = <span class="string">'Earth'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Person.address = '</span> + Person.address</span><br><span class="line"></span><br><span class="line">p1.address = <span class="string">'China'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'p1.address = '</span> + p1.address</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Person.address = '</span> + Person.address</span><br><span class="line"><span class="keyword">print</span> <span class="string">'p2.address = '</span> + p2.address</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person.address = Earth</span><br><span class="line">p1.address = China</span><br><span class="line">Person.address = Earth</span><br><span class="line">p2.address = Earth</span><br></pre></td></tr></table></figure><p>我们发现，在设置了 <code>p1.address = &#39;China&#39;</code> 后，<code>p1</code>访问 <code>address</code> 确实变成了 <code>China</code>，但是，<code>Person.address</code>和<code>p2.address</code>仍然是<code>Earth</code>，怎么回事？</p><p>知识点: 原因是 <code>p1.address = &#39;China&#39;</code>并没有改变 <code>Person</code> 的 <code>address</code>，而是给<code>p1</code>这个实例绑定了<code>实例属性address</code> ，对p1来说，它有一个<strong>实例属性address（值是’China’）</strong>，而它所属的类Person也有一个类属性address，所以:</p><ul><li>访问 p1.address 时，优先查找实例属性，返回’China’。</li><li>访问 p2.address 时，p2没有实例属性address，但是有类属性address，因此返回’Earth’。</li></ul><p>知识点：当实例属性和类属性重名时，<strong>实例属性优先级高，它将屏蔽掉对类属性的访问。</strong></p><p>当我们把 <code>p1</code> 的 <code>address</code> 实例属性删除后，访问 <code>p1.address</code> 就又返回类属性的值 <code>&#39;Earth&#39;</code>了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">del p1.address</span><br><span class="line">print p1.address</span><br><span class="line"># =&gt; Earth</span><br></pre></td></tr></table></figure><p>可见，<strong>千万不要在实例上修改类属性</strong>，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。</p><h3 id="编程任务-17"><a href="#编程任务-17" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请把上节的 <code>Person</code> 类属性 <code>count</code> 改为 <code>__count</code>，再试试能否从实例和类访问该属性。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    __count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        Person.__count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> Person.__count</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> Person.__count</span><br><span class="line"><span class="keyword">except</span> AttributeError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'attributeerror'</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">attributeerror</span><br></pre></td></tr></table></figure><h2 id="定义实例方法"><a href="#定义实例方法" class="headerlink" title="定义实例方法"></a>定义实例方法</h2><p>一个实例的<code>私有属性</code>就是以<code>__</code>开头的属性，无法被外部访问，那这些属性定义有什么用？</p><p>虽然私有属性无法从外部访问，但是，从类的内部是可以访问的。除了可以定义实例的属性外，还可以定义<strong>实例的方法</strong>。</p><p>实例的方法就是在类中定义的函数，<strong>它的第一个参数永远是 self，指向调用该方法的实例本身，</strong>其他参数和一个普通函数是完全一样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name\</span><br></pre></td></tr></table></figure><p><code>get_name(self)</code> 就是一个实例方法，它的第一个参数是<code>self</code>。<code>__init__(self, name)</code>其实也可看做是一个特殊的实例方法。</p><p>调用实例方法必须在实例上调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="keyword">print</span> p1.get_name()  <span class="comment"># self不需要显式传入</span></span><br><span class="line"><span class="comment"># =&gt; Bob</span></span><br></pre></td></tr></table></figure><p>在实例方法内部，可以访问所有实例属性，这样，<strong>如果外部需要访问私有属性</strong>，可以通过方法调用获得，这种数据封装的形式除了<strong>能保护内部数据一致性外</strong>，还可以简化外部调用的难度。</p><h3 id="编程任务-18"><a href="#编程任务-18" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请给 Person 类增加一个私有属性 <code>__score</code>，表示分数，再增加一个实例方法 <code>get_grade()</code>，能根据 <code>__score</code> 的值分别返回 <code>A-优秀, B-及格, C-不及格</code>三档。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">        score = self.__score</span><br><span class="line">        <span class="keyword">if</span> score &gt;<span class="number">85</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">elif</span> score &gt;<span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">        <span class="keyword">elif</span> score &lt;<span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'C'</span></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>, <span class="number">65</span>)</span><br><span class="line">p3 = Person(<span class="string">'Tim'</span>, <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p1.get_grade()</span><br><span class="line"><span class="keyword">print</span> p2.get_grade()</span><br><span class="line"><span class="keyword">print</span> p3.get_grade()</span><br></pre></td></tr></table></figure><p>注：可以在访问数据时顺便通过<code>get_grade</code>做一些其他操作。</p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br></pre></td></tr></table></figure><h2 id="方法也是属性"><a href="#方法也是属性" class="headerlink" title="方法也是属性"></a>方法也是属性</h2><p>我们在 <code>class</code>中定义的<code>实例方法</code>其实也是<code>属性</code>，它实际上是一个<code>函数对象</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'A'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</span><br><span class="line"><span class="keyword">print</span> p1.get_grade</span><br><span class="line"><span class="comment"># =&gt; &lt;bound method Person.get_grade of &lt;__main__.Person object at 0x109e58510&gt;&gt;</span></span><br><span class="line"><span class="keyword">print</span> p1.get_grade()</span><br><span class="line"><span class="comment"># =&gt; A</span></span><br></pre></td></tr></table></figure><p><code>知识点:</code> 也就是说，<code>p1.get_grade</code> 返回的是一个函数对象，但这个函数是一个绑定到实例的函数，<code>p1.get_grade()</code> 才是方法调用。</p><p>知识点；因为方法也是一个属性，所以，它也可以动态地添加到实例上，只是需要用 <code>types.MethodType()</code> 把一个函数变为一个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn_get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.score &gt;= <span class="number">80</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">if</span> self.score &gt;= <span class="number">60</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'C'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</span><br><span class="line">p1.get_grade = types.MethodType(fn_get_grade, p1, Person)</span><br><span class="line"><span class="keyword">print</span> p1.get_grade()</span><br><span class="line"><span class="comment"># =&gt; A</span></span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>, <span class="number">65</span>)</span><br><span class="line"><span class="keyword">print</span> p2.get_grade()</span><br><span class="line"><span class="comment"># ERROR: AttributeError: 'Person' object has no attribute 'get_grade'</span></span><br><span class="line"><span class="comment"># 因为p2实例并没有绑定get_grade</span></span><br></pre></td></tr></table></figure><p>知识点: <code>types.MethodType</code>传入三个参数，(方法，对象，类)实现将函数变为对象的一个方法。</p><p>给一个实例动态添加方法并不常见，直接在<code>class</code>中定义要更直观。</p><h3 id="编程任务-19"><a href="#编程任务-19" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>由于属性可以是普通的值对象，如 <code>str，int</code>等，也可以是方法，还可以是函数，大家看看下面代码的运行结果，请想一想 <code>p1.get_grade</code> 为什么是函数而不是方法：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">        self.get_grade = <span class="keyword">lambda</span>: <span class="string">'A'</span></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</span><br><span class="line"><span class="keyword">print</span> p1.get_grade</span><br><span class="line"><span class="keyword">print</span> p1.get_grade()</span><br></pre></td></tr></table></figure><p>注：</p><ul><li><code>p1.get_grade</code>是属性，只不过这里的属性是一个函数对象，即<code>f</code></li><li><code>p1.get_grade()</code>是方法，前面的p1就是调用这个方法的对象</li></ul><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">        self.get_grade = <span class="keyword">lambda</span>: <span class="string">'A'</span></span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>, <span class="number">90</span>)</span><br><span class="line"><span class="keyword">print</span> p1.get_grade</span><br><span class="line"><span class="keyword">print</span> p1.get_grade()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> at 0x7fa7202fb5f0&gt;</span><br><span class="line">A</span><br></pre></td></tr></table></figure><h2 id="定义类方法"><a href="#定义类方法" class="headerlink" title="定义类方法"></a>定义类方法</h2><p>和属性类似，方法也分<code>实例方法</code>和<code>类方法</code>。</p><p>在class中定义的全部是<code>实例方法</code>，实例方法第一个参数 <code>self</code> 是实例本身。</p><p>要在class中定义类方法，需要这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">how_many</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.count</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        Person.count = Person.count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> Person.how_many()</span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="keyword">print</span> Person.how_many()</span><br></pre></td></tr></table></figure><p><code>知识点:</code> 通过标记一个 <code>@classmethod</code>，该方法将绑定到 Person 类上，而非类的实例。<strong>类方法的第一个参数将传入类本身，通常将参数名命名为 cls</strong>，上面的 <code>cls.count</code>实际上相当于 <code>Person.count</code>。</p><p><code>知识点:</code> 因为是在类上调用，而非实例上调用，因此类方法无法获得任何实例变量，只能获得类的引用。</p><h3 id="编程任务-20"><a href="#编程任务-20" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>如果将类属性 <code>count</code> 改为私有属性<code>__count</code>，则外部无法读取<code>__score</code>，但可以通过一个类方法获取，请编写类方法获得<code>__count</code>值。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    __count = <span class="number">0</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">how_many</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.__count</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        Person.__count = Person.__count + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> Person.how_many()</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> Person.how_many()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h1 id="Python类的继承"><a href="#Python类的继承" class="headerlink" title="Python类的继承"></a>Python类的继承</h1><p>如何判断实例类型，多态以及如何获取对象信息。</p><h2 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h2><p>继承：</p><ul><li>新类不必从头编写，</li><li>可以直接从现有类继承，就自动拥有了现有类的所有功能，</li><li>新类只需要编写现有类缺少的新功能即可。</li></ul><p>继承优点：</p><ul><li>复用已有代码</li><li>自动拥有了现有类的所有功能</li><li>只需要编写缺少的新功能</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180104/aCHbG7F851.png?imageslim" alt="mark"></p><p>会形成一棵继承树</p><p>继承的特点：</p><ul><li>子类和父类是is关系</li></ul><p><img src="http://myphoto.mtianyan.cn/blog/180104/EC9KfiGb5j.png?imageslim" alt="mark"><br><img src="http://myphoto.mtianyan.cn/blog/180104/GKLI9Hi0kL.png?imageslim" alt="mark"></p><p>如果一个实例是一个子类，则它也是一个父类；如果实例是父类，则它不是子类。<br><code>is</code>关系指的是：小狗是鸟，却不能说动物是小狗</p><p><code>has</code>关系指的是：学生有一本书，不能说学生是一本书</p><p>两个<code>has</code>关系的类不能继承，只能以属性组合到类中.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self , bookName)</span>:</span></span><br><span class="line">        self.book=Book(bookName)</span><br></pre></td></tr></table></figure><p>继承特点：</p><ol><li>总是从某个类继承，没有合适的类时使用<code>object</code>类继承</li><li>调用<code>super().__init__</code>方法（用来初始化父类），如果不用父类的属性有可能没有被正确初始化。</li></ol><p><code>Student</code>类从父类继承<code>name</code>和<code>gender</code>：</p><p><code>super(Student,self).__init__(name,gender)</code>调用这一句来初始化父类。</p><h2 id="继承一个类"><a href="#继承一个类" class="headerlink" title="继承一个类"></a>继承一个类</h2><p>如果已经定义了<code>Person</code>类，需要定义新的<code>Student</code>和<code>Teacher</code>类时，可以直接从<code>Person</code>类继承：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br></pre></td></tr></table></figure><p>定义<code>Student</code>类时，只需要把额外的属性加上，例如<code>score</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure><p><code>知识点：</code>一定要用 <code>super(Student, self).__init__(name, gender)</code>去初始化父类，否则，继承自 <code>Person</code>的 <code>Student</code> 将没有 <code>name</code> 和 <code>gender</code>。</p><p>函数<code>super(Student, self)</code>将返回当前类继承的父类，即 <code>Person</code> ，然后调用<code>__init__()</code>方法，注意<code>self</code>参数已在<code>super()</code>中传入，在<strong>init</strong>()中将隐式传递，<strong>不需要写出（也不能写）</strong>。</p><h3 id="编程任务-21"><a href="#编程任务-21" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请参考 <code>Student</code> 类，编写一个 <code>Teacher</code>类，也继承自 <code>Person</code>。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, course)</span>:</span></span><br><span class="line">        super(Teacher, self).__init__(name, gender)</span><br><span class="line">        self.course = course</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">t = Teacher(<span class="string">'Alice'</span>, <span class="string">'Female'</span>, <span class="string">'English'</span>)</span><br><span class="line"><span class="keyword">print</span> t.name</span><br><span class="line"><span class="keyword">print</span> t.course</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Alice</span><br><span class="line">English</span><br></pre></td></tr></table></figure><h2 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h2><p>函数<code>isinstance()</code>可以判断一个<code>变量的类型</code>，既可以用在Python内置的数据类型如<code>str、list、dict</code>，也可以用在我们自定义的类，<code>它们本质上都是数据类型</code>。</p><p>假设有如下的 <code>Person</code>、<code>Student</code> 和 <code>Teacher</code> 的定义及继承关系如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, course)</span>:</span></span><br><span class="line">        super(Teacher, self).__init__(name, gender)</span><br><span class="line">        self.course = course</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">'Tim'</span>, <span class="string">'Male'</span>)</span><br><span class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, <span class="number">88</span>)</span><br><span class="line">t = Teacher(<span class="string">'Alice'</span>, <span class="string">'Female'</span>, <span class="string">'English'</span>)</span><br></pre></td></tr></table></figure><p>当我们拿到变量 <code>p</code>、<code>s</code>、<code>t</code> 时，可以使用 <code>isinstance</code> 判断类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(p, Person)</span><br><span class="line"><span class="keyword">True</span>    <span class="comment"># p是Person类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(p, Student)</span><br><span class="line"><span class="keyword">False</span>   <span class="comment"># p不是Student类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(p, Teacher)</span><br><span class="line"><span class="keyword">False</span>   <span class="comment"># p不是Teacher类型</span></span><br></pre></td></tr></table></figure><p>这说明在继承链上，一个父类的实例不能是子类类型，因为<strong>子类比父类多了一些属性和方法。</strong></p><p>我们再考察 <code>s</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(s, Person)</span><br><span class="line"><span class="keyword">True</span>    <span class="comment"># s是Person类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(s, Student)</span><br><span class="line"><span class="keyword">True</span>    <span class="comment"># s是Student类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(s, Teacher)</span><br><span class="line"><span class="keyword">False</span>   <span class="comment"># s不是Teacher类型</span></span><br></pre></td></tr></table></figure><p><code>s</code>是<code>Student</code>类型，不是<code>Teacher</code>类型，这很容易理解。但是，<code>s</code> 也是<code>Person</code>类型，因为<code>Student</code>继承自<code>Person</code>，虽然它比<strong>Person多了一些属性和方法</strong>，但是，把 s 看成Person的实例也是可以的。</p><p>这说明在一条继承链上，<strong>一个实例可以看成它本身的类型，也可以看成它父类的类型。</strong></p><h3 id="编程任务-22"><a href="#编程任务-22" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请根据继承链的类型转换，依次思考 <code>t</code>是否是 <code>Person，Student，Teacher，object</code>类型，并使用<code>isinstance()</code>判断来验证您的答案。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, course)</span>:</span></span><br><span class="line">        super(Teacher, self).__init__(name, gender)</span><br><span class="line">        self.course = course</span><br><span class="line"></span><br><span class="line">t = Teacher(<span class="string">'Alice'</span>, <span class="string">'Female'</span>, <span class="string">'English'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> isinstance(t, Person)</span><br><span class="line"><span class="keyword">print</span> isinstance(t, Student)</span><br><span class="line"><span class="keyword">print</span> isinstance(t, Teacher)</span><br><span class="line"><span class="keyword">print</span> isinstance(t, object)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>类具有继承关系，并且子类类型可以向上转型看做父类类型，如果我们从 <code>Person</code> 派生出<code>Student</code>和<code>Teacher</code> ，并都写了一个<code>whoAmI()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'I am a Person, my name is %s'</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'I am a Student, my name is %s'</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, course)</span>:</span></span><br><span class="line">        super(Teacher, self).__init__(name, gender)</span><br><span class="line">        self.course = course</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'I am a Teacher, my name is %s'</span> % self.name</span><br></pre></td></tr></table></figure><p>在一个函数中，如果我们接收一个变量 x，则无论该 x 是 Person、Student还是 Teacher，都可以正确打印出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">who_am_i</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> x.whoAmI()</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">'Tim'</span>, <span class="string">'Male'</span>)</span><br><span class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, <span class="number">88</span>)</span><br><span class="line">t = Teacher(<span class="string">'Alice'</span>, <span class="string">'Female'</span>, <span class="string">'English'</span>)</span><br><span class="line"></span><br><span class="line">who_am_i(p)</span><br><span class="line">who_am_i(s)</span><br><span class="line">who_am_i(t)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am a Person, my name is Tim</span><br><span class="line">I am a Student, my name is Bob</span><br><span class="line">I am a Teacher, my name is Alice</span><br></pre></td></tr></table></figure><p><code>知识点</code>：这种行为称为多态。也就是说，方法调用将作用在 <code>x</code>的实际类型上。<code>s 是Student类型</code>，它实际上拥有自己的 <code>whoAmI()</code>方法以及从 <code>Person继承的 whoAmI方法</code>，但调用 <code>s.whoAmI()</code>总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。</p><p>由于Python是动态语言，所以，传递给函数 <code>who_am_i(x)</code>的参数 <code>x</code> 不一定是 <code>Person</code> 或 <code>Person 的子类型</code>。任何数据类型的实例都可以，只要它有一个whoAmI()的方法即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'I am a book'</span></span><br></pre></td></tr></table></figure><p>知识点：这是动态语言和静态语言（例如Java）最大的差别之一。动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用。</p><h3 id="编程任务-23"><a href="#编程任务-23" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>Python提供了<code>open()</code>函数来打开一个磁盘文件，并返回 <code>File</code>对象。<code>File对象</code>有一个<code>read()</code>方法可以读取文件内容：</p></blockquote><p>例如，从文件读取内容并解析为JSON结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f = open(<span class="string">'/path/to/file.json'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">print</span> json.load(f)</span><br></pre></td></tr></table></figure><p>由于Python的动态特性，<code>json.load()</code>并不一定要从一个<code>File对象</code>读取内容。任何对象，只要有<code>read()</code>方法，就称为<code>File-like Object</code>，都可以传给<code>json.load()</code>。</p><p>请尝试编写一个<code>File-like Object</code>，把一个字符串 <code>r&#39;[&quot;Tim&quot;, &quot;Bob&quot;, &quot;Alice&quot;]&#39;包装成 File-like Object</code> 并由 <code>json.load()</code> 解析。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, strlist)</span>:</span></span><br><span class="line">        self.strlist = strlist</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span>(self.strlist)</span><br><span class="line"></span><br><span class="line">s = Students(<span class="string">'["Tim", "Bob", "Alice"]'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> json.load(s)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[u&apos;Tim&apos;, u&apos;Bob&apos;, u&apos;Alice&apos;]</span><br></pre></td></tr></table></figure><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>除了从<code>一个</code>父类继承外，Python允许从<code>多个父类</code>继承，称为<strong>多重继承。</strong></p><p>多重继承的继承链就不是一棵树了，它像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'init A...'</span></span><br><span class="line">        self.a = a</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        super(B, self).__init__(a)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'init B...'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        super(C, self).__init__(a)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'init C...'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        super(D, self).__init__(a)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'init D...'</span></span><br></pre></td></tr></table></figure><p>看下图:</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/IJ2jKJHFBJ.png?imageslim" alt="mark"></p><p>像这样，<code>D</code> 同时继承自 <code>B</code>和 <code>C</code>，也就是 <code>D</code> 拥有了 <code>A、B、C</code>的全部功能。多重继承通过 <code>super()</code>调用<code>__init__()</code>方法时，A 虽然被继承了两次，但<code>__init__()</code>只调用一次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = D(<span class="string">'d'</span>)</span><br><span class="line">init A...</span><br><span class="line">init C...</span><br><span class="line">init B...</span><br><span class="line">init D...</span><br></pre></td></tr></table></figure><p>多重继承的目的是从<strong>两种继承树中分别选择并继承出子类，</strong>以便组合功能使用。</p><p>举个例子，Python的网络服务器有<code>TCPServer</code>、<code>UDPServer</code>、<code>UnixStreamServer</code>、<code>UnixDatagramServer</code>，而服务器运行模式有 多进程<code>ForkingMixin</code> 和 多线程<code>ThreadingMixin</code>两种。</p><p>要创建多进程模式的 <code>TCPServer</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTCPServer</span><span class="params">(TCPServer, ForkingMixin)</span></span></span><br><span class="line"><span class="class">    <span class="title">pass</span></span></span><br></pre></td></tr></table></figure><p>要创建多线程模式的 <code>UDPServer</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUDPServer</span><span class="params">(UDPServer, ThreadingMixin)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果没有<strong>多重继承，要实现上述所有可能的组合需要 4x2=8 个子类</strong>。</p><h3 id="编程任务-24"><a href="#编程任务-24" class="headerlink" title="编程任务"></a>编程任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+-Person</span><br><span class="line">  +- Student</span><br><span class="line">  +- Teacher</span><br><span class="line"></span><br><span class="line">是一类继承树；</span><br><span class="line"></span><br><span class="line">+- SkillMixin</span><br><span class="line">   +- BasketballMixin</span><br><span class="line">   +- FootballMixin</span><br><span class="line"></span><br><span class="line">是一类继承树。</span><br></pre></td></tr></table></figure><p>通过多重继承，请定义“会打篮球的学生”和“会踢足球的老师”。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkillMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasketballMixin</span><span class="params">(SkillMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">skill</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'basketball'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FootballMixin</span><span class="params">(SkillMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">skill</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'football'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BStudent</span><span class="params">(BasketballMixin,Student)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTeacher</span><span class="params">(FootballMixin,Teacher)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">s = BStudent()</span><br><span class="line"><span class="keyword">print</span> s.skill()</span><br><span class="line"></span><br><span class="line">t = FTeacher()</span><br><span class="line"><span class="keyword">print</span> t.skill()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basketball</span><br><span class="line">football</span><br></pre></td></tr></table></figure><h2 id="获取对象信息-知识点"><a href="#获取对象信息-知识点" class="headerlink" title="获取对象信息(知识点)"></a>获取对象信息(知识点)</h2><p>拿到一个变量，除了用<code>isinstance()</code>判断它是否是某种类型的实例外，还有没有别的方法获取到更多的信息呢？</p><p>例如，已有定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whoAmI</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'I am a Student, my name is %s'</span> % self.name</span><br></pre></td></tr></table></figure><p>首先可以用 <code>type()</code> 函数获取变量的类型，它返回一个 <code>Type 对象</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">123</span>)</span><br><span class="line">&lt;type <span class="string">'int'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, <span class="number">88</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(s)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Student</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>其次，可以用 <code>dir()</code> 函数获取变量的<code>所有属性</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(<span class="number">123</span>)   <span class="comment"># 整数也有很多属性...</span></span><br><span class="line">[<span class="string">'__abs__'</span>, <span class="string">'__add__'</span>, <span class="string">'__and__'</span>, <span class="string">'__class__'</span>, <span class="string">'__cmp__'</span>, ...]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(s)</span><br><span class="line">[<span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__format__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__module__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'gender'</span>, <span class="string">'name'</span>, <span class="string">'score'</span>, <span class="string">'whoAmI'</span>]</span><br></pre></td></tr></table></figure><p>对于实例变量，<code>dir()</code>返回所有实例属性，包括<code>__class__</code>这类有特殊意义的属性。注意到方法<code>whoAmI</code>也是 <code>s</code> 的一个属性。</p><p>如何去掉<code>__xxx__</code>这类的特殊属性，只保留我们自己定义的属性？回顾一下filter()函数的用法。</p><p><code>dir()</code>返回的属性是字符串列表，如果已知一个属性名称，要获取或者设置对象的属性，就需要用 <code>getattr()</code> 和 <code>setattr( )</code>函数了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(s, <span class="string">'name'</span>)  <span class="comment"># 获取name属性</span></span><br><span class="line"><span class="string">'Bob'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setattr(s, <span class="string">'name'</span>, <span class="string">'Adam'</span>)  <span class="comment"># 设置新的name属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line"><span class="string">'Adam'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(s, <span class="string">'age'</span>)  <span class="comment"># 获取age属性，但是属性不存在，报错：</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'age'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(s, <span class="string">'age'</span>, <span class="number">20</span>)  <span class="comment"># 获取age属性，如果属性不存在，就返回默认值20：</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><h3 id="编程任务-25"><a href="#编程任务-25" class="headerlink" title="编程任务"></a>编程任务</h3><p>对于Person类的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>希望除了 <code>name</code>和<code>gender</code> 外，可以提供任意<code>额外的关键字参数</code>，并绑定到实例，请修改 Person 的 <code>__init__()</code>定 义，完成该功能。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> kw.items():</span><br><span class="line">            setattr(self, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">'Bob'</span>, <span class="string">'Male'</span>, age=<span class="number">18</span>, course=<span class="string">'Python'</span>)</span><br><span class="line"><span class="keyword">print</span> p.age</span><br><span class="line"><span class="keyword">print</span> p.course</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">18</span><br><span class="line">Python</span><br></pre></td></tr></table></figure><h1 id="Python的特殊方法-魔术方法"><a href="#Python的特殊方法-魔术方法" class="headerlink" title="Python的特殊方法(魔术方法)"></a>Python的特殊方法(魔术方法)</h1><p>以及如何利用特殊方法定制类，实现各种强大的功能。</p><h2 id="什么是特殊方法？"><a href="#什么是特殊方法？" class="headerlink" title="什么是特殊方法？"></a>什么是特殊方法？</h2><p>demo：</p><p>比较<code>print</code>的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print lst</span><br><span class="line">[1,2,3]</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180104/mCLK742CDH.png?imageslim" alt="mark"></p><p>对于一个<code>Person</code>类的实例进行<code>print</code>，会得到一个对象地址。</p><p>python如何把任意变量变成str?</p><p>python能够将任意变量变成str是因为任何数据类型的实例都有一个特殊方法：<code>__str__()</code><br>思考：Person类并没有定义<code>__str__()</code>，为什么能调用？</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/HbCH7j0hDf.png?imageslim" alt="mark"></p><p>对应调用<code>list</code>和<code>Person</code>实例的<code>__str__()</code>方法。</p><p>如果我们给Person类加上特殊方法<code>__str__()</code>，我们就可以根据自己需要打印出Person实例来。<br><img src="http://myphoto.mtianyan.cn/blog/180104/1CdDk608fB.png?imageslim" alt="mark"></p><ul><li>用于print的<strong>str</strong></li><li>用于len的<strong>len</strong></li><li>用于cmp的<strong>cmp</strong></li></ul><p>python的特殊方法特点：</p><ul><li>特殊方法定义在<code>class</code>中</li><li>不需要直接调用</li><li>python的某些函数或操作符会自动调用对应的特殊方法。</li></ul><p>Python定义的一部分特殊方法:</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/25k9LCamf4.png?imageslim" alt="mark"></p><p>正确实现特殊方法：</p><ul><li>只需编写用到的特殊方法</li><li>有关联性的特殊方法都必须实现 </li></ul><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__getattr__</span><br><span class="line">__setattr__</span><br><span class="line">__delattr__</span><br></pre></td></tr></table></figure><p>这三个方法需要同时编写</p><h2 id="str-和-repr"><a href="#str-和-repr" class="headerlink" title="__str__和__repr__"></a><code>__str__</code>和<code>__repr__</code></h2><p>如果要把一个类的实例变成 <code>str</code>，就需要实现特殊方法<code>__str__()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(Person: %s, %s)'</span> % (self.name, self.gender)</span><br></pre></td></tr></table></figure><p>现在，在交互式命令行下用 print 试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Person(<span class="string">'Bob'</span>, <span class="string">'male'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> p</span><br><span class="line">(Person: Bob, male)</span><br></pre></td></tr></table></figure><p>但是，如果直接敲变量 p：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; p</span><br><span class="line">&lt;main.Person object at 0x10c941890&gt;</span><br></pre></td></tr></table></figure><p>似乎<code>__str__()</code>不会被调用。</p><p><code>知识点</code>: 因为 Python 定义了<code>__str__()</code>和<code>__repr__()</code>两种方法，<code>__str__()</code>用于显示给用户，而<code>__repr__()</code>用于显示给开发人员。</p><p>有一个偷懒的定义<code>__repr__</code>的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(Person: %s, %s)'</span> % (self.name, self.gender)</span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure><h3 id="编程任务-26"><a href="#编程任务-26" class="headerlink" title="编程任务"></a>编程任务</h3><p>请给<code>Student</code> 类定义<code>__str__</code>和<code>__repr__</code>方法，使得能打印出<code>&lt;Student: name, gender, score&gt;</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        super(Student, self).__init__(name, gender)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(Student: %s, %s, %s)'</span> % (self.name, self.gender, self.score)</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'male'</span>, <span class="number">88</span>)</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Student: Bob, male, 88)</span><br></pre></td></tr></table></figure><h2 id="cmp"><a href="#cmp" class="headerlink" title="__cmp__"></a><code>__cmp__</code></h2><p>对 <code>int、str</code> 等内置数据类型排序时，Python的 <code>sorted()</code> 按照默认的比较函数 <code>cmp</code>排序，但是，如果对一组 <code>Student 类</code>的实例排序时，就必须提供我们自己的特殊方法 <code>__cmp__()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(%s: %s)'</span> % (self.name, self.score)</span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cmp__</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.name &lt; s.name:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">elif</span> self.name &gt; s.name:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>上述 Student 类实现了<code>__cmp__()</code>方法，<code>__cmp__</code>用实例自身<code>self</code>和传入的实例<code>s</code>进行比较，如果 <code>self</code> 应该排在前面，就返回 <code>-1</code>，如果 <code>s</code>应该排在前面，就返回<code>1</code>，如果两者相当，返回 <code>0</code>。</p><p><code>Student</code>类实现了按<code>name</code>进行排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [Student(<span class="string">'Tim'</span>, <span class="number">99</span>), Student(<span class="string">'Bob'</span>, <span class="number">88</span>), Student(<span class="string">'Alice'</span>, <span class="number">77</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> sorted(L)</span><br><span class="line">[(Alice: <span class="number">77</span>), (Bob: <span class="number">88</span>), (Tim: <span class="number">99</span>)]</span><br></pre></td></tr></table></figure><p>注意: 如果<code>list</code>不仅仅包含 <code>Student</code> 类，则 <code>__cmp__</code> 可能会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [Student(<span class="string">'Tim'</span>, <span class="number">99</span>), Student(<span class="string">'Bob'</span>, <span class="number">88</span>), <span class="number">100</span>, <span class="string">'Hello'</span>]</span><br><span class="line"><span class="keyword">print</span> sorted(L)</span><br></pre></td></tr></table></figure><p>请思考如何解决。<br>(未完待续)</p><h3 id="编程任务-27"><a href="#编程任务-27" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请修改 <code>Student</code> 的 <code>__cmp__</code> 方法，让它按照分数从高到底排序，分数相同的按名字排序。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(%s: %s)'</span> % (self.name, self.score)</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cmp__</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.score&gt;s.score:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.score&lt;s.score:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.name&lt;s.name:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.nae&gt;s.name:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">L = [Student(<span class="string">'Tim'</span>, <span class="number">99</span>), Student(<span class="string">'Bob'</span>, <span class="number">88</span>), Student(<span class="string">'Alice'</span>, <span class="number">99</span>)]</span><br><span class="line"><span class="keyword">print</span> sorted(L)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(Alice: 99), (Tim: 99), (Bob: 88)]</span><br></pre></td></tr></table></figure><h2 id="len"><a href="#len" class="headerlink" title="__len__"></a><code>__len__</code></h2><p>如果一个类表现得像一个<code>list</code>，要获取有多少个元素，就得用 <code>len()</code> 函数。</p><p>要让 <code>len()</code> 函数工作正常，类必须提供一个特殊方法<code>__len__()</code>，它返回元素的个数。</p><p>例如，我们写一个 <code>Students</code> 类，把名字传进去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        self.names = args</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.names)</span><br></pre></td></tr></table></figure><p>只要正确实现了<code>__len__()</code>方法，就可以用len()函数返回<code>Students实例</code>的“长度”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ss = Students(&apos;Bob&apos;, &apos;Alice&apos;, &apos;Tim&apos;)</span><br><span class="line">&gt;&gt;&gt; print len(ss)</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="编程任务-天涯-3"><a href="#编程任务-天涯-3" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><p>斐波那契数列是由 <code>0, 1, 1, 2, 3, 5, 8...</code>构成。</p><p>请编写一个<code>Fib</code>类，<code>Fib(10)</code>表示数列的前10个元素，<code>print Fib(10)</code>可以打印出数列的前 10 个元素，<code>len(Fib(10))</code>可以正确返回数列的个数<code>10</code>。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        self.num = num</span><br><span class="line">        self.fibo = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">        i = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; self.num:</span><br><span class="line">            self.fibo.append(self.fibo[i<span class="number">-2</span>] + self.fibo[i<span class="number">-1</span>])</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.fibo)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.fibo)</span><br><span class="line"></span><br><span class="line">f = Fib(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> f</span><br><span class="line"><span class="keyword">print</span> len(f)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><p>Python 提供的基本数据类型 <code>int、float</code>以做整数和浮点的四则运算以及乘方等运算。</p><p>但是，四则运算不局限于int和float，还可以是<code>有理数、矩阵</code>等。</p><p>要表示有理数，可以用一个<code>Rational类</code>来表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Rational(object):</span><br><span class="line">    def __init__(self, p, q):</span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br></pre></td></tr></table></figure><p>p、q 都是整数，表示有理数 p/q。</p><p>如果要让<code>Rational</code>进行<code>+</code>运算，需要正确实现<code>__add__</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, r)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Rational(self.p * r.q + self.q * r.p, self.q * r.q)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s/%s'</span> % (self.p, self.q)</span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure><p>现在可以试试有理数加法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r1 = Rational(1, 3)</span><br><span class="line">&gt;&gt;&gt; r2 = Rational(1, 2)</span><br><span class="line">&gt;&gt;&gt; print r1 + r2</span><br><span class="line">5/6</span><br></pre></td></tr></table></figure><h3 id="编程任务-天涯-4"><a href="#编程任务-天涯-4" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><blockquote><p><code>Rational</code>类虽然可以做加法，但无法做减法、乘方和除法，请继续完善Rational类，实现四则运算。</p></blockquote><p>提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">减法运算：__sub__</span><br><span class="line">乘法运算：__mul__</span><br><span class="line">除法运算：__div__</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcs</span><span class="params">(a,b,c=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span>==a%<span class="number">2</span> <span class="keyword">and</span> <span class="number">0</span>==b%<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> gcs(a/<span class="number">2</span>,b/<span class="number">2</span>,c*<span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">    s = abs(a-b)</span><br><span class="line">    m = min(a,b)</span><br><span class="line">    <span class="keyword">if</span> s == m:</span><br><span class="line">        <span class="keyword">return</span> m*c</span><br><span class="line">    <span class="keyword">return</span> gcs(s,m,c)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, r)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Rational(self.p * r.q + self.q * r.p, self.q * r.q)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span><span class="params">(self, r)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Rational(self.p * r.q - self.q * r.p, self.q * r.q)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, r)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Rational(self.p * r.p, self.q * r.q)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__div__</span><span class="params">(self, r)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Rational(self.p * r.q , self.q * r.p)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        c = gcs(self.p, self.q)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s/%s'</span> % (self.p/c, self.q/c)</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line">r1 = Rational(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">r2 = Rational(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> r1 + r2</span><br><span class="line"><span class="keyword">print</span> r1 - r2</span><br><span class="line"><span class="keyword">print</span> r1 * r2</span><br><span class="line"><span class="keyword">print</span> r1 / r2</span><br></pre></td></tr></table></figure><p>推荐阅读评论区：<a href="https://www.imooc.com/code/6253" target="_blank" rel="noopener">https://www.imooc.com/code/6253</a></p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3/4</span><br><span class="line">1/4</span><br><span class="line">1/8</span><br><span class="line">2/1</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>Rational类实现了有理数运算，但是，如果要把结果转为 <code>int</code> 或 <code>float</code> 怎么办？</p><p>考察整数和浮点数的转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="number">12</span>)</span><br><span class="line"><span class="number">12.0</span></span><br></pre></td></tr></table></figure><p>如果要把 <code>Rational</code> 转为 <code>int</code>，应该使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = Rational(<span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">n = int(r)</span><br></pre></td></tr></table></figure><p>要让<code>int()</code>函数正常工作，只需要实现特殊方法<code>__int__()</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.p // self.q</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> int(Rational(<span class="number">7</span>, <span class="number">2</span>))</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> int(Rational(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>同理，要让<code>float()</code>函数正常工作，只需要实现特殊方法<code>__float__()</code>。</p><h3 id="编程任务-28"><a href="#编程任务-28" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请继续完善<code>Rational</code>，使之可以转型为<code>float</code>。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.p // self.q</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__float__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> float(self.p)/self.q</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> float(Rational(<span class="number">7</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span> float(Rational(<span class="number">1</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.5</span><br><span class="line">0.333333333333</span><br></pre></td></tr></table></figure><h2 id="property"><a href="#property" class="headerlink" title="@property"></a><code>@property</code></h2><p>考察 <code>Student</code> 类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure><p>当我们想要修改一个 <code>Student</code> 的 <code>scroe</code> 属性时，可以这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = Student(&apos;Bob&apos;, 59)</span><br><span class="line">s.score = 60</span><br></pre></td></tr></table></figure><p>但是也可以这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.score = 1000</span><br></pre></td></tr></table></figure><p>显然，直接给属性赋值无法检查分数的有效性。</p><p>如果利用两个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__score = score</span><br><span class="line">    def get_score(self):</span><br><span class="line">        return self.__score</span><br><span class="line">    def set_score(self, score):</span><br><span class="line">        if score &lt; 0 or score &gt; 100:</span><br><span class="line">            raise ValueError(&apos;invalid score&apos;)</span><br><span class="line">        self.__score = score</span><br></pre></td></tr></table></figure><p>这样一来，<code>s.set_score(1000)</code> 就会报错。</p><p>这种使用 <code>get/set</code> 方法来封装对一个<strong>属性的访问</strong>在许多面向对象编程的语言中都很常见。</p><p><code>知识点:</code> 但是写 <code>s.get_score()</code> 和 <code>s.set_score()</code> 没有直接写 s.score 来得直接。<br>有没有两全其美的方法？—-有。</p><p>因为Python支持高阶函数，在函数式编程中我们介绍了<code>装饰器函数</code>，可以用<code>装饰器函数</code>把 <code>get/set</code> 方法“装饰”成<code>属性调用</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__score</span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> score &lt; <span class="number">0</span> <span class="keyword">or</span> score &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'invalid score'</span>)</span><br><span class="line">        self.__score = score</span><br></pre></td></tr></table></figure><p>注意: 第一个<code>score(self)</code>是<code>get</code>方法，用<code>@property</code>装饰，第二个<code>score(self, score)</code>是<code>set</code>方法，用<code>@score.setter</code>装饰，<code>@score.setter</code>是前一个<code>@property</code>装饰后的副产品。</p><p>现在，就可以像使用属性一样设置score了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Bob'</span>, <span class="number">59</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s.score</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">1000</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: invalid score</span><br></pre></td></tr></table></figure><p>说明对 <code>score</code> 赋值实际调用的是 <code>set</code>方法。</p><h3 id="编程任务-29"><a href="#编程任务-29" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>如果没有定义<code>set</code>方法，就不能对“属性”赋值，这时，就可以创建一个只读“属性”。<br>请给<code>Student</code>类加一个<code>grade</code>属性，根据 <code>score</code>计算 <code>A（&gt;=80）、B、C（&lt;60）</code>。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-01-04 07:44:12</span></span><br><span class="line"><span class="comment"># @Author  : Your Name (you@example.org)</span></span><br><span class="line"><span class="comment"># @Link    : http://example.org</span></span><br><span class="line"><span class="comment"># @Version : $Id$</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, score)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> score &lt; <span class="number">0</span> <span class="keyword">or</span> score &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'invalid score'</span>)</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= <span class="number">80</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"A"</span></span><br><span class="line">        <span class="keyword">elif</span> self.score &gt;=<span class="number">60</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"B"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'Bob'</span>, <span class="number">59</span>)</span><br><span class="line"><span class="keyword">print</span> s.grade</span><br><span class="line"></span><br><span class="line">s.score = <span class="number">60</span></span><br><span class="line"><span class="keyword">print</span> s.grade</span><br><span class="line"></span><br><span class="line">s.score = <span class="number">99</span></span><br><span class="line"><span class="keyword">print</span> s.grade</span><br></pre></td></tr></table></figure><p><code>@property</code>,可以将python定义的函数“当做”属性访问，从而提供更加友好访问方式<br>注意<code>self.score</code> 不要写成<code>score</code> 会报错。</p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line">B</span><br><span class="line">A</span><br></pre></td></tr></table></figure><h2 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a><code>__slots__</code></h2><p>由于Python是动态语言，<strong>任何实例在运行期都可以动态地添加属性。</strong></p><p><code>知识点</code>：如果要限制添加的属性，例如，<code>Student</code>类只允许添加 <code>name、gender和score</code> 这3个属性，就可以利用Python的一个特殊的<code>__slots__</code>来实现。</p><p>顾名思义，<code>__slots__</code>是指一个类允许的属性列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'gender'</span>, <span class="string">'score'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure><p>现在，对实例进行操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student(&apos;Bob&apos;, &apos;male&apos;, 59)</span><br><span class="line">&gt;&gt;&gt; s.name = &apos;Tim&apos; # OK</span><br><span class="line">&gt;&gt;&gt; s.score = 99 # OK</span><br><span class="line">&gt;&gt;&gt; s.grade = &apos;A&apos;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">AttributeError: &apos;Student&apos; object has no attribute &apos;grade&apos;</span><br></pre></td></tr></table></figure><p><code>__slots__</code>的目的是<strong>限制当前类所能拥有的属性，</strong>如果不需要添加任意动态的属性，使用<code>__slots__</code>也能节省内存。</p><h3 id="编程任务-30"><a href="#编程任务-30" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>假设<code>Person</code>类通过<code>__slots__</code>定义了<code>name</code>和<code>gender</code>，请在派生类<code>Student</code>中通过<code>_slots__</code>继续添加<code>score</code>的定义，使<code>Student</code>类可以实现<code>name、gender和score</code> 3个属性。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'gender'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    __slots__ = (<span class="string">'score'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,gender,score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line">        self.gender = gender </span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'Bob'</span>, <span class="string">'male'</span>, <span class="number">59</span>)</span><br><span class="line">s.name = <span class="string">'Tim'</span></span><br><span class="line">s.score = <span class="number">99</span></span><br><span class="line"><span class="keyword">print</span> s.score</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">99</span><br></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="__call__"></a><code>__call__</code></h2><p>在Python中，函数其实是一个对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = abs</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__name__</span><br><span class="line"><span class="string">'abs'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">-123</span>)</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>由于 <code>f</code> 可以被调用，所以，<code>f</code> 被称为可调用对象。</p><p><strong>所有的函数都是可调用对象。</strong></p><p>一个<code>类实例</code>也可以变成一个可调用对象，只需要实现一个特殊方法<code>__call__()</code>。</p><p>我们把 <code>Person</code> 类变成一个可调用对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, friend)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'My name is %s...'</span> % self.name</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'My friend is %s...'</span> % friend</span><br></pre></td></tr></table></figure><p>现在可以对 Person 实例直接调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; p = Person(&apos;Bob&apos;, &apos;male&apos;)</span><br><span class="line">&gt;&gt;&gt; p(&apos;Tim&apos;)</span><br><span class="line">My name is Bob...</span><br><span class="line">My friend is Tim...</span><br></pre></td></tr></table></figure><p>单看 <code>p(&#39;Tim&#39;)</code>你无法确定 p 是一个函数还是一个类实例，所以，在Python中，函数也是<strong>对象，对象和函数的区别并不显著。</strong></p><h3 id="编程任务-31"><a href="#编程任务-31" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>改进一下前面定义的斐波那契数列：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    ???</span><br></pre></td></tr></table></figure><p>请加一个<code>__call__</code>方法，让调用更简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = Fib()</span><br><span class="line">&gt;&gt;&gt; print f(10)</span><br><span class="line">[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,num)</span>:</span></span><br><span class="line">        a,b,c = <span class="number">0</span>,<span class="number">1</span>,[]</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(num):</span><br><span class="line">            c.append(a)</span><br><span class="line">            a,b = b,a+b</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">f = Fib()</span><br><span class="line"><span class="keyword">print</span> f(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span><br></pre></td></tr></table></figure><h1 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h1><p>Python的函数式编程：</p><ul><li>函数式与函数的区别。</li><li>支持高阶函数：<ul><li>函数本身可作为变量传入另一个函数。</li><li>抽象度很高的模型。</li><li>内置函数<code>map</code> <code>sorted</code> <code>reduce</code> <code>filter</code>中都有高阶函数应用。</li></ul></li><li>闭包：利用闭包来返回函数</li><li>匿名函数：限制,匿名函数只能有一个表达式：表达式的结果就是匿名函数的返回值。</li><li>装饰器：高阶函数的应用，可以把一个函数装饰成另一个函数。以便能在运行时动态增加函数功能。</li></ul><p>Python的模块和包：</p><ul><li>模块的目的：避免名字冲突。</li><li>包可以看成具有目录层次的模块(<code>__init__.py</code>)</li><li>引用模块</li><li>引用<strong>future</strong>添加新版本中的特性。</li></ul><p>Python的面向对象编程:</p><ul><li>类和实例(类是模板，实例是根据模板创健的对象)</li><li>属性和方法。(可以把属性看成是一个方法？)，绑定到实例的函数对象。</li><li>区分类属性和实例属性(优先级，尽量不要重名)</li></ul><p>类的继承中：</p><ul><li>继承的概念和目的(代码复用)</li><li>多态（从一个父类派生出多个子类。可以使子类具有各自不同的行为。）</li><li>多重继承</li></ul><p>定制类：</p><ul><li>定制类的目的：为了让我们编写的类应用到普通函数中。<code>len()</code> <code>cmp()</code></li><li>特殊方法</li><li>类型转换(把任意类型转化为string类型，int类型)</li><li><code>__call__</code>方法：把实例变成一个可以跟函数一样调用的对象。</li></ul><ol><li>任何数据类型的实例都有一个特殊方法<code>__str__()</code>类似于<code>toString</code></li><li>特殊方法的特征：<ul><li>特殊方法定义在class中</li><li>不需要直接调用</li><li>Python的某些函数或者操作符会调用对应的特殊方法</li></ul></li><li><p>正确实现特殊方法：<br>   只需要编写用到的特殊方法<br>   有关联性的特殊方法都必须实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如 __getattr__</span><br><span class="line">   __setattr__</span><br><span class="line">   __delattr__</span><br></pre></td></tr></table></figure></li><li><p>python中<code>__str__</code>和<code>__repr__</code><br>如果要把一个类的实例变成 <code>str</code>，就需要实现特殊方法<code>__str__()</code>：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'(Person: %s, %s)'</span> % (self.name, self.gender)</span><br></pre></td></tr></table></figure><p><code>__str__()</code>用于显示给用户，而<code>__repr__()</code>用于显示给开发人员。</p><p>有一个偷懒的定义<code>__repr__</code>的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#正常定义完__str__后</span><br><span class="line">__repr__ = __str__  #把__str__赋予__repr__</span><br></pre></td></tr></table></figure><ol><li>特殊方法之 <code>__cmp__</code><br>对一组 <code>Student</code> 类的实例排序时，就必须提供我们自己的特殊方法 <code>__cmp__()</code>：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__cmp__</span><span class="params">(self, s)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> self.name &lt; s.name:</span><br><span class="line">           <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">       <span class="keyword">elif</span> self.name &gt; s.name:</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>上述 <code>Student</code> 类实现了<code>__cmp__()</code>方法，<code>__cmp__</code>用实例自身<code>self</code>和传入的实例 <code>s</code>进行比较.</p><ol><li><p>在<code>class</code>中定义<code>__init__(self),__float__(self)</code>方法：数据类型转换</p></li><li><p>python中 <code>@property</code><br><code>get/set</code> 方法来封装对一个属性的访问<br>用装饰器函数把 <code>get/set</code> 方法“装饰”成属性调用</p></li></ol><p><code>@property和@method.setter</code>是搭配使用的，<br><code>@property</code>对应<code>get</code>方法（相当于只读不可更改），<code>@method.setter</code>对应<code>set</code>方法。</p><ol><li>python中<code>__slots__</code><br>任何实例在运行期都可以动态地添加属性<br>如果要限制添加的属性，例如，<code>Student</code>类只允许添加 <code>name、gender和score</code> 这3个属性，<br>就可以利用Python的一个特殊的<code>__slots__</code>来实现。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__slots__ = (&apos;name&apos;, &apos;gender&apos;, &apos;score&apos;)</span><br></pre></td></tr></table></figure><p>顾名思义，<code>__slots__</code>是指一个类允许的属性列表</p><p>子类继续父类的场合：<br><code>__slots__</code>定义的属性仅对当前类起作用，对继承的子类是不起作用的。<br>除非在子类中也定义<code>__slots__</code>，此时，子类允许定义的属性就是自身的<code>__slots__加上父类中定义的__slots__</code>。</p><p>下一步进阶：</p><ul><li>IO：文件和Socket</li><li>多任务：进程和线程</li><li>数据库</li><li>Web开发</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;进阶的基础是学会入门&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt; Python零基础入门课程学习完之后。我继续复习进阶知识。课程知识+个人总结以及知识点标注与相关难点探究。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[√] 慕课网廖雪峰老师的: python进阶&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="python从入门到精通" scheme="http://fanpengtao.tk/categories/python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    
    
      <category term="Python" scheme="http://fanpengtao.tk/tags/Python/"/>
    
      <category term="学习笔记" scheme="http://fanpengtao.tk/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="进阶学习" scheme="http://fanpengtao.tk/tags/%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python零基础入门笔记</title>
    <link href="http://fanpengtao.tk/post/7a862501.html"/>
    <id>http://fanpengtao.tk/post/7a862501.html</id>
    <published>2018-01-02T15:01:08.000Z</published>
    <updated>2018-10-21T16:59:32.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>复习是为了更好的学习更新的知识。 </p></blockquote><div class="note default"><p> 学习python有一年多了，希望通过学习笔记来复习了，也能让后来者少走一点弯路。在课程笔记的同时加入了一部分自己的经验补充。</p><ul><li>[√] 廖雪峰老师在慕课网的课程: Python入门</li></ul></div><a id="more"></a><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/La3h6131Bb.png?imageslim" alt="mark"></p><h1 id="Python的初次体验"><a href="#Python的初次体验" class="headerlink" title="Python的初次体验"></a>Python的初次体验</h1><h2 id="python语言介绍"><a href="#python语言介绍" class="headerlink" title="python语言介绍"></a>python语言介绍</h2><p>全世界有几百种编程语言，但是流行的只有十几种，python就是其中一种。荷兰人龟叔于1989年圣诞节创立。</p><p>特点：<strong>优雅，明确，简单</strong>。</p><p><strong>适合的领域：</strong></p><ul><li>web网站和各种网络服务；</li><li>系统工具和脚本；</li></ul><p>作为<strong>胶水语言</strong>把其他语言开发的模块包装起来方便使用。</p><p>Python是一门高级语言，所以<strong>不适合</strong>贴近硬件的代码:</p><ul><li>比如驱动程序（首选C）</li><li>移动开发，有各自的语言，（objectC，swift/java）</li><li>游戏开发（首选C/C++）。</li></ul><p><strong>Python实际应用：</strong></p><p>YouTube，豆瓣，搜狐邮箱；Openstack开源云计算平台。Google，Yahoo，NASA。</p><p>语言之间的对比：</p><blockquote><p>C编译为机器码；JAVA编译为字节码；python为解释执行。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1779926-cf9a89d1ed19acf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="python与其他语言对比"></p><p><strong>缺点：</strong> 运行慢，Python源码不能加密。</p><h2 id="Python版本的选择"><a href="#Python版本的选择" class="headerlink" title="Python版本的选择"></a>Python版本的选择</h2><p>博主建议选择安装环境篇的进阶版：2.7版本与3.x版本共存。</p><p>3.x版本建议选择Python 3.5.1 |Anaconda 4.1.0 (64-bit)<br>以后如果要使用python进行TensorFlow windows版的配置可以省下时间。</p><h2 id="windows下安装python"><a href="#windows下安装python" class="headerlink" title="windows下安装python"></a>windows下安装python</h2><p>参考：搭建Python开发环境</p><h2 id="第一个python程序"><a href="#第一个python程序" class="headerlink" title="第一个python程序"></a>第一个python程序</h2><p>cmd下输入python。进入交互式环境。</p><ul><li><p>命令行模式启动python:<br><code>python</code></p></li><li><p>命令行模式执行python文件<br><code>python 目录/xxx.py</code></p></li><li><p>命令行模式关闭python：<br><code>exit()</code></p></li></ul><p>注意：不要使用word，或者windows下自带的记事本来进行代码编写。</p><p>推荐使用：</p><ul><li>轻量级：sublime Text 或 editplus</li><li>重量级(较大工程) : pycharm Professional</li></ul><p>2.7版本专属：</p><p><code>print &#39;hello,world!&#39;</code></p><p>3.x版本(2.7版本也可以正常运行)：</p><p><code>print (&quot;hello,world!&quot;)</code></p><h1 id="Python变量和数据类型"><a href="#Python变量和数据类型" class="headerlink" title="Python变量和数据类型"></a>Python变量和数据类型</h1><blockquote><p>讲解Python基本的数据类型.包括整数、浮点数、字符串和布尔类型，以及变量的概念和基本的数据运算。</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>在Python程序中，整数的表示方法和数学上的写法一模一样.</p><p>例如：1，100，-8080，0，等等。<strong>十六进制</strong>用<code>0x</code>前缀和<code>0-9</code>，<code>a-f</code>表示.</p><p>例如：0xff00，0xa5b4c3d2，等等。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数也就是小数，之所以称为浮点数: 因为<strong>按照科学记数法表示时，一个浮点数的小数点位置是可变的</strong></p><p>比如，1.23x10^9和12.3x10^8是相等的。</p><p>浮点数可以用数学写法: 如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><p>知识点：python2与3不同整除</p><p>python2.7下：<code>/</code> 和 <code>//</code> 都是整数除法。</p><p>例: 1/2结果为0.后面小数部分会直接去除掉。</p><p>python3.x下：</p><ul><li><code>/</code> 为浮点数除法(如：<code>1/2=0.5</code>)</li><li><code>//</code>为整数除法(如: <code>1//2 = 0</code>）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> a+b</span><br><span class="line"><span class="comment">#python2.7下想要浮点数除法就得使用类型转换。</span></span><br><span class="line"><span class="keyword">print</span> float(a)/b</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是以’’或””括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分.</p><p>因此，字符串’abc’只有a，b，c这3个字符。</p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来。</p><p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。</p><p>and运算是与运算，只有所有都为 True，and运算结果才是 True。</p><p>or运算是或运算，只要其中有一个为 True，or 运算结果就是 True。</p><p>not运算是非运算，它是一个单目运算符，把 True 变成 False，False 变成 True。</p><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>空值是Python里一个特殊的值，用<code>None</code>表示。</p><p><code>None</code>不能理解为0，因为0是有意义的，而<code>None</code>是一个特殊的空值。</p><h3 id="编程小任务："><a href="#编程小任务：" class="headerlink" title="编程小任务："></a>编程小任务：</h3><ol><li>计算十进制整数 45678 和十六进制整数 0x12fd2 之和。</li><li>请用字符串表示出Learn Python in imooc。</li><li>请计算以下表达式的布尔值（注意==表示判断是否相等）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 &lt; 99</span><br><span class="line">0xff == 255</span><br></pre></td></tr></table></figure></li></ol><p>题目答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="number">45678</span>+<span class="number">0x12fd2</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Learn Python in imooc"</span> </span><br><span class="line"><span class="keyword">print</span> <span class="number">100</span>&lt;<span class="number">99</span> </span><br><span class="line"><span class="keyword">print</span> <span class="number">0xff</span> == <span class="number">255</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">123456</span><br><span class="line">Learn Python in imooc</span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="print语句"><a href="#print语句" class="headerlink" title="print语句"></a>print语句</h2><p>print语句可以向屏幕上输出指定的文字。比如输出’hello, world’，用代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'hello, world'</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>当我们在Python交互式环境下编写代码时，&gt;&gt;&gt;是Python解释器的提示符，不是代码的一部分。</p></li><li><p>当我们在文本编辑器中编写代码时，千万不要自己添加 &gt;&gt;&gt;。</p></li></ul><p>print语句也可以跟上多个字符串，用逗号<code>,</code>隔开，就可以连成一串输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'The quick brown fox'</span>, <span class="string">'jumps over'</span>, <span class="string">'the lazy dog'</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The quick brown fox jumps over the lazy dog</span><br></pre></td></tr></table></figure><p>print会依次打印每个字符串，知识点：<strong>遇到逗号<code>,</code>会输出一个空格.</strong></p><p>print也可以打印整数，或者计算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="number">300</span></span><br><span class="line"><span class="number">300</span>    <span class="comment">#运行结果</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="number">100</span> + <span class="number">200</span></span><br><span class="line"><span class="number">300</span>    <span class="comment">#运行结果</span></span><br></pre></td></tr></table></figure><p>漂亮做法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'100 + 200 ='</span>, <span class="number">100</span> + <span class="number">200</span></span><br><span class="line"><span class="number">100</span> + <span class="number">200</span> = <span class="number">300</span>     <span class="comment">#运行结果</span></span><br></pre></td></tr></table></figure><blockquote><p>注意: 对于100 + 200，Python解释器自动计算出结果300.<br>但是，’100 + 200 =’是字符串而非数学公式，Python把它视为字符串.</p></blockquote><h3 id="编程任务：请用两种方式打印出-hello-python"><a href="#编程任务：请用两种方式打印出-hello-python" class="headerlink" title="编程任务：请用两种方式打印出 hello, python."></a>编程任务：请用两种方式打印出 hello, python.</h3><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#input code</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello, python.'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>,<span class="string">'python.'</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello, python.</span><br><span class="line">hello, python.</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Python的注释以<code>#</code>开头，后面的文字直到行尾都算注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这一行全部都是注释...</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello'</span> <span class="comment"># 这也是注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时不想运行下面一行代码:</span></span><br><span class="line"><span class="comment"># print 'hello, python.'</span></span><br></pre></td></tr></table></figure><p>注释还有一个巧妙的用途，就是一些代码我们不想运行，但又不想删除，就可以用注释暂时屏蔽掉：</p><h3 id="编程任务"><a href="#编程任务" class="headerlink" title="编程任务:"></a>编程任务:</h3><p>将代码编辑器中的 “print ‘hello’” 语句修改成注释语句</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print 'hello'</span></span><br></pre></td></tr></table></figure><h3 id="注释：多行注释"><a href="#注释：多行注释" class="headerlink" title="注释：多行注释"></a>注释：多行注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">下面是一行被注释代码</span></span><br><span class="line"><span class="string">下面是两行被注释代码</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h2><p>在Python中，变量的概念基本上和初中代数的方程变量是一致的。</p><p>例如，对于方程式<code>y=x*x</code> ，<code>x</code>就是变量。</p><p>当<code>x=2</code>时，计算结果是<code>4</code>。当<code>x=5</code>时，计算结果是<code>25</code>。</p><p>只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p><p>在Python程序中，变量是用一个变量名表示。</p><p>知识点：<strong>变量名必须是大小写英文、数字和下划线 <code>_</code> 的组合，且不能用数字开头。</strong>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">t_007 = <span class="string">'T007'</span></span><br></pre></td></tr></table></figure><p>变量a是一个整数。变量t_007是一个字符串。</p><p>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123</span>    <span class="comment"># a是整数</span></span><br><span class="line"><span class="keyword">print</span> a</span><br><span class="line">a = <span class="string">'imooc'</span>   <span class="comment"># a变为字符串</span></span><br><span class="line"><span class="keyword">print</span> a</span><br></pre></td></tr></table></figure><p>知识点: <strong>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。</strong></p><blockquote><p>静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这些是java代码</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">123</span>; <span class="comment">// a是整数类型变量</span></span><br><span class="line">a = <span class="string">"mooc"</span>; <span class="comment">// 错误：不能把字符串赋给整型变量</span></span><br></pre></td></tr></table></figure><p>和静态语言相比，动态语言更灵活，就是这个原因。<br><strong>请不要把赋值语句的等号等同于数学的等号</strong>。比如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">x = x + <span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果从数学上理解<code>x = x + 2</code>那无论如何是不成立的.</p><p>在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。</p><p>最后，知识点: <strong>理解变量在计算机内存中的表示也非常重要</strong>。当我们写：a = ‘ABC’时，Python解释器干了两件事情：</p><ol><li><p>在内存中创建了一个’ABC’的字符串；</p></li><li><p>在内存中创建了一个名为a的变量，并把它指向’ABC’。</p></li></ol><p>也可以把一个变量a<strong>赋值</strong>给另一个变量b，这个操作实际上是把<strong>变量b指向变量a所指向的数据</strong>，例如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'ABC'</span></span><br><span class="line">b = a</span><br><span class="line">a = <span class="string">'XYZ'</span></span><br><span class="line"><span class="keyword">print</span> b</span><br></pre></td></tr></table></figure><p>最后一行打印出变量b的内容到底是’ABC’呢还是’XYZ’？如果从数学意义上理解，就会错误地得出b和a相同，也应该是’XYZ’，但实际上b的值是’ABC’，让我们一行一行地执行代码，就可以看到到底发生了什么事：</p><ul><li>执行<code>a = &#39;ABC&#39;</code>，解释器创建了字符串  <code>&#39;ABC&#39;</code>和变量 <code>a</code>，并把<code>a</code>指向 <code>&#39;ABC&#39;</code>：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1779926-fab133818b593823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="示意图"></p><p>执行<code>b = a</code>，解释器创建了变量 <code>b</code>，并把b指向 a 指向的字符串<code>&#39;ABC&#39;</code>：</p><p><img src="http://upload-images.jianshu.io/upload_images/1779926-e1ff488b5d0c3fa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p><p>执行<code>a = &#39;XYZ&#39;</code>，解释器创建了字符串<code>&#39;XYZ&#39;</code>，并把a的指向改为’XYZ’，但b并没有更改：</p><p><img src="http://upload-images.jianshu.io/upload_images/1779926-9f8b48cc8ad9685a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3"></p><p>所以，最后打印变量b的结果自然是’ABC’了。</p><h3 id="编程任务："><a href="#编程任务：" class="headerlink" title="编程任务："></a>编程任务：</h3><blockquote><p>等差数列可以定义为每一项与它的前一项的差等于一个常数，可以用变量 x1 表示等差数列的第一项，用 d 表示公差，请计算数列</p></blockquote><p>1 4 7 10 13 16 19 …</p><p>前 100 项的和。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x1 = <span class="number">1</span></span><br><span class="line">d = <span class="number">3</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line">x100 = x1+(<span class="number">100</span><span class="number">-1</span>)*d</span><br><span class="line">s2 = (x1+x100)*<span class="number">100</span>/<span class="number">2</span></span><br><span class="line">s = n*x1+n*(n<span class="number">-1</span>)*d/<span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> s,s2</span><br></pre></td></tr></table></figure><p>等差数列公式：</p><ul><li><code>（首项+尾项）*项数/2</code></li><li><code>项数*首项+项数*(项数-1)*公差/2</code></li></ul><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14950 14950</span><br></pre></td></tr></table></figure><h2 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h2><p>字符串可以用<code>&#39;&#39;</code>或者<code>&quot;&quot;</code>括起来表示。</p><p>如果字符串本身包含<code>&#39;</code>怎么办？比如我们要表示字符串 <code>I&#39;m OK</code>，这时，可以用<code>&quot; &quot;</code>括起来表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"I'm OK"</span></span><br><span class="line"><span class="string">'Learn "Python" in imooc'</span></span><br></pre></td></tr></table></figure><p>类似的，知识点: <strong>如果字符串包含<code>&quot;</code>，我们就可以用<code>&#39; &#39;</code>括起来表示：</strong></p><p>如果字符串既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？</p><p>知识点：转义</p><p>这个时候，就需要对字符串的某些特殊字符进行<strong><code>转义</code></strong>，Python字符串用<code>\</code>进行转义。</p><p>要表示字符串 <code>Bob said &quot;I&#39;m OK&quot;.</code><br>由于 <code>&#39;</code> 和<code>&quot;</code>会引起歧义，因此，我们在它前面插入一个<code>\</code>表示这是一个<strong>普通字符</strong>，不代表字符串的起始，因此，这个字符串又可以表示为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Bob said \"I\'m OK\".'</span></span><br><span class="line"><span class="comment"># 在要保留原状的字符串前面加上右斜杠</span></span><br></pre></td></tr></table></figure><p>注意：转义字符 <code>\</code>不计入字符串的内容中。</p><p>常用的转义字符还有：</p><ul><li><code>\n</code>表示换行</li><li><code>\t</code> 表示一个制表符</li><li><code>\\</code> 表示 <code>\</code> 字符本身</li></ul><h3 id="编程任务：-1"><a href="#编程任务：-1" class="headerlink" title="编程任务："></a>编程任务：</h3><blockquote><p>请将下面两行内容用Python的字符串表示并打印出来：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　Python was started in 1989 by &quot;Guido&quot;.</span><br><span class="line">　　Python is free and easy to learn.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'Python was started in 1989 by"Guido".\nPython is free and easy to learn.'</span></span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><h2 id="raw字符串与多行字符串"><a href="#raw字符串与多行字符串" class="headerlink" title="raw字符串与多行字符串"></a>raw字符串与多行字符串</h2><p>如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦。为了避免这种情况，我们可以在字符串前面加个前缀 <code>r</code> ，表示这是一个 raw 字符串，里面的字符就不需要转义了。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r'\(~_~)/ \(~_~)/'</span></span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/BK0i3279fC.png?imageslim" alt="mark"></p><p>解释：</p><blockquote><p>这个例子举得不是很好。<br>可以看出raw加上之后。可能产生误会的<code>\</code>被修改为<code>\\</code>(<code>\\</code> 表示 <code>\</code> 字符本身)</p></blockquote><ul><li>不加上r 只有<code>\</code>和<code>(</code>并没有合成转义字符。</li><li>加上r。<code>\</code>需要被转义，经过转义后显示出来还是自己。</li></ul><h3 id="知识点-个人小题-r的强大作用"><a href="#知识点-个人小题-r的强大作用" class="headerlink" title="知识点: 个人小题(r的强大作用)"></a>知识点: 个人小题(r的强大作用)</h3><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/DBiBm2mH4I.png?imageslim" alt="mark"></p><p>上图效果可以看出r的强大作用。</p><p>但是<code>r&#39;我是一段字符&#39;</code>表示法不能表示多行字符串(<code>r&#39;&#39;&#39;一段字符&#39;&#39;&#39;</code>)，也不能表示包含<code>&#39;</code>和 <code>&quot;</code>的字符串（为什么？）</p><p>因为如果<code>r&#39;mtian&#39;yan&#39;</code> </p><blockquote><p>r遇到左边第一个<code>&#39;</code>,会继续往后找闭合的标志<code>&#39;</code>然后找到mtian的地方。它任务结束了。代码继续往下执行。当扫到yan这里他就会报错。</p></blockquote><p>???(更深层待续)</p><p>或者<code>r&quot;mtian&quot;yan&quot;</code></p><p>或导致r提前结束掉。后面的就无法继续匹配到对应的。</p><p>知识点: 多行字符串，可以用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''Line 1</span></span><br><span class="line"><span class="string">Line 2</span></span><br><span class="line"><span class="string">Line 3'''</span></span><br><span class="line"><span class="comment">#上面这个字符串的表示方法和下面的是完全一样的：</span></span><br><span class="line"><span class="string">'Line 1\nLine 2\nLine 3'</span></span><br></pre></td></tr></table></figure><p>还可以在多行字符串前面添加 r ，把这个多行字符串也变成一个raw字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r'''Python is created by "Guido".</span></span><br><span class="line"><span class="string">It is free and easy to learn.</span></span><br><span class="line"><span class="string">Let's start learn Python in imooc!'''</span></span><br></pre></td></tr></table></figure><h3 id="编程任务：-2"><a href="#编程任务：-2" class="headerlink" title="编程任务："></a>编程任务：</h3><p>请把下面的字符串用<code>r&#39;&#39;&#39;...&#39;&#39;&#39;</code>的形式改写，并用print打印出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;\&quot;To be, or not to be\&quot;: that is the question.\nWhether it\&apos;s nobler in the mind to suffer.&apos;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">r'''"To be,or not to be":that is the question.</span></span><br><span class="line"><span class="string">Whether it's nobler in the mind to suffer.'''</span></span><br></pre></td></tr></table></figure><h2 id="知识点-Unicode字符串"><a href="#知识点-Unicode字符串" class="headerlink" title="知识点: Unicode字符串"></a>知识点: Unicode字符串</h2><p>字符串还有一个编码问题。</p><p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用<strong>8个比特（bit）作为一个字节（byte）</strong>，所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），0 - 255被用来表示大小写英文字母、数字和一些符号，这个编码表被称为<strong>ASCII编码</strong>，比如大写字母 A 的编码是65，小写字母 z 的编码是122。</p><p>如果要表示中文，显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了<strong>GB2312编码</strong>，用来把中文编进去。</p><p>类似的，日文和韩文等其他语言也有这个问题。为了统一所有文字的编码，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p><p>Unicode通常用<strong>两个字节表示一个字符</strong>，<strong>原有的英文编码从单字节变成双字节，只需要把高字节全部填为0就可以</strong>。</p><p>因为Python的诞生比Unicode标准发布的时间还要早，所以最早的Python只支持ASCII编码，普通的字符串’ABC’在Python内部都是ASCII编码的。</p><p>Python在后来添加了对Unicode的支持，<strong>以Unicode表示的字符串用u’…’表示</strong>，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">u'中文'</span></span><br><span class="line">中文</span><br><span class="line">注意: 不加 u ，中文就不能正常显示。(这个应该是很早版本才会。笔者现在已经无法复现)</span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/I4CCjDGJfk.png?imageslim" alt="mark"></p><p>转载: <a href="http://blog.csdn.net/lxdcyh/article/details/4018054" target="_blank" rel="noopener">http://blog.csdn.net/lxdcyh/article/details/4018054</a></p><p>字符串在Python内部的表示是unicode编码，因此，在做编码转换时，通常需要以unicode作为中间编码，即先将其他编码的字符串解码<code>decode</code>成unicode，再从unicode编码<code>encode</code>成另一种编码。 </p><ul><li><p><code>decode</code>的作用是将其他编码的字符串转换成<code>unicode</code>编码，如<code>str1.decode(&#39;gb2312&#39;)</code>，表示将<code>gb2312</code>编码的字符串<code>str1</code>转换成<code>unicode</code>编码。</p></li><li><p><code>encode</code>的作用是将<code>unicode</code>编码转换成其他编码的字符串，如<code>str2.encode(‘gb2312’)</code>，表示将<code>unicode</code>编码的字符串<code>str2</code>转换成<code>gb2312</code>编码</p></li><li><p>代码中字符串的默认编码与代码文件本身的编码一致。 </p></li></ul><p>如：s=’中文’</p><blockquote><p>如果是在utf8的文件中，该字符串就是utf8编码，如果是在gb2312的文件中，则其编码为gb2312。这种情况下，要进行编码转换，都需要先用decode方法将其转换成unicode编码，再使用encode方法将其转换成其他编码。<strong>通常，在没有指定特定的编码方式时，都是使用的系统默认编码创建的代码文件</strong></p></blockquote><p>如果字符串是这样定义：s=u’中文’</p><p>则该字符串的编码就被指定为unicode了，即python的内部编码，而与代码文件本身的编码无关。因此，对于这种情况做编码转换，<strong>只需要直接使用<code>encode</code>方法</strong>将其转换成指定编码即可。</p><p>如果一个字符串已经是unicode了，再进行解码则将出错，因此通常要对其编码方式是否为unicode进行判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isinstance(s, unicode) </span><br><span class="line"><span class="comment">#用来判断是否为unicode</span></span><br></pre></td></tr></table></figure><p>用非unicode编码形式的str来<code>encode</code>会报错 </p><p>如何获得系统的默认编码？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#coding=utf-8</span><br><span class="line">import sys</span><br><span class="line">print sys.getdefaultencoding()</span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/JFE34FFdKK.png?imageslim" alt="mark"></p><p>该段程序在Win10(1079)上输出为：ascii </p><p>在某些IDE中，字符串的输出总是出现乱码，甚至错误，<strong>其实是由于IDE的结果输出控制台自身不能显示字符串的编码，而不是程序本身的问题。</strong></p><p>如在UliPad(注:UliPad是wxPython的动力，导向和灵活的编程器)中运行如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=u&quot;中文&quot;</span><br><span class="line">print s</span><br></pre></td></tr></table></figure><p>会提示：UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 0-1: ordinal not in range(128)。<br>这是因为UliPad在控制台信息输出窗口是按照ascii编码输出的（系统的默认编码是ascii），而上面代码中的字符串是Unicode编码的，所以输出时产生了错误。</p><p>将最后一句改为：<code>print s.encode(&#39;gb2312&#39;)</code></p><p>则能正确输出“中文”两个字。</p><p>若最后一句改为：<code>print s.encode(&#39;utf8&#39;)</code></p><p>则输出：/xe4/xb8/xad/xe6/x96/x87，这是控制台信息输出窗口按照ascii编码输出utf8编码的字符串的结果。</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/mgK170h8i2.png?imageslim" alt="mark"></p><p><code>unicode(str,&#39;gb2312&#39;)</code>与<code>str.decode(&#39;gb2312&#39;)</code>是一样的，都是将gb2312编码的str转为unicode编码 </p><p>使用<code>str.__class__</code>可以查看str的编码形式为str类型。</p><p>window默认编码gbk；linux默认编码utf8 </p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/06C1AfbGII.png?imageslim" alt="mark"></p><p>原理说了半天，最后来个包治百病的吧：<br>(天涯)：下面代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python  </span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCoding</span><span class="params">(strInput)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取编码格式</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(strInput, unicode):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"unicode"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        strInput.decode(<span class="string">"utf8"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'utf8'</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        strInput.decode(<span class="string">"gbk"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'gbk'</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tran2UTF8</span><span class="params">(strInput)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    转化为utf8格式</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    strCodingFmt = getCoding(strInput)</span><br><span class="line">    <span class="keyword">if</span> strCodingFmt == <span class="string">"utf8"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput</span><br><span class="line">    <span class="keyword">elif</span> strCodingFmt == <span class="string">"unicode"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput.encode(<span class="string">"utf8"</span>)</span><br><span class="line">    <span class="keyword">elif</span> strCodingFmt == <span class="string">"gbk"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput.decode(<span class="string">"gbk"</span>).encode(<span class="string">"utf8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tran2GBK</span><span class="params">(strInput)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    转化为gbk格式</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    strCodingFmt = getCoding(strInput)</span><br><span class="line">    <span class="keyword">if</span> strCodingFmt == <span class="string">"gbk"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput</span><br><span class="line">    <span class="keyword">elif</span> strCodingFmt == <span class="string">"unicode"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput.encode(<span class="string">"gbk"</span>)</span><br><span class="line">    <span class="keyword">elif</span> strCodingFmt == <span class="string">"utf8"</span>:</span><br><span class="line">        <span class="keyword">return</span> strInput.decode(<span class="string">"utf8"</span>).encode(<span class="string">"gbk"</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">"中文"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isinstance(s, unicode):  </span><br><span class="line"><span class="comment">#s=u"中文"  </span></span><br><span class="line">    <span class="keyword">print</span> s.encode(<span class="string">'gb2312'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"我是Unicode编码的"</span></span><br><span class="line"><span class="keyword">elif</span> getCoding(s) == <span class="string">"utf8"</span>:  </span><br><span class="line"><span class="comment">#s="中文"  </span></span><br><span class="line">    <span class="keyword">print</span> s.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gb2312'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"我是utf-8编码的"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> s.decode(<span class="string">'gbk'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"我是gbk编码的"</span></span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/hG4I9Ckj6D.png?imageslim" alt="mark"></p><p>上图结果一：以utf-8格式保存的py文件。<br>图二：以ascii格式保存的py文件。</p><p>编码检测包 chardet </p><p>知识点：因此，转码的时候一定要先搞明白，<strong>字符串str是什么编码，然后decode成unicode，然后再encode成其他编码</strong></p><p>插入数据库报错的解决方案:<br>UnicodeDecodeError: ‘ascii’ codec can’t decode byte </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;utf8&apos;)</span><br></pre></td></tr></table></figure><p>Unicode字符串除了多了一个 u 之外，与普通字符串没啥区别，转义字符和多行表示法仍然有效：</p><p>转义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">u'中文\n日文\n韩文'</span></span><br><span class="line"><span class="comment">#多行：</span></span><br><span class="line"></span><br><span class="line"><span class="string">u'''第一行</span></span><br><span class="line"><span class="string">第二行'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#raw+多行：</span></span><br><span class="line"></span><br><span class="line"><span class="string">ur'''Python的Unicode字符串支持"中文",</span></span><br><span class="line"><span class="string">"日文",</span></span><br><span class="line"><span class="string">"韩文"等多种语言'''</span></span><br></pre></td></tr></table></figure><p>如果中文字符串在Python环境下遇到 UnicodeDecodeError，这是因为.py文件保存的格式有问题。可以在第一行添加注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#简洁版</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br></pre></td></tr></table></figure><p>目的是告诉Python解释器，用UTF-8编码读取源代码。<br>然后用Notepad++ 另存为… 并选择UTF-8格式保存。</p><h3 id="编程任务：-3"><a href="#编程任务：-3" class="headerlink" title="编程任务："></a>编程任务：</h3><p>用多行Unicode字符串表示下面的唐诗并打印：</p><p>静夜思</p><p>床前明月光，<br>疑是地上霜。<br>举头望明月，<br>低头思故乡。</p><p>知识点: <a href="https://www.python.org/dev/peps/pep-0263/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0263/</a></p><p>python定义文件编码到底用哪种？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># coding=&lt;encoding name&gt; </span><br><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: &lt;encoding name&gt; -*-</span><br><span class="line">#!/usr/bin/python</span><br><span class="line"># vim: set fileencoding=&lt;encoding name&gt; :</span><br></pre></td></tr></table></figure><p>这些都可以只要第一二行能满足如下正则表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[ \t\v]*#.*?coding[:=][ \t]*([-_.a-zA-Z0-9]+)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># This Python file uses the following encoding: utf-8</span></span><br><span class="line"><span class="comment"># 花式标明</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'''静夜思</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">床前明月光，</span></span><br><span class="line"><span class="string">疑是地上霜。</span></span><br><span class="line"><span class="string">举头望明月，</span></span><br><span class="line"><span class="string">低头思故乡。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>如果不标明文件编码或找不到。python会默认你是ASCII</p><h2 id="整数和浮点数"><a href="#整数和浮点数" class="headerlink" title="整数和浮点数"></a>整数和浮点数</h2><p>Python支持对整数和浮点数直接进行四则混合运算，运算规则和数学上的四则运算规则完全一致。</p><p>基本的运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span>   <span class="comment"># ==&gt; 6</span></span><br><span class="line"><span class="number">4</span> * <span class="number">5</span> - <span class="number">6</span>   <span class="comment"># ==&gt; 14</span></span><br><span class="line"><span class="number">7.5</span> / <span class="number">8</span> + <span class="number">2.1</span>   <span class="comment"># ==&gt; 3.0375</span></span><br></pre></td></tr></table></figure><p>使用括号可以提升优先级，这和数学运算完全一致，注意只能使用小括号，但是括号可以嵌套很多层：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span> + <span class="number">2</span>) * <span class="number">3</span>    <span class="comment"># ==&gt; 9</span></span><br><span class="line">(<span class="number">2.2</span> + <span class="number">3.3</span>) / (<span class="number">1.5</span> * (<span class="number">9</span> - <span class="number">0.3</span>))    <span class="comment"># ==&gt; 0.42145593869731807</span></span><br></pre></td></tr></table></figure><p>和数学运算不同的地方是，Python的整数运算结果仍然是整数，浮点数运算结果仍然是浮点数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span>    <span class="comment"># ==&gt; 整数 3</span></span><br><span class="line"><span class="number">1.0</span> + <span class="number">2.0</span>    <span class="comment"># ==&gt; 浮点数 3.0</span></span><br></pre></td></tr></table></figure><p>但是整数和浮点数混合运算的结果就变成浮点数了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2.0</span>    <span class="comment"># ==&gt; 浮点数 3.0</span></span><br></pre></td></tr></table></figure><p>为什么要区分整数运算和浮点数运算呢？</p><p>这是因为整数运算的结果永远是精确的，而浮点数运算的结果不一定精确，因为计算机内存再大，也无法精确表示出无限循环小数，比如 0.1 换成二进制表示就是无限循环小数。</p><p>那整数的除法运算遇到除不尽的时候，结果难道不是浮点数吗？我们来试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span> / <span class="number">4</span>    <span class="comment"># ==&gt; 2</span></span><br></pre></td></tr></table></figure><p>令很多初学者惊讶的是，Python的整数除法，即使除不尽，结果仍然是整数，余数直接被扔掉。不过，Python提供了一个<strong>求余</strong>的运算 % 可以计算余数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span> % <span class="number">4</span>    <span class="comment"># ==&gt; 3</span></span><br></pre></td></tr></table></figure><p>如果我们要计算 <code>11 / 4</code> 的精确结果，按照“整数和浮点数混合运算的结果是浮点数”的法则，把两个数中的一个变成浮点数再运算就没问题了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11.0</span> / <span class="number">4</span>    <span class="comment"># ==&gt; 2.75</span></span><br></pre></td></tr></table></figure><h3 id="编程任务：-4"><a href="#编程任务：-4" class="headerlink" title="编程任务："></a>编程任务：</h3><p>请计算 2.5 + 10 / 4 ,并解释计算结果为什么不是期望的 5.0 ?</p><p>请修复上述运算，使得计算结果是 5.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="number">2.5</span> + <span class="number">10.0</span> / <span class="number">4</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.0</span><br></pre></td></tr></table></figure><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><p>我们已经了解了Python支持布尔类型的数据，布尔类型只有True和False两种值，但是布尔类型有以下几种运算：</p><p><strong>与运算</strong>：只有两个布尔值都为 True 时，计算结果才为 True。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">True</span>   <span class="comment"># ==&gt; True</span></span><br><span class="line"><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">False</span>   <span class="comment"># ==&gt; False</span></span><br><span class="line"><span class="keyword">False</span> <span class="keyword">and</span> <span class="keyword">True</span>   <span class="comment"># ==&gt; False</span></span><br><span class="line"><span class="keyword">False</span> <span class="keyword">and</span> <span class="keyword">False</span>   <span class="comment"># ==&gt; False</span></span><br></pre></td></tr></table></figure><p><strong>或运算</strong>：只要有一个布尔值为 True，计算结果就是 True。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">True</span>   <span class="comment"># ==&gt; True</span></span><br><span class="line"><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span>   <span class="comment"># ==&gt; True</span></span><br><span class="line"><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">True</span>   <span class="comment"># ==&gt; True</span></span><br><span class="line"><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">False</span>   <span class="comment"># ==&gt; False</span></span><br></pre></td></tr></table></figure><p><strong>非运算</strong>：把True变为False，或者把False变为True：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> <span class="keyword">True</span>   <span class="comment"># ==&gt; False</span></span><br><span class="line"><span class="keyword">not</span> <span class="keyword">False</span>   <span class="comment"># ==&gt; True</span></span><br></pre></td></tr></table></figure><p>布尔运算在计算机中用来做<strong>条件判断</strong>，根据计算结果为<code>True</code>或者<code>False</code>，计算机可以自动执行不同的后续代码。</p><p>在Python中，布尔类型还可以与其他数据类型做 <code>and</code>、<code>or</code>和<code>not</code>运算，请看下面的代码：</p><p>知识点：<strong>Python把0、空字符串’’和None看成 False</strong>，<strong>其他数值和非空字符串都看成 True。短路运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">print</span> a <span class="keyword">and</span> <span class="string">'a=T'</span> <span class="keyword">or</span> <span class="string">'a=F'</span></span><br></pre></td></tr></table></figure><p>计算结果不是布尔类型，而是字符串 <code>&#39;a=T&#39;</code>，这是为什么呢？</p><p>因为<strong>Python把0、空字符串’’和None看成 False</strong>，<strong>其他数值和非空字符串都看成 True</strong>，所以：</p><p>True and ‘a=T’ 计算结果是 ‘a=T’<br>继续计算 ‘a=T’ or ‘a=F’ 计算结果还是 ‘a=T’<br>要解释上述结果，又涉及到 and 和 or 运算的一条重要法则：<strong>短路计算</strong>。</p><ol><li><p>在计算 <code>a and b</code>时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。</p></li><li><p>在计算 <code>a or b</code> 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。</p></li></ol><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/58ebLDfjkH.png?imageslim" alt="mark"></p><p>所以Python解释器在做布尔运算时，<strong>只要能提前确定计算结果，它就不会往后算了，直接返回结果</strong>。</p><h3 id="编码任务："><a href="#编码任务：" class="headerlink" title="编码任务："></a>编码任务：</h3><p>请运行如下代码，并解释打印的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'python'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>, a <span class="keyword">or</span> <span class="string">'world'</span></span><br><span class="line">b = <span class="string">''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>, b <span class="keyword">or</span> <span class="string">'world'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">a = <span class="string">'python'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>, a <span class="keyword">or</span> <span class="string">'world'</span></span><br><span class="line"><span class="comment">#a为非空，则输出a</span></span><br><span class="line">b = <span class="string">''</span></span><br><span class="line"><span class="comment">#b为空，输出world</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello,'</span>, b <span class="keyword">or</span> <span class="string">'world'</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello, python</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure><h1 id="Python集合类型-list和tuple"><a href="#Python集合类型-list和tuple" class="headerlink" title="Python集合类型:list和tuple"></a>Python集合类型:list和tuple</h1><h2 id="创建list"><a href="#创建list" class="headerlink" title="创建list"></a>创建list</h2><p>Python内置的一种数据类型是列表：<code>list</code>。list是一种有序的集合，可以随时添加和删除其中的元素。</p><p>比如，列出班里所有同学的名字，就可以用一个list表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>list是数学意义上的有序集合，也就是说，list中的元素是按照顺序排列的。</p><p>构造list非常简单，按照上面的代码，直接用 <code>[ ]</code>把list的所有元素都括起来，就是一个list对象。通常，我们会把list赋值给一个变量，这样，就可以通过变量来引用list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates <span class="comment"># 打印classmates变量的内容</span></span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>由于Python是动态语言，所以list中包含的元素并不要求都必须是同一种数据类型，我们完全可以在list中包含各种数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Michael&apos;, 100, True]</span><br></pre></td></tr></table></figure><p>一个元素也没有的list，就是空list：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; empty_list = []</span><br></pre></td></tr></table></figure><h3 id="编程任务-1"><a href="#编程任务-1" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>假设班里有3名同学：Adam，Lisa和Bart，他们的成绩分别是 95.5，85 和 59，请按照 名字, 分数, 名字, 分数… 的顺序按照分数从高到低用一个list表示，然后打印出来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="number">95.5</span>,<span class="string">'Lisa'</span>, <span class="number">85</span>,  <span class="string">'Bart'</span>, <span class="number">59</span>]</span><br><span class="line"><span class="keyword">print</span> L</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Adam&apos;, 95.5, &apos;Lisa&apos;, 85, &apos;Bart&apos;, 59]</span><br></pre></td></tr></table></figure><p>注：list本身就是有序的。所以直接打印即可。</p><h2 id="Python按照索引访问list"><a href="#Python按照索引访问list" class="headerlink" title="Python按照索引访问list"></a>Python按照索引访问list</h2><p>由于list是一个有序集合，所以，我们可以用一个list按分数从高到低表示出班里的3个同学：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>那我们如何从list中获取指定第 N 名的同学呢？方法是通过索引来获取list中的指定元素。</p><p>需要特别注意的是，<strong>索引从 0 开始</strong>，也就是说，第一个元素的索引是0，第二个元素的索引是1，以此类推。</p><p>因此，要打印第一名同学的名字，用 L[0]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print L[0]</span><br><span class="line">Adam</span><br><span class="line"></span><br><span class="line">#要打印第二名同学的名字，用 L[1]:</span><br><span class="line">&gt;&gt;&gt; print L[1]</span><br><span class="line">Lisa</span><br><span class="line"></span><br><span class="line">#要打印第三名同学的名字，用 L[2]:</span><br><span class="line">&gt;&gt;&gt; print L[2]</span><br><span class="line">Bart</span><br></pre></td></tr></table></figure><p>要打印第四名同学的名字，用 L[3]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print L[3]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><p>报错了！IndexError意思就是索引超出了范围，因为上面的list只有3个元素，有效的索引是 0，1，2。</p><p>所以，使用索引时，<strong>千万注意不要越界</strong>。</p><h3 id="编程任务-2"><a href="#编程任务-2" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>三名同学的成绩可以用一个list表示：L = [95.5, 85, 59]</p></blockquote><p>请按照索引分别打印出第一名、第二名、第三名，同时测试 print L[3]。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">95.5</span>,<span class="number">85</span>,<span class="number">59</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;index.py&quot;, line 5, in </span><br><span class="line">    print L[3]</span><br><span class="line">IndexError: list index out of range</span><br><span class="line">95.5</span><br><span class="line">85</span><br><span class="line">59</span><br></pre></td></tr></table></figure><p>知识点：正序从0开始，逆序从-1开始是最好一个list内容。</p><p>当索引数字为负数时，表示逆序读出List中的内容，记住List的最后一个空间的编号为-1开始</p><h2 id="倒序访问list"><a href="#倒序访问list" class="headerlink" title="倒序访问list"></a>倒序访问list</h2><p>我们还是用一个list按分数从高到低表示出班里的3个同学：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>这时，老师说，请分数最低的同学站出来。</p><p>要写代码完成这个任务，我们可以先数一数这个 list，发现它包含3个元素，因此，最后一个元素的索引是2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print L[2]</span><br><span class="line">Bart</span><br></pre></td></tr></table></figure><p>Bart同学是最后一名，俗称<strong>倒数第一</strong>，所以，我们可以用 -1 这个索引来表示最后一个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> L[<span class="number">-1</span>]</span><br><span class="line">Bart</span><br></pre></td></tr></table></figure><p>Bart同学表示躺枪。</p><p>类似的，倒数第二用 -2 表示，倒数第三用 -3 表示，倒数第四用 -4 表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> L[<span class="number">-2</span>]</span><br><span class="line">Lisa</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> L[<span class="number">-3</span>]</span><br><span class="line">Adam</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> L[<span class="number">-4</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br><span class="line">L[<span class="number">-4</span>] 报错了，因为倒数第四不存在，一共只有<span class="number">3</span>个元素。</span><br></pre></td></tr></table></figure><p>使用倒序索引时，也要注意<strong>不要越界。</strong></p><h3 id="编程任务-3"><a href="#编程任务-3" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>三名同学的成绩可以用一个list表示：L = [95.5, 85, 59]</p></blockquote><p>请按照倒序索引分别打印出倒数第一、倒数第二、倒数第三。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">95.5</span>, <span class="number">85</span>, <span class="number">59</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-2</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-3</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-4</span>]</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;index.py&quot;, line 5, in </span><br><span class="line">    print L[-4]</span><br><span class="line">IndexError: list index out of range</span><br><span class="line">59</span><br><span class="line">85</span><br><span class="line">95.5</span><br></pre></td></tr></table></figure><h2 id="list添加新元素-append-insert"><a href="#list添加新元素-append-insert" class="headerlink" title="list添加新元素(append insert)"></a>list添加新元素(append insert)</h2><p>现在，班里有3名同学：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>今天，班里转来一名新同学 Paul，如何把新同学添加到现有的 list 中呢？</p><p>第一个办法是用 list 的 <code>append()</code> 方法，把新同学追加到 list 的末尾：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">&gt;&gt;&gt; L.append(&apos;Paul&apos;)</span><br><span class="line">&gt;&gt;&gt; print L</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>append()总是把新的元素添加到 list 的尾部。</p><p>如果 Paul 同学表示自己总是考满分，要求添加到第一的位置，怎么办？</p><p>方法是用list的 <code>insert()</code>方法，它接受两个参数，第一个参数是索引号，第二个参数是待添加的新元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">&gt;&gt;&gt; L.insert(0, &apos;Paul&apos;)</span><br><span class="line">&gt;&gt;&gt; print L</span><br><span class="line">[&apos;Paul&apos;, &apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p><code>L.insert(0, &#39;Paul&#39;)</code> 的意思是，’Paul’将被添加到索引为 0 的位置上（也就是第一个），而原来索引为 0 的Adam同学，以及后面的所有同学，都自动向后移动一位。</p><h3 id="编程任务-4"><a href="#编程任务-4" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>假设新来一名学生Paul，Paul 同学的成绩比Bart好，但是比Lisa差，他应该排到第三名的位置，请用代码实现。</p></blockquote><p>代码实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</span><br><span class="line">L.insert(<span class="number">2</span>,<span class="string">'paul'</span>)</span><br><span class="line"><span class="keyword">print</span> L</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'paul'</span>, <span class="string">'Bart'</span>]</span><br></pre></td></tr></table></figure><p>正向第三名索引号为2.倒数第三名索引号为-3</p><h2 id="list删除元素-pop"><a href="#list删除元素-pop" class="headerlink" title="list删除元素(pop)"></a>list删除元素(pop)</h2><p>Paul同学刚来几天又要转走了，那么我们怎么把Paul 从现有的list中删除呢？</p><p>如果Paul同学排在最后一个，我们可以用list的pop()方法删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class="line">&gt;&gt;&gt; L.pop()</span><br><span class="line">&apos;Paul&apos;</span><br><span class="line">&gt;&gt;&gt; print L</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>pop()方法总是<strong>删掉list的最后一个元素，并且它还返回这个元素，</strong>所以我们执行 L.pop() 后，会打印出 ‘Paul’。</p><p>如果Paul同学不是排在最后一个怎么办？比如Paul同学排在第三：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>要把Paul踢出list，我们就必须先定位Paul的位置。由于Paul的索引是2，因此，用 pop(2)把Paul删掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L.pop(2)</span><br><span class="line">&apos;Paul&apos;</span><br><span class="line">&gt;&gt;&gt; print L</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>两种方式：直接<code>pop()</code>默认删除第一个，括号内指定参数：索引，删除索引位置上。</p><h3 id="编码任务"><a href="#编码任务" class="headerlink" title="编码任务"></a>编码任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>Paul的索引是2，Bart的索引是3，如果我们要把Paul和Bart都删掉，请解释下面的代码为什么不能正确运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L.pop(2)</span><br><span class="line">L.pop(3)</span><br></pre></td></tr></table></figure><p>怎样调整代码可以把Paul和Bart都正确删除掉？</p><p>解释：因为语句是按顺序执行的删除了Paul之后。<br>索引号3已经越界。我们要删除的Bart已经变成2了。</p><p>知识点：这教育我们删除list时要秉着从前到后顺序。</p><h2 id="List替换元素"><a href="#List替换元素" class="headerlink" title="List替换元素"></a>List替换元素</h2><p>假设现在班里仍然是3名同学：</p><p><code>&gt;&gt;&gt; L = [&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code></p><p>现在，Bart同学要转学走了，碰巧来了一个Paul同学，要更新班级成员名单，我们可以先把Bart删掉，再把Paul添加进来。</p><p>另一个办法是直接用Paul把Bart给替换掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[2] = &apos;Paul&apos;</span><br><span class="line">&gt;&gt;&gt; print L</span><br><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>对list中的某一个索引赋值，就可以直接用新的元素<strong>替换</strong>掉原来的元素，list包含的元素个数保持不变。</p><p>由于Bart还可以用 -1 做索引，因此，下面的代码也可以完成同样的替换工作：</p><p><code>&gt;&gt;&gt; L[-1] = &#39;Paul&#39;</code></p><h3 id="编程任务-5"><a href="#编程任务-5" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>班里的同学按照分数排名是这样的：L = [‘Adam’, ‘Lisa’, ‘Bart’]<br>但是，在一次考试后，Bart同学意外取得第一，而Adam同学考了倒数第一。</p></blockquote><p>请通过对list的索引赋值，生成新的排名。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</span><br><span class="line">L[<span class="number">0</span>]=<span class="string">'Bart'</span></span><br><span class="line">L[<span class="number">-1</span>]=<span class="string">'Adam'</span></span><br><span class="line"><span class="keyword">print</span> L</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Bart&apos;, &apos;Lisa&apos;, &apos;Adam&apos;]</span><br></pre></td></tr></table></figure><h2 id="创建tuple"><a href="#创建tuple" class="headerlink" title="创建tuple"></a>创建tuple</h2><p>tuple是另一种有序的列表，中文翻译为“ 元组 ”。tuple 和 list 非常类似，但是，知识点：<strong>tuple一旦创建完毕，就不能修改了。</strong></p><p>同样是表示班里同学的名称，用tuple表示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;)</span><br></pre></td></tr></table></figure><p>创建tuple和创建list唯一不同之处是用( )替代了[ ]。</p><p>现在，这个 t 就不能改变了，tuple没有 <code>append()</code>方法，也没有<code>insert()</code>和<code>pop()</code>方法。所以，新同学没法直接往 tuple 中添加，老同学想退出 tuple 也不行。</p><p>获取 tuple 元素的方式和 list 是一模一样的，我们可以正常使用 <code>t[0]</code>，<code>t[-1]</code>等索引方式访问元素，但是不能赋值成别的元素，不信可以试试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t[0] = &apos;Paul&apos;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &apos;tuple&apos; object does not support item assignment</span><br></pre></td></tr></table></figure><h3 id="编程任务-6"><a href="#编程任务-6" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>创建一个tuple，顺序包含0 - 9这10个数。</p></blockquote><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"><span class="keyword">print</span> t</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br></pre></td></tr></table></figure><h2 id="创建单元素tuple"><a href="#创建单元素tuple" class="headerlink" title="创建单元素tuple"></a>创建单元素tuple</h2><p>tuple和list一样，可以包含 0 个、1个和任意多个元素。</p><p>包含多个元素的 tuple，前面我们已经创建过了。</p><p>包含 0 个元素的 tuple，也就是空tuple，直接用 ()表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = ()</span><br><span class="line">&gt;&gt;&gt; print t</span><br><span class="line">()</span><br></pre></td></tr></table></figure><p>创建包含1个元素的 tuple 呢？来试试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (1)</span><br><span class="line">&gt;&gt;&gt; print t</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>好像哪里不对！t 不是 tuple ，而是整数1。为什么呢？</p><p>知识点：单元素tuple的<code>()</code>被当做优先级。<code>(1)</code>变成整数1.单元素括号结尾加<code>,</code></p><p>因为()既可以表示tuple，又可以作为括号表示运算时的优先级，结果 (1) 被Python解释器计算出结果 1，导致我们得到的不是tuple，而是整数 1。</p><p>正是因为用()定义单元素的tuple有歧义，所以 Python 规定，单元素 tuple 要多加一个逗号<code>,</code>，这样就避免了歧义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (1,)</span><br><span class="line">&gt;&gt;&gt; print t</span><br><span class="line">(1,)</span><br></pre></td></tr></table></figure><p>Python在打印单元素tuple时，也自动添加了一个<code>,</code>，为了更明确地告诉你这是一个tuple。</p><p>多元素 tuple 加不加这个额外的<code>,</code>效果是一样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (1, 2, 3,)</span><br><span class="line">&gt;&gt;&gt; print t</span><br><span class="line">(1, 2, 3)</span><br></pre></td></tr></table></figure><h3 id="编程任务-7"><a href="#编程任务-7" class="headerlink" title="编程任务"></a>编程任务</h3><p>下面代码为什么没有创建出包含一个学生的 tuple：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">'Adam'</span>)</span><br><span class="line"><span class="keyword">print</span> t</span><br></pre></td></tr></table></figure><p>请修改代码，确保 t 是一个tuple。</p><p>因为单元素tuple的括号被当做是优先级标志。要加上额外<code>,</code>标识这是一个元组。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">'Adam'</span>,)</span><br><span class="line"><span class="keyword">print</span> t</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;Adam&apos;,)</span><br></pre></td></tr></table></figure><h2 id="“可变”的tuple-指向不变。指向的东西可以变"><a href="#“可变”的tuple-指向不变。指向的东西可以变" class="headerlink" title="“可变”的tuple(指向不变。指向的东西可以变)"></a>“可变”的tuple(指向不变。指向的东西可以变)</h2><p>前面我们看到了tuple一旦创建就不能修改。现在，我们来看一个<code>可变</code>的tuple：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, [&apos;A&apos;, &apos;B&apos;])</span><br></pre></td></tr></table></figure><p>注意到 t 有 3 个元素：<code>&#39;a&#39;</code>，<code>&#39;b&#39;</code>和一个<code>list：[&#39;A&#39;, &#39;B&#39;]</code>。list作为一个整体是tuple的第3个元素。list对象可以通过 <code>t[2]</code> 拿到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = t[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 然后，我们把list的两个元素改一改：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">1</span>] = <span class="string">'Y'</span></span><br></pre></td></tr></table></figure><p>再看看tuple的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print t</span><br><span class="line">(&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;])</span><br></pre></td></tr></table></figure><p>不是说tuple一旦定义后就不可变了吗？怎么现在又变了？</p><p>别急，我们先看看定义的时候tuple包含的3个元素：</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/dgm7ajFg6J.png?imageslim" alt="mark"></p><p>当我们把list的元素’A’和’B’修改为’X’和’Y’后，tuple变为：</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/lcLgC2adk4.png?imageslim" alt="mark"></p><p>表面上看，tuple的元素确实变了，但其实变的不是 tuple 的元素，而是list的元素。</p><p>tuple一开始指向的list并没有改成别的list，所以，tuple所谓的<strong>“不变”</strong>是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，<strong>但指向的这个list本身是可变的！</strong></p><p>理解了<code>指向不变</code>后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。</p><h3 id="编程任务：-5"><a href="#编程任务：-5" class="headerlink" title="编程任务："></a>编程任务：</h3><blockquote><p>定义了tuple：t = (‘a’, ‘b’, [‘A’, ‘B’])</p></blockquote><p>由于 t 包含一个list元素，导致tuple的内容是可变的。能否修改上述代码，让tuple内容不可变？</p><p>解答：将里面的list替换成一个不可变的元素。比如tuple。</p><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (&apos;a&apos;, &apos;b&apos;, (&apos;A&apos;, &apos;B&apos;))</span><br><span class="line">print t</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;a&apos;, &apos;b&apos;, (&apos;A&apos;, &apos;B&apos;))</span><br></pre></td></tr></table></figure><h1 id="Python的条件判断和循环语句"><a href="#Python的条件判断和循环语句" class="headerlink" title="Python的条件判断和循环语句"></a>Python的条件判断和循环语句</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。</p><p>比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，可以用if语句实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'your age is'</span>, age</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'END'</span></span><br></pre></td></tr></table></figure><p>注意: Python代码的<code>缩进规则</code>。<strong>具有相同缩进的代码被视为代码块，</strong>上面的3，4行 print 语句就构成一个代码块（但不包括第5行的print）。如果 if 语句判断为 True，就会执行这个代码块。</p><p>知识点: <strong>缩进请严格按照Python的习惯写法：4个空格，不要使用Tab</strong>，更不要混合Tab和空格，否则很容易造成因为缩进引起的语法错误。</p><p>注意: if 语句后接表达式，然后用:表示代码块开始。</p><p>如果你在Python交互环境下敲代码，还要特别留意缩进，并且退出缩进需要多敲一行回车：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age = 20</span><br><span class="line">&gt;&gt;&gt; if age &gt;= 18:</span><br><span class="line">...     print &apos;your age is&apos;, age</span><br><span class="line">...     print &apos;adult&apos;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">your age is 20</span><br><span class="line">adult</span><br></pre></td></tr></table></figure><h3 id="编程任务-8"><a href="#编程任务-8" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>如果成绩达到60分或以上，视为passed。</p></blockquote><p>假设Bart同学的分数是75，请用if语句判断是否能打印出 passed:</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">75</span></span><br><span class="line"><span class="keyword">if</span> score&gt;=<span class="number">60</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'passed'</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passed</span><br></pre></td></tr></table></figure><h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><p>当 if 语句判断表达式的结果为 True 时，就会执行 if 包含的代码块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></span><br></pre></td></tr></table></figure><p>如果我们想判断年龄在18岁以下时，打印出 ‘teenager’，怎么办？</p><p>方法是再写一个 if:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'teenager'</span></span><br></pre></td></tr></table></figure><p>或者用 <code>not</code> 运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'teenager'</span></span><br></pre></td></tr></table></figure><p>细心的同学可以发现，这两种条件判断是“非此即彼”的，要么符合条件1，要么符合条件2，因此，完全可以用一个 <code>if ... else ...</code> 语句把它们统一起来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'teenager'</span></span><br></pre></td></tr></table></figure><p>利用 <code>if ... else ...</code>语句，我们可以根据条件表达式的值为 <code>True</code> 或者 <code>False</code> ，分别执行 if 代码块或者 else 代码块。</p><p>注意: else 后面有个<code>:</code>。</p><h3 id="编程任务-9"><a href="#编程任务-9" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>如果成绩达到60分或以上，视为passed，否则视为failed。</p></blockquote><p>假设Bart同学的分数是55，请用if语句打印出 passed 或者 failed:</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">55</span></span><br><span class="line"><span class="keyword">if</span> score&gt;=<span class="number">60</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'passed'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'failed'</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed</span><br></pre></td></tr></table></figure><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h2><p>有的时候，一个 if … else … 还不够用。比如，根据年龄的划分：</p><ul><li>条件1：18岁或以上：adult</li><li>条件2：6岁或以上：teenager</li><li>条件3：6岁以下：kid</li></ul><p>我们可以用一个 if age &gt;= 18 判断是否符合条件1，如果不符合，再通过一个 if 判断 age &gt;= 6 来判断是否符合条件2，否则，执行条件3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">else:</span><br><span class="line">    if age &gt;= 6:</span><br><span class="line">        print &apos;teenager&apos;</span><br><span class="line">    else:</span><br><span class="line">        print &apos;kid&apos;</span><br></pre></td></tr></table></figure><p>这样写出来，我们就得到了一个两层嵌套的 if … else … 语句。这个逻辑没有问题，但是，如果继续增加条件，比如3岁以下是 baby：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">else:</span><br><span class="line">    if age &gt;= 6:</span><br><span class="line">        print &apos;teenager&apos;</span><br><span class="line">    else:</span><br><span class="line">        if age &gt;= 3:</span><br><span class="line">            print &apos;kid&apos;</span><br><span class="line">        else:</span><br><span class="line">            print &apos;baby&apos;</span><br></pre></td></tr></table></figure><p>这种缩进只会越来越多，代码也会越来越难看。</p><p><strong>要避免嵌套结构的 if … else …，</strong>我们可以用 if … 多个elif … else … 的结构，一次写完所有的规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">elif age &gt;= 6:</span><br><span class="line">    print &apos;teenager&apos;</span><br><span class="line">elif age &gt;= 3:</span><br><span class="line">    print &apos;kid&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;baby&apos;</span><br></pre></td></tr></table></figure><p><code>elif</code> 意思就是 <code>else if</code>。这样一来，我们就写出了结构非常清晰的一系列条件判断。</p><p><strong>特别注意</strong>: 这一系列条件判断会从上到下依次判断，如果某个判断为 True，执行完对应的代码块，后面的条件判断就直接忽略，不再执行了。</p><p>请思考下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 8</span><br><span class="line">if age &gt;= 6:</span><br><span class="line">    print &apos;teenager&apos;</span><br><span class="line">elif age &gt;= 18:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;kid&apos;</span><br></pre></td></tr></table></figure><p>当 age = 8 时，结果正确，但 age = 20 时，为什么没有打印出 adult？</p><p>如果要修复，应该如何修复？</p><p>知识点解答: 因为当age=20.第一个条件&gt;=6满足就短路了。<br>因此我们在设置条件应该从严格到松泛.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print &apos;teenager&apos;</span><br><span class="line">elif age &gt;= 6:</span><br><span class="line">    print &apos;adult&apos;</span><br><span class="line">else:</span><br><span class="line">    print &apos;kid&apos;</span><br></pre></td></tr></table></figure><h3 id="编程任务-10"><a href="#编程任务-10" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>如果按照分数划定结果：</p></blockquote><ul><li>90分或以上：excellent</li><li>80分或以上：good</li><li>60分或以上：passed</li><li>60分以下：failed</li></ul><p>请编写程序根据分数打印结果。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">85</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score&gt;=<span class="number">90</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'excellent'</span></span><br><span class="line"><span class="keyword">elif</span> score&gt;=<span class="number">80</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'good'</span></span><br><span class="line"><span class="keyword">elif</span> score&gt;=<span class="number">60</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'passed'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'failed'</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">good</span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>list或tuple可以表示一个有序集合。如果我们想依次访问一个list中的每一个元素呢？比如 list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>如果list只包含几个元素，这样写还行，如果list包含1万个元素，我们就不可能写1万行print。</p><p>这时，<code>循环</code>就派上用场了。</p><p>Python的 for 循环就可以依次把list或tuple的每个元素迭代出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">for name in L:</span><br><span class="line">    print name</span><br></pre></td></tr></table></figure><p>注意:  name 这个变量是在 for 循环中定义的(这是一个临时变量名字可自定义)，意思是，依次取出list中的每一个元素，并把元素赋值给 name，然后执行for循环体（就是缩进的代码块）。</p><p>这样一来，遍历一个list或tuple就非常容易了。</p><h3 id="编程任务-11"><a href="#编程任务-11" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>班里考试后，老师要统计平均成绩，已知4位同学的成绩用list表示如下：L = [75, 92, 59, 68]</p></blockquote><p>请利用for循环计算出平均成绩。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">75</span>, <span class="number">92</span>, <span class="number">59</span>, <span class="number">68</span>]</span><br><span class="line">sum = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">    sum =sum+x</span><br><span class="line"><span class="keyword">print</span> sum / <span class="number">4</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">73.5</span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>和 for 循环不同的另一种循环是 <code>while</code> 循环，while 循环不会迭代 list 或 tuple 的元素，而是根据表达式判断循环是否结束。</p><p>比如要从 0 开始打印不大于 N 的整数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">N = 10</span><br><span class="line">x = 0</span><br><span class="line">while x &lt; N:</span><br><span class="line">    print x</span><br><span class="line">    x = x + 1</span><br></pre></td></tr></table></figure><p>while循环每次先判断 <code>x &lt; N</code>，如果为True，则执行循环体的代码块,否则，退出循环。</p><p>在循环体内，x = x + 1 会让 x 不断增加，最终因为 x &lt; N 不成立而退出循环。</p><p>如果没有这一个语句，while循环在判断 x &lt; N 时总是为True，就会无限循环下去，变成死循环，所以要特别留意while循环的<strong>退出条件。</strong></p><h3 id="编程任务-12"><a href="#编程任务-12" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>利用while循环计算100以内奇数的和。</p></blockquote><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">x = 1</span><br><span class="line">while x&lt;=100:</span><br><span class="line">    sum=sum+x</span><br><span class="line">    x=x+2</span><br><span class="line">print sum</span><br></pre></td></tr></table></figure><p>知识点: 奇数只需要从1开始不断加2都是奇数。</p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2500</span><br></pre></td></tr></table></figure><h2 id="break退出循环"><a href="#break退出循环" class="headerlink" title="break退出循环"></a>break退出循环</h2><p>用<code>for</code> 循环或者 <code>while</code> 循环时，如果要在循环体内直接退出循环，可以使用 <code>break 语句</code>。</p><p>比如计算1至100的整数和，我们用while来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">x = 1</span><br><span class="line">while True:</span><br><span class="line">    sum = sum + x</span><br><span class="line">    x = x + 1</span><br><span class="line">    if x &gt; 100:</span><br><span class="line">        break</span><br><span class="line">print sum</span><br></pre></td></tr></table></figure><p>咋一看， while True 就是一个死循环，但是在循环体内，我们还判断了 x &gt; 100 条件成立时，用break语句退出循环，这样也可以实现循环的结束。</p><h3 id="编程任务-13"><a href="#编程任务-13" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>利用 while True 无限循环配合 break 语句，计算 1 + 2 + 4 + 8 + 16 + … 的前20项的和。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    sum =sum+x</span><br><span class="line">    x =<span class="number">2</span>*x</span><br><span class="line">    n =n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n &gt;<span class="number">20</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1048575</span><br></pre></td></tr></table></figure><h2 id="continue继续循环"><a href="#continue继续循环" class="headerlink" title="continue继续循环"></a>continue继续循环</h2><p>在循环过程中，可以用<code>break</code>退出当前循环，还可以用<code>continue</code>跳过后续循环代码，继续下一次循环。</p><p>假设我们已经写好了利用for循环计算平均分的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">L = [75, 98, 59, 81, 66, 43, 69, 85]</span><br><span class="line">sum = 0.0</span><br><span class="line">n = 0</span><br><span class="line">for x in L:</span><br><span class="line">    sum = sum + x</span><br><span class="line">    n = n + 1</span><br><span class="line">print sum / n</span><br></pre></td></tr></table></figure><p>现在老师只想统计及格分数的平均分，就要把 <code>x &lt; 60</code> 的分数剔除掉，这时，利用<code>continue</code>，可以做到当 <code>x &lt; 60</code>的时候，不继续执行循环体的后续代码，直接进入下一次循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for x in L:</span><br><span class="line">    if x &lt; 60:</span><br><span class="line">        continue</span><br><span class="line">    sum = sum + x</span><br><span class="line">    n = n + 1</span><br></pre></td></tr></table></figure><p>coutinue: 跳过下面的代码。开始下一次循环。</p><h3 id="编程任务-14"><a href="#编程任务-14" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>对已有的计算 0 - 100 的while循环进行改造，通过增加 continue 语句，使得只计算奇数的和：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    sum = sum + x</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure><p>思路: if判断到是偶数，continue跳过。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    sum = sum+x</span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2500</span><br></pre></td></tr></table></figure><h2 id="多重循环-嵌套循环"><a href="#多重循环-嵌套循环" class="headerlink" title="多重循环(嵌套循环)"></a>多重循环(嵌套循环)</h2><p>在循环内部，还可以嵌套循环，我们来看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for x in [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]:</span><br><span class="line">    for y in [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]:</span><br><span class="line">        print x + y</span><br></pre></td></tr></table></figure><p><code>x</code> 每循环一次，<code>y</code>就会循环 3 次，这样，我们可以打印出一个全排列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A1</span><br><span class="line">A2</span><br><span class="line">A3</span><br><span class="line">B1</span><br><span class="line">B2</span><br><span class="line">B3</span><br><span class="line">C1</span><br><span class="line">C2</span><br><span class="line">C3</span><br></pre></td></tr></table></figure><h3 id="编程任务-15"><a href="#编程任务-15" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>对100以内的两位数，请使用一个两重循环打印出所有十位数数字比个位数数字小的数，例如，23（2 &lt; 3）。</p></blockquote><p>代码实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tens_place = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">ones_place = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tens_place:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> ones_place:</span><br><span class="line">        <span class="keyword">if</span> x&lt;y:</span><br><span class="line">            <span class="keyword">print</span> x*<span class="number">10</span> + y</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">23</span><br><span class="line">略</span><br></pre></td></tr></table></figure><h1 id="重要的数据类型Dict和Set"><a href="#重要的数据类型Dict和Set" class="headerlink" title="重要的数据类型Dict和Set"></a>重要的数据类型Dict和Set</h1><h2 id="什么是dict"><a href="#什么是dict" class="headerlink" title="什么是dict"></a>什么是dict</h2><p>我们已经知道，list 和 tuple 可以用来表示顺序集合，例如，班里同学的名字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>或者考试的成绩列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[95, 85, 59]</span><br></pre></td></tr></table></figure><p>但是，要根据名字找到对应的成绩，用两个 list 表示就不方便。</p><p>如果把名字和分数关联起来，组成类似的查找表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;Adam&apos; ==&gt; 95</span><br><span class="line">&apos;Lisa&apos; ==&gt; 85</span><br><span class="line">&apos;Bart&apos; ==&gt; 59</span><br></pre></td></tr></table></figure><p>给定一个名字，就可以直接查到分数。</p><p>Python的 <code>dict</code> 就是专门干这件事的。用 dict 表示<code>名字-成绩</code>的查找表如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把名字称为<code>key</code>，对应的成绩称为<code>value</code>，dict就是通过 <code>key</code>来查找 <code>value</code>。</p><p>花括号 <code>{}</code> 表示这是一个dict，然后按照 <code>key: value</code>, 写出来即可。<strong>最后一个 key: value 的逗号可以省略。</strong></p><p>知识点： 区别小课堂</p><ul><li>单元素的tuple必须在后面多加一个逗号。</li><li>dict最后的逗号可以省略</li></ul><p>由于dict也是集合，<code>len()</code> 函数可以计算任意集合的大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; len(d)</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>知识点：<strong>注意: 一个 key-value 算一个，因此，dict大小为3。</strong></p><h3 id="编程任务-16"><a href="#编程任务-16" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>新来的Paul同学成绩是 75 分，请编写一个dict，把Paul同学的成绩也加进去。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59,</span><br><span class="line">    &apos;Paul&apos;: 75</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问dict"><a href="#访问dict" class="headerlink" title="访问dict"></a>访问dict</h2><p>我们已经能创建一个dict，用于表示名字和成绩的对应关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，如何根据名字来查找对应的成绩呢？</p><p>可以简单地使用 <code>d[key]</code> 的形式来查找对应的 value，这和 list 很像，不同之处是，list 必须使用索引返回对应的元素，而dict使用key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print d[&apos;Adam&apos;]</span><br><span class="line">95</span><br><span class="line">&gt;&gt;&gt; print d[&apos;Paul&apos;]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;index.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">    print d[&apos;Paul&apos;]</span><br><span class="line">KeyError: &apos;Paul&apos;</span><br></pre></td></tr></table></figure><p>注意: 通过 key 访问 dict 的value，只要 key 存在，dict就返回对应的value。如果key不存在，会直接报错：<code>KeyError</code>。</p><p>知识点：避免 KeyError 发生，有两个办法：</p><ul><li>是先判断一下 key 是否存在，用 <code>in</code> 操作符：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if &apos;Paul&apos; in d:</span><br><span class="line">    print d[&apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>如果 ‘Paul’ 不存在，if语句判断为False，自然不会执行 print d[‘Paul’] ，从而避免了错误。</p><ul><li>是使用dict本身提供的一个<code>get</code>方法，在Key不存在的时候，返回None：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print d.get(&apos;Bart&apos;)</span><br><span class="line">59</span><br><span class="line">&gt;&gt;&gt; print d.get(&apos;Paul&apos;)</span><br><span class="line">None</span><br></pre></td></tr></table></figure><h3 id="编程任务-17"><a href="#编程任务-17" class="headerlink" title="编程任务"></a>编程任务</h3><p>根据如下dict：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>请打印出：<br>Adam: 95<br>Lisa: 85<br>Bart: 59</p><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br><span class="line">print &apos;Adam:&apos;,d[&apos;Adam&apos;]</span><br><span class="line">print &apos;Lisa:&apos;,d.get(&apos;Lisa&apos;)</span><br><span class="line">print &apos;Bart:&apos;,d[&apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Adam: 95</span><br><span class="line">Lisa: 85</span><br><span class="line">Bart: 59</span><br></pre></td></tr></table></figure><h2 id="dict的特点"><a href="#dict的特点" class="headerlink" title="dict的特点"></a>dict的特点</h2><p><strong>知识点</strong>：dict查找速度快。list查找速度随着元素增加而逐渐下降。<br>缺点：内存占用大。list慢但内存占用小。</p><p>dict的第一个特点是<code>查找速度快</code>，无论dict有10个元素还是10万个元素，查找速度都一样。而list的查找速度随着元素增加而逐渐下降。</p><p>不过dict的查找速度快不是没有代价的，dict的缺点是占用内存大，还会浪费很多内容，list正好相反，占用内存小，但是查找速度慢。</p><p>由于dict是按 key 查找，所以，<strong>在一个dict中，key不能重复。</strong></p><p>dict的第二个特点就是存储的key-value序对是<code>没有顺序</code>的！这和list不一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们试图打印这个dict时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print d</span><br><span class="line">&#123;&apos;Lisa&apos;: 85, &apos;Adam&apos;: 95, &apos;Bart&apos;: 59&#125;</span><br></pre></td></tr></table></figure><p>打印的顺序不一定是我们创建时的顺序，而且，不同的机器打印的顺序都可能不同，这说明 知识点:<strong>dict内部是无序的，不能用dict存储有序的集合。</strong></p><p>知识点：dict的第三个特点是作为 key 的元素必须不可变，Python的基本类型如字符串、整数、浮点数都是不可变的，都可以作为 key。 但是list是可变的，就不能作为 key。</p><p>可以试试用list作为key时会报什么样的错误。</p><p>不可变这个限制仅作用于key，value是否可变无所谓：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &apos;123&apos;: [1, 2, 3],  # key 是 str，value是list</span><br><span class="line">    123: &apos;123&apos;,  # key 是 int，value 是 str</span><br><span class="line">    (&apos;a&apos;, &apos;b&apos;): True  # key 是 tuple，并且tuple的每个元素都是不可变对象，value是 boolean</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最常用的key还是字符串，因为用起来最方便。</p><h3 id="编程任务-18"><a href="#编程任务-18" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请设计一个dict，可以根据分数来查找名字，已知成绩如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Adam: 95,</span><br><span class="line">Lisa: 85,</span><br><span class="line">Bart: 59.</span><br></pre></td></tr></table></figure><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">     95:&apos;Adam&apos;,</span><br><span class="line">     85:&apos;Lisa&apos;,</span><br><span class="line">     59:&apos;Bart&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：无</p><h2 id="更新dict"><a href="#更新dict" class="headerlink" title="更新dict"></a>更新dict</h2><p>dict是可变的，也就是说，我们可以随时往dict中添加新的 <code>key-value</code>。比如已有dict：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要把新同学’Paul’的成绩 72 加进去，用赋值语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d[&apos;Paul&apos;] = 72</span><br></pre></td></tr></table></figure><p>再看看dict的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print d</span><br><span class="line">&#123;&apos;Lisa&apos;: 85, &apos;Paul&apos;: 72, &apos;Adam&apos;: 95, &apos;Bart&apos;: 59&#125;</span><br></pre></td></tr></table></figure><p><strong>如果 key 已经存在，则赋值会用新的 value 替换掉原来的 value：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d[&apos;Bart&apos;] = 60</span><br><span class="line">&gt;&gt;&gt; print d</span><br><span class="line">&#123;&apos;Lisa&apos;: 85, &apos;Paul&apos;: 72, &apos;Adam&apos;: 95, &apos;Bart&apos;: 60&#125;</span><br></pre></td></tr></table></figure><h3 id="编程任务-19"><a href="#编程任务-19" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请根据Paul的成绩 72 更新下面的dict：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line"></span><br><span class="line">    95: &apos;Adam&apos;,</span><br><span class="line"></span><br><span class="line">    85: &apos;Lisa&apos;,</span><br><span class="line"></span><br><span class="line">    59: &apos;Bart&apos;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    <span class="number">95</span>: <span class="string">'Adam'</span>,</span><br><span class="line">    <span class="number">85</span>: <span class="string">'Lisa'</span>,</span><br><span class="line">    <span class="number">59</span>: <span class="string">'Bart'</span></span><br><span class="line">&#125;</span><br><span class="line">d[<span class="number">72</span>] = <span class="string">'Paul'</span></span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;72: &apos;Paul&apos;, 59: &apos;Bart&apos;, 85: &apos;Lisa&apos;, 95: &apos;Adam&apos;&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历dict"><a href="#遍历dict" class="headerlink" title="遍历dict"></a>遍历dict</h2><p>由于dict也是一个集合，所以，遍历dict和遍历list类似，都可以通过 for 循环实现。</p><p>直接使用for循环可以遍历 dict 的 <code>key</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> key</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Lisa</span><br><span class="line">Adam</span><br><span class="line">Bart</span><br></pre></td></tr></table></figure><p>由于通过 <code>key</code> 可以获取对应的 <code>value</code>，因此，在循环体内，可以获取到value的值。</p><p>注：这里的key只是一个约定俗称的变量，可以改为其他名字。但是推荐用key。</p><h3 id="编程任务-20"><a href="#编程任务-20" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请用 for 循环遍历如下的dict，打印出 name: score 来。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">    &apos;Adam&apos;: 95,</span><br><span class="line">    &apos;Lisa&apos;: 85,</span><br><span class="line">    &apos;Bart&apos;: 59</span><br><span class="line">&#125;</span><br><span class="line">for key in d:</span><br><span class="line">    print key+&quot;:&quot;,d[key]</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lisa: 85</span><br><span class="line">Adam: 95</span><br><span class="line">Bart: 59</span><br></pre></td></tr></table></figure><h2 id="什么是set"><a href="#什么是set" class="headerlink" title="什么是set"></a>什么是set</h2><p>dict的作用是建立一组 <code>key</code> 和一组 <code>value</code> 的映射关系，dict的key是<strong>不能重复的</strong>。</p><p>有的时候，我们只想要 dict 的 key，不关心 key 对应的 value，目的就是<strong>保证这个集合的元素不会重复，</strong>这时，set就派上用场了。</p><p>set 持有一系列元素，这一点和 list 很像，但是set的元素<strong>没有重复，而且是无序的</strong>，这点和 dict 的 key很像。</p><p>知识点: 创建 set 的方式是<strong>调用 set() 并传入一个 list</strong>，list的元素将作为set的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])</span><br><span class="line">可以查看 set 的内容：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</span><br><span class="line">set([<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>])</span><br></pre></td></tr></table></figure><p>请注意，上述打印的形式类似 list， 但它不是 list，仔细看还可以发现，<strong>打印的顺序和原始 list 的顺序有可能是不同的，因为set内部存储的元素是无序的。</strong></p><p>因为set不能包含重复的元素，所以，当我们传入包含重复元素的 list 会怎么样呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;C&apos;])</span><br><span class="line">&gt;&gt;&gt; print s</span><br><span class="line">set([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;])</span><br><span class="line">&gt;&gt;&gt; len(s)</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>结果显示，set会<strong>自动去掉重复的元素</strong>，原来的list有4个元素，但set只有3个元素。</p><h3 id="编程任务-21"><a href="#编程任务-21" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请用set表示班里的4位同学：Adam, Lisa, Bart, Paul</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>])</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set([&apos;Lisa&apos;, &apos;Paul&apos;, &apos;Adam&apos;, &apos;Bart&apos;])</span><br></pre></td></tr></table></figure><h2 id="访问set"><a href="#访问set" class="headerlink" title="访问set"></a>访问set</h2><p>由于set存储的是<strong>无序集合</strong>，所以我们<strong>没法通过索引</strong>来访问。</p><p>访问 set中的某个元素实际上就是判断一个元素是否在set中。</p><p>例如，存储了班里同学名字的set：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;])</span><br></pre></td></tr></table></figure><p>我们可以用 <code>in</code> 操作符判断：</p><p>Bart是该班的同学吗？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;Bart&apos; in s</span><br><span class="line">True</span><br><span class="line">Bill是该班的同学吗？</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &apos;Bill&apos; in s</span><br><span class="line">False</span><br><span class="line">bart是该班的同学吗？</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &apos;bart&apos; in s</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>知识点：<strong>大小写很重要</strong>，’Bart’ 和 ‘bart’被认为是两个不同的元素。</p><h3 id="编程任务-22"><a href="#编程任务-22" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>由于上述set不能识别小写的名字，请改进set，使得 ‘adam’ 和 ‘bart’都能返回True。</p></blockquote><p>既然大小写是不同的。那我们的set中就把大小写都包含。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>,<span class="string">'adam'</span>, <span class="string">'lisa'</span>, <span class="string">'bart'</span>, <span class="string">'paul'</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">'adam'</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="keyword">print</span> <span class="string">'bart'</span> <span class="keyword">in</span> s</span><br></pre></td></tr></table></figure><p>运行结果.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="set的特点"><a href="#set的特点" class="headerlink" title="set的特点"></a>set的特点</h2><p><strong>set的内部结构和dict很像，唯一区别是不存储value</strong>，因此，判断一个元素是否在set中<code>速度很快</code>。</p><p><strong>set存储的元素和dict的key类似，必须是不变对象</strong>，因此，任何可变对象是不能放入set中的。</p><p>最后，set存储的元素也是没有顺序的。</p><p>set的这些特点，可以应用在哪些地方呢？</p><p>星期一到星期日可以用字符串<code>&#39;MON&#39;, &#39;TUE&#39;, ... &#39;SUN&#39;</code>表示。</p><p>假设我们让用户输入星期一至星期日的某天，如何判断用户的输入是否是一个有效的星期呢？</p><p>可以用 if 语句判断，但这样做非常繁琐：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">'???'</span> <span class="comment"># 用户输入的字符串</span></span><br><span class="line"><span class="keyword">if</span> x!= <span class="string">'MON'</span> <span class="keyword">and</span> x!= <span class="string">'TUE'</span> <span class="keyword">and</span> x!= <span class="string">'WED'</span> ... <span class="keyword">and</span> x!= <span class="string">'SUN'</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'input error'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'input ok'</span></span><br></pre></td></tr></table></figure><p>注意：if 语句中的…表示没有列出的其它星期名称，测试时，请输入完整。</p><p>如果事先创建好一个set，包含<code>&#39;MON&#39; ~ &#39;SUN&#39;</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weekdays = set([&apos;MON&apos;, &apos;TUE&apos;, &apos;WED&apos;, &apos;THU&apos;, &apos;FRI&apos;, &apos;SAT&apos;, &apos;SUN&apos;])</span><br></pre></td></tr></table></figure><p>再判断输入是否有效，只需要判断该字符串是否在set中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">'???'</span> <span class="comment"># 用户输入的字符串</span></span><br><span class="line"><span class="keyword">if</span> x <span class="keyword">in</span> weekdays:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'input ok'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'input error'</span></span><br><span class="line">这样一来，代码就简单多了。</span><br></pre></td></tr></table></figure><h3 id="编程任务-23"><a href="#编程任务-23" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>月份也可以用set表示，请设计一个set并判断用户输入的月份是否有效。<br>月份可以用字符串<code>&#39;Jan&#39;, &#39;Feb&#39;, ...</code>表示。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">months = set([<span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>, <span class="string">'May'</span>, <span class="string">'Jun'</span>, <span class="string">'Jul'</span>,<span class="string">'Aug'</span>,<span class="string">'Sep'</span>,<span class="string">'Oct'</span>,<span class="string">'Nov'</span>,<span class="string">'Dec'</span>])</span><br><span class="line">x1 = <span class="string">'Feb'</span></span><br><span class="line">x2 = <span class="string">'Sun'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x1 <span class="keyword">in</span> months:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'x1: ok'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'x1: error'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x2 <span class="keyword">in</span> months:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'x2: ok'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'x2: error'</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1: ok</span><br><span class="line">x2: error</span><br></pre></td></tr></table></figure><h2 id="遍历set"><a href="#遍历set" class="headerlink" title="遍历set"></a>遍历set</h2><p>由于 set 也是一个集合，所以，遍历 set 和遍历 list 类似，都可以通过 for 循环实现。</p><p>直接使用 for 循环可以遍历 set 的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name <span class="keyword">in</span> s:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> name</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Lisa</span><br><span class="line">Adam</span><br><span class="line">Bart</span><br></pre></td></tr></table></figure><p>注意: 观察 for 循环在遍历set时，<strong>元素的顺序和list的顺序很可能是不同的，</strong>而且不同的机器上运行的结果也可能不同。</p><h3 id="编程任务-24"><a href="#编程任务-24" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请用 for 循环遍历如下的set，打印出 name: score 来。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = set([(&apos;Adam&apos;, 95), (&apos;Lisa&apos;, 85), (&apos;Bart&apos;, 59)])</span><br></pre></td></tr></table></figure><p>上面这个set中的每一个元素又是一个字典。</p><p><code>set([ ])</code>是壳子。</p><p><code>(&#39;Adam&#39;, 95), (&#39;Lisa&#39;, 85), (&#39;Bart&#39;, 59)</code>才是真正的内容</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = set([(<span class="string">'Adam'</span>, <span class="number">95</span>), (<span class="string">'Lisa'</span>, <span class="number">85</span>), (<span class="string">'Bart'</span>, <span class="number">59</span>)])</span><br><span class="line"><span class="keyword">for</span> name,score <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">print</span> name,<span class="string">':'</span>,score</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lisa : 85</span><br><span class="line">Adam : 95</span><br><span class="line">Bart : 59</span><br></pre></td></tr></table></figure><h2 id="更新set-add-remove"><a href="#更新set-add-remove" class="headerlink" title="更新set(add remove)"></a>更新set(add remove)</h2><p>由于set存储的是一组不重复的无序元素，因此，更新set主要做两件事：</p><ul><li>是把新的元素添加到set中</li><li>是把已有元素从set中删除。(前提是如果有)</li></ul><p>添加元素时，用set的<code>add()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>如果添加的元素已经存在于set中，<code>add()</code>不会报错，但是不会加进去了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>删除set中的元素时，用set的<code>remove()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>如果删除的元素不存在set中，remove()会<strong>报错</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; s.remove(4)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: 4</span><br></pre></td></tr></table></figure><p>所以用<code>add()</code>可以直接添加，而<code>remove()</code>前需要判断。</p><h3 id="编程任务-25"><a href="#编程任务-25" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>针对下面的set，给定一个list，对list中的每一个元素，如果在set中，就将其删除，如果不在set中，就添加进去。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;])</span><br><span class="line">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Paul'</span>])</span><br><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> L:</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> s:</span><br><span class="line">        s.remove(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s.add(name)</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><h1 id="函数定义与调用"><a href="#函数定义与调用" class="headerlink" title="函数定义与调用"></a>函数定义与调用</h1><h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><p>我们知道圆的面积计算公式为：</p><p>S = πr²</p><p>当我们知道半径r的值时，就可以根据公式计算出面积。假设我们需要计算3个不同大小的圆的面积：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r1 = 12.34</span><br><span class="line">r2 = 9.08</span><br><span class="line">r3 = 73.1</span><br><span class="line">s1 = 3.14 * r1 * r1</span><br><span class="line">s2 = 3.14 * r2 * r2</span><br><span class="line">s3 = 3.14 * r3 * r3</span><br></pre></td></tr></table></figure><p>当代码出现有规律的重复的时候，你就需要当心了，每次写<code>3.14 * x * x</code>不仅很麻烦，而且，如果要把3.14改成3.14159265359的时候，得全部替换。</p><p>有了函数，我们就不再每次写<code>s = 3.14 * x * x</code>，而是写成更有意义的函数调用 <code>s = area_of_circle(x)</code>，而函数 <code>area_of_circle</code>本身只需要写一次，就可以多次调用。</p><p><strong>抽象</strong>是数学中非常常见的概念。举个例子：</p><p>计算数列的和，比如：1 + 2 + 3 + … + 100，写起来十分不方便，于是数学家发明了求和符号<code>∑</code>，可以把1 + 2 + 3 + … + 100记作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">∑n</span><br><span class="line">n=1</span><br></pre></td></tr></table></figure><p>这种抽象记法非常强大，因为我们看到<code>∑</code>就可以理解成求和，而不是还原成低级的加法运算。</p><p>而且，这种抽象记法是可扩展的，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">∑(n²+1)</span><br><span class="line">n=1</span><br></pre></td></tr></table></figure><p>还原成加法运算就变成了：</p><p><code>(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + ... + (100 x 100 + 1)</code><br>可见，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。</p><p>写计算机程序也是一样，<strong>函数就是最基本的一种代码抽象的方式。</strong></p><p>Python不但能非常灵活地定义函数，而且本身<strong>内置</strong>了很多有用的函数，可以直接调用。</p><h3 id="编程任务-26"><a href="#编程任务-26" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>写一个函数</p></blockquote><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = area_of_circle(x)</span><br><span class="line">area_of_circle(x)</span><br></pre></td></tr></table></figure><p>运行结果：</p><h2 id="调用函数-内置函数"><a href="#调用函数-内置函数" class="headerlink" title="调用函数,内置函数"></a>调用函数,内置函数</h2><p>Python内置了很多有用的函数，我们可以直接调用。</p><p>要调用一个函数，需要知道<strong>函数的名称</strong>和<strong>参数</strong>，比如求绝对值的函数 <code>abs</code>，它接收一个参数。</p><p>可以直接从Python的官方网站查看文档：<br><a href="http://docs.python.org/2/library/functions.html#abs" target="_blank" rel="noopener">http://docs.python.org/2/library/functions.html#abs</a></p><p>也可以在交互式命令行通过 <code>help(abs)</code>查看<code>abs</code>函数的帮助信息。</p><p>调用 abs 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">100</span>)</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-20</span>)</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">12.34</span>)</span><br><span class="line"><span class="number">12.34</span></span><br></pre></td></tr></table></figure><p>调用函数的时候，如果传入的参数数量不对，会报<code>TypeError</code>的错误，并且Python会明确地告诉你：abs()有且仅有1个参数，但给出了两个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; abs(1, 2)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: abs() takes exactly one argument (2 given)</span><br></pre></td></tr></table></figure><p>如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报<code>TypeError</code>的错误，并且给出错误信息：<code>str</code>是<strong>错误的参数类型</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; abs(&apos;a&apos;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: bad operand type for abs(): &apos;str&apos;</span><br></pre></td></tr></table></figure><p>而比较函数 cmp(x, y) 就需要两个参数，如果 <code>x&lt;y</code>，返回 <code>-1</code>，如果 <code>x==y</code>，返回<code>0</code>，如果 <code>x&gt;y</code>，返回 <code>1</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; cmp(1, 2)</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; cmp(2, 1)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; cmp(3, 3)</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>Python内置的常用函数还包括<strong>数据类型转换函数</strong>，比如   <code>int()</code>函数可以把其他数据类型转换为整数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(&apos;123&apos;)</span><br><span class="line">123</span><br><span class="line">&gt;&gt;&gt; int(12.34)</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p><code>str()</code>函数把其他类型转换成 <code>str</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str(123)</span><br><span class="line">&apos;123&apos;</span><br><span class="line">&gt;&gt;&gt; str(1.23)</span><br><span class="line">&apos;1.23&apos;</span><br></pre></td></tr></table></figure><h3 id="编程任务-27"><a href="#编程任务-27" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>sum()函数接受一个list作为参数，并返回list所有元素之和。请计算 <code>1*1 + 2*2 + 3*3 + ... + 100*100</code>。</p></blockquote><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">L = []</span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> x &lt;= <span class="number">100</span>:</span><br><span class="line">    L.append(x * x)</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> sum(L)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">338350</span><br></pre></td></tr></table></figure><h2 id="编写函数"><a href="#编写函数" class="headerlink" title="编写函数"></a>编写函数</h2><p>在Python中，定义一个函数要使用 <code>def</code> 语句，依次写出<code>函数名</code>、<code>括号</code>、<code>括号中的参数</code>和<code>冒号</code>:，然后，在缩进块中编写函数体，函数的返回值用 <code>return</code>语句返回。</p><p>我们以自定义一个求绝对值的 my_abs 函数为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line">    if x &gt;= 0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br></pre></td></tr></table></figure><p>请注意，<strong>函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。</strong>因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p><p>知识点； <strong>如果没有return语句，函数执行完毕后也会返回结果，</strong>只是结果为 <code>None</code>。<br><code>return None</code>可以简写为<code>return</code>。</p><h3 id="编程任务-28"><a href="#编程任务-28" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请定义一个 <code>square_of_sum</code> 函数，它接受一个list，返回list中每个元素平方的和。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_of_sum</span><span class="params">(L)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">        sum = x*x+sum</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> square_of_sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="keyword">print</span> square_of_sum([<span class="number">-5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">25</span>])</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">55</span><br><span class="line">900</span><br></pre></td></tr></table></figure><h2 id="函数之返回”多值”"><a href="#函数之返回”多值”" class="headerlink" title="函数之返回”多值”"></a>函数之返回”多值”</h2><p>函数可以返回多个值吗？答案是肯定的。</p><p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：</p><p><code>math</code>包提供了<code>sin()</code>和 <code>cos()</code>函数，我们先用<code>import</code>引用它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">def move(x, y, step, angle):</span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    return nx, ny</span><br></pre></td></tr></table></figure><p>这样我们就可以同时获得返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x, y = move(100, 100, 60, math.pi / 6)</span><br><span class="line">&gt;&gt;&gt; print x, y</span><br><span class="line">151.961524227 70.0</span><br></pre></td></tr></table></figure><p>但其实这只是一种<strong>假象，Python函数返回的仍然是单一值：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r = move(100, 100, 60, math.pi / 6)</span><br><span class="line">&gt;&gt;&gt; print r</span><br><span class="line">(151.96152422706632, 70.0)</span><br></pre></td></tr></table></figure><p>知识点：<strong>用print打印返回结果，原来返回值是一个tuple！</strong></p><p>但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，知识点：<strong>Python的函数返回多值其实就是返回一个tuple，</strong>但写起来更方便。</p><h3 id="编程任务-29"><a href="#编程任务-29" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>一元二次方程的定义是：<code>ax² + bx + c = 0</code></p></blockquote><p>请编写一个函数，返回一元二次方程的两个解。</p><p>注意：Python的math包提供了sqrt()函数用于计算平方根。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic_equation</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    t = math.sqrt(b*b - <span class="number">4</span>*a*c)</span><br><span class="line">    <span class="keyword">return</span> (-b + t) / (<span class="number">2</span> * a),( -b - t )/ (<span class="number">2</span> * a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> quadratic_equation(<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> quadratic_equation(<span class="number">1</span>, <span class="number">-6</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/h09hfm97EA.png?imageslim" alt="mark"></p><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(0.0, -1.5)</span><br><span class="line">(5.0, 1.0)</span><br></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>在函数内部，可以调用其他函数。知识点: <strong>如果一个函数在内部调用自身本身，这个函数就是递归函数。</strong></p><p>举个例子，我们来计算阶乘 <code>n! = 1 * 2 * 3 * ... * n</code>，用函数 <code>fact(n)</code>表示，可以看出：</p><p><code>fact(n) = n! = 1 * 2 * 3 * ... * (n-1) * n = (n-1)! * n = fact(n-1) * n</code><br>所以，<code>fact(n)</code>可以表示为 <code>n * fact(n-1)</code>，只有<code>n=1</code>时需要特殊处理。</p><p>于是，fact(n)用递归的方式写出来就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def fact(n):</span><br><span class="line">    if n==1:</span><br><span class="line">        return 1</span><br><span class="line">    return n * fact(n - 1)</span><br></pre></td></tr></table></figure><p>上面就是一个递归函数。可以试试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fact(1)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; fact(5)</span><br><span class="line">120</span><br><span class="line">&gt;&gt;&gt; fact(100)</span><br><span class="line">93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000</span><br></pre></td></tr></table></figure><p>如果我们计算fact(5)，可以根据函数定义看到计算过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">===&gt; fact(5)</span><br><span class="line">===&gt; 5 * fact(4)</span><br><span class="line">===&gt; 5 * (4 * fact(3))</span><br><span class="line">===&gt; 5 * (4 * (3 * fact(2)))</span><br><span class="line">===&gt; 5 * (4 * (3 * (2 * fact(1))))</span><br><span class="line">===&gt; 5 * (4 * (3 * (2 * 1)))</span><br><span class="line">===&gt; 5 * (4 * (3 * 2))</span><br><span class="line">===&gt; 5 * (4 * 6)</span><br><span class="line">===&gt; 5 * 24</span><br><span class="line">===&gt; 120</span><br></pre></td></tr></table></figure><p>递归函数的优点是<strong>定义简单，逻辑清晰</strong>。知识点: 理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。</p><p>知识点: 使用递归函数需要注意防止<code>栈溢出</code>。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。可以试试计算 <code>fact(10000)</code>。</p><h3 id="编程任务-天涯"><a href="#编程任务-天涯" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><blockquote><p>汉诺塔 (<a href="http://baike.baidu.com/view/191666.htm" target="_blank" rel="noopener">http://baike.baidu.com/view/191666.htm</a>) 的移动也可以看做是递归函数。</p></blockquote><p>我们对柱子编号为a, b, c，将所有圆盘从a移到c可以描述为：</p><p>如果a只有一个圆盘，可以直接移动到c；</p><p>如果a有N个圆盘，可以看成a有1个圆盘（底盘） + (N-1)个圆盘，首先需要把 (N-1) 个圆盘移动到 b，然后，将 a的最后一个圆盘移动到c，再将b的(N-1)个圆盘移动到c。</p><p>请编写一个函数，给定输入 n, a, b, c，打印出移动的步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move(n, a, b, c)</span><br></pre></td></tr></table></figure><p>例如，输入 move(2, ‘A’, ‘B’, ‘C’)，打印出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A --&gt; B</span><br><span class="line">A --&gt; C</span><br><span class="line">B --&gt; C</span><br></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(n, a, b, c)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n ==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> a, <span class="string">'--&gt;'</span>, c</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    move(n<span class="number">-1</span>, a, c, b)</span><br><span class="line">    <span class="keyword">print</span> a, <span class="string">'--&gt;'</span>, c</span><br><span class="line">    move(n<span class="number">-1</span>, b, a, c)</span><br><span class="line">move(<span class="number">4</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A --&gt; B</span><br><span class="line">A --&gt; C</span><br><span class="line">B --&gt; C</span><br><span class="line">A --&gt; B</span><br><span class="line">C --&gt; A</span><br><span class="line">C --&gt; B</span><br><span class="line">A --&gt; B</span><br><span class="line">A --&gt; C</span><br><span class="line">B --&gt; C</span><br><span class="line">B --&gt; A</span><br><span class="line">C --&gt; A</span><br><span class="line">B --&gt; C</span><br><span class="line">A --&gt; B</span><br><span class="line">A --&gt; C</span><br><span class="line">B --&gt; C</span><br></pre></td></tr></table></figure><h2 id="定义默认参数"><a href="#定义默认参数" class="headerlink" title="定义默认参数"></a>定义默认参数</h2><p>定义函数的时候，还可以有默认参数。</p><p>例如Python自带的 <code>int()</code> 函数，其实就有两个参数，我们既可以传一个参数，又可以传两个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(&apos;123&apos;)</span><br><span class="line">123</span><br><span class="line">&gt;&gt;&gt; int(&apos;123&apos;, 8)</span><br><span class="line">83</span><br></pre></td></tr></table></figure><p>知识点: <code>int()</code>函数的第二个参数是<strong>转换进制</strong>，如果不传，默认是十进制 (base=10)，如果传了，就用传入的参数。</p><p>可见，函数的默认参数的作用是<strong>简化调用</strong>，你只需要把必须的参数传进去。但是在需要的时候，又可以传入额外的参数来覆盖默认参数值。</p><p>我们来定义一个计算 <code>x</code> 的<code>N次方</code>的函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>假设计算平方的次数最多，我们就可以把 n 的默认值设定为 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def power(x, n=2):</span><br><span class="line">    s = 1</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        n = n - 1</span><br><span class="line">        s = s * x</span><br><span class="line">    return s</span><br></pre></td></tr></table></figure><p>这样一来，计算平方就不需要传入两个参数了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; power(5)</span><br><span class="line">25</span><br></pre></td></tr></table></figure><p>知识点: 由于函数的参数按从左到右的顺序匹配，所以<strong>默认参数只能定义在必需参数的后面：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># OK:</span><br><span class="line">def fn1(a, b=1, c=2):</span><br><span class="line">    pass</span><br><span class="line"># Error:</span><br><span class="line">def fn2(a=1, b):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>个人: 这里我们可以把自己想象成计算机。在自己感到为难不知道哪个是哪个的时候。<br>那么恭喜你，计算机也不知道。</p><h3 id="编程任务-30"><a href="#编程任务-30" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请定义一个 <code>greet()</code>函数，它包含一个默认参数，如果没有传入，打印 <code>&#39;Hello, world.&#39;</code>，如果传入，打印 <code>&#39;Hello, xxx.&#39;</code></p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(x = <span class="string">'World'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Hello,'</span>+x+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line">greet()</span><br><span class="line">greet(<span class="string">'mtianyan'</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello,World.</span><br><span class="line">Hello,mtianyan.</span><br></pre></td></tr></table></figure><h2 id="知识点-定义可变参数"><a href="#知识点-定义可变参数" class="headerlink" title="知识点: 定义可变参数"></a>知识点: 定义可变参数</h2><p>如果想让一个函数能接受任意个参数，我们就可以定义一个可变参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> args</span><br></pre></td></tr></table></figure><p>可变参数的名字前面有个 * 号，我们可以传入0个、1个或多个参数给可变参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn()</span><br><span class="line">()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn(<span class="string">'a'</span>)</span><br><span class="line">(<span class="string">'a'</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fn(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><p>可变参数也不是很神秘，Python解释器会把传入的<code>一组参数</code>组装成一个<code>tuple</code>传递给<code>可变参数</code>，因此，在函数内部，直接把变量 <code>args</code> 看成一个 <code>tuple</code> 就好了。</p><p>定义可变参数的目的也是为了简化调用。假设我们要计算任意个数的平均值，就可以定义一个可变参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">(*args)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>这样，在调用的时候，可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; average()</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; average(1, 2)</span><br><span class="line">1.5</span><br><span class="line">&gt;&gt;&gt; average(1, 2, 2, 3, 4)</span><br><span class="line">2.4</span><br></pre></td></tr></table></figure><h3 id="编程任务-31"><a href="#编程任务-31" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请编写接受可变参数的 average() 函数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def average(*args):</span><br><span class="line">    sum = 0.0</span><br><span class="line">    if len(args) == 0:</span><br><span class="line">        return sum</span><br><span class="line">    for x in args:</span><br><span class="line">        sum = sum + x</span><br><span class="line">    return sum / len(args)</span><br><span class="line">print average()</span><br><span class="line">print average(1, 2)</span><br><span class="line">print average(1, 2, 2, 3, 4)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.0</span><br><span class="line">1.5</span><br><span class="line">2.4</span><br></pre></td></tr></table></figure><h1 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h1><h2 id="对list进行切片"><a href="#对list进行切片" class="headerlink" title="对list进行切片"></a>对list进行切片</h2><p>取一个list的<strong>部分元素</strong>是非常常见的操作。比如，一个list如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>取前3个元素，应该怎么做？</p><p>笨办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [L[0], L[1], L[2]]</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>之所以是笨办法是因为扩展一下，取前N个元素就没辙了。</p><p>取前N个元素，也就是索引为0-(N-1)的元素，可以用循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r = []</span><br><span class="line">&gt;&gt;&gt; n = 3</span><br><span class="line">&gt;&gt;&gt; for i in range(n):</span><br><span class="line">...     r.append(L[i])</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; r</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了<code>切片（Slice）操作符</code>，能大大简化这种操作。</p><p>对应上面的问题，取前3个元素，用一行代码就可以完成切片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[0:3]</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br><span class="line">L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。</span><br></pre></td></tr></table></figure><p>知识点： <strong>[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。</strong></p><ul><li>如果第一个索引是0，还可以省略：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:3]</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><ul><li>也可以从索引1开始，取出2个元素出来：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[1:3]</span><br><span class="line">[&apos;Lisa&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><ul><li>只用一个 : ，表示从头到尾：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:]</span><br><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>因此，L[:]实际上<strong>复制出了一个新list。</strong></p><p>知识点: 切片操作还可以指定<code>第三个</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L[::2]</span><br><span class="line">[&apos;Adam&apos;, &apos;Bart&apos;]</span><br></pre></td></tr></table></figure><p>第三个参数表示<strong>每N个取一个</strong>，上面的 L[::2] 会每两个元素取出一个来，也就是隔一个取一个。</p><p>把<code>list</code>换成<code>tuple</code>，切片操作完全相同，只是切片的结果也变成了<code>tuple</code>。</p><h3 id="编程任务-32"><a href="#编程任务-32" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>range()函数可以创建一个数列：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; range(1, 101)</span><br><span class="line">[1, 2, 3, ..., 100]</span><br></pre></td></tr></table></figure><p>请利用切片，取出：</p><ol><li>前10个数；</li><li>3的倍数；</li><li>不大于50的5的倍数。</li></ol><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = range(<span class="number">1</span>, <span class="number">101</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> L[:<span class="number">10</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">2</span>::<span class="number">3</span>]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">4</span>:<span class="number">50</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class="line">[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]</span><br><span class="line">[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]</span><br></pre></td></tr></table></figure><h2 id="倒序切片"><a href="#倒序切片" class="headerlink" title="倒序切片"></a>倒序切片</h2><p>对于list，既然Python支持<code>L[-1]</code>取倒数第一个元素，那么它同样支持<code>倒数切片</code>，试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-2</span>:]</span><br><span class="line">[<span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">-2</span>]</span><br><span class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-3</span>:<span class="number">-1</span>]</span><br><span class="line">[<span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-4</span>:<span class="number">-1</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="string">'Adam'</span>, <span class="string">'Bart'</span>]</span><br></pre></td></tr></table></figure><p>记住倒数第一个元素的索引是-1。知识点：<strong>倒序切片包含起始索引，不包含结束索引。</strong></p><h3 id="编程任务-33"><a href="#编程任务-33" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>利用倒序切片对 1 - 100 的数列取出：</p><ul><li>最后10个数；</li><li>最后10个5的倍数。</li></ul></blockquote><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = range(<span class="number">1</span>, <span class="number">101</span>)</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-10</span>:]</span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-46</span>::<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h2 id="对字符串切片"><a href="#对字符串切片" class="headerlink" title="对字符串切片"></a>对字符串切片</h2><p>字符串 <code>&#39;xxx&#39;</code>和 <code>Unicode</code>字符串 <code>u&#39;xxx&#39;</code>也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;ABCDEFG&apos;[:3]</span><br><span class="line">&apos;ABC&apos;</span><br><span class="line">&gt;&gt;&gt; &apos;ABCDEFG&apos;[-3:]</span><br><span class="line">&apos;EFG&apos;</span><br><span class="line">&gt;&gt;&gt; &apos;ABCDEFG&apos;[::2]</span><br><span class="line">&apos;ACEG&apos;</span><br></pre></td></tr></table></figure><p>在很多编程语言中，针对字符串提供了很多各种截取函数，其实目的就是对字符串切片。知识点：Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。</p><h3 id="编程任务-34"><a href="#编程任务-34" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>字符串有个方法 <code>upper()</code> 可以把字符变成大写字母：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;abc&apos;.upper()</span><br><span class="line">&apos;ABC&apos;</span><br></pre></td></tr></table></figure><p>但它会把所有字母都变成大写。请设计一个函数，它接受一个字符串，然后返回一个仅首字母变成大写的字符串。</p><p>提示：利用切片操作简化字符串操作。</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstCharUpper</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>].upper() + s[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> firstCharUpper(<span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">print</span> firstCharUpper(<span class="string">'sunday'</span>)</span><br><span class="line"><span class="keyword">print</span> firstCharUpper(<span class="string">'september'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">Sunday</span><br><span class="line">September</span><br></pre></td></tr></table></figure><h1 id="各种迭代方式"><a href="#各种迭代方式" class="headerlink" title="各种迭代方式"></a>各种迭代方式</h1><h2 id="什么是迭代"><a href="#什么是迭代" class="headerlink" title="什么是迭代"></a>什么是迭代</h2><p>在Python中，如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代<code>（Iteration）</code>。</p><p>在Python中，迭代是通过 <code>for ... in</code> 来完成的，而很多语言比如C或者Java，迭代list是通过下标完成的，比如Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;list.length; i++) &#123;</span><br><span class="line">    n = list[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，Python的for循环抽象程度要高于Java的for循环。</p><p>因为 Python 的 for循环不仅可以用在<code>list</code>或<code>tuple</code>上，还可以作用在<code>其他任何可迭代对象</code>上。</p><p>因此，迭代操作就是对于一个集合，<strong>无论该集合是有序还是无序</strong>，我们用 for 循环总是可以依次取出集合的每一个元素。</p><p>注意: <strong>集合</strong>是指包含一组元素的数据结构，我们已经介绍的包括：</p><ol><li>有序集合：list，tuple，知识点: str和<strong>unicode</strong>；</li><li>无序集合：set</li><li>无序集合并且具有 key-value 对：dict</li></ol><p>而迭代是一个动词，它指的是一种操作，在Python中，就是 <code>for 循环</code>。</p><p><code>迭代</code>与<code>按下标访问数组</code>最大的不同是，后者是一种具体的迭代实现方式，而前者只关心迭代结果，根本不关心迭代内部是如何实现的。</p><h3 id="编程任务-35"><a href="#编程任务-35" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请用for循环迭代数列 1-100 并打印出7的倍数。</p></blockquote><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">14</span><br><span class="line">21</span><br><span class="line">28</span><br><span class="line">35</span><br><span class="line">42</span><br><span class="line">49</span><br><span class="line">56</span><br><span class="line">63</span><br><span class="line">70</span><br><span class="line">77</span><br><span class="line">84</span><br><span class="line">91</span><br><span class="line">98</span><br></pre></td></tr></table></figure><h2 id="索引迭代"><a href="#索引迭代" class="headerlink" title="索引迭代"></a>索引迭代</h2><p>知识点：Python中，迭代永远是取出<code>元素本身</code>，而非元素的索引。</p><p>对于有序集合，元素确实是有索引的。有的时候，我们确实想在 <code>for 循环中拿到索引</code>，怎么办？</p><p>方法是使用 <code>enumerate()</code>函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class="line">&gt;&gt;&gt; for index, name in enumerate(L):</span><br><span class="line">...     print index, &apos;-&apos;, name</span><br><span class="line">... </span><br><span class="line">0 - Adam</span><br><span class="line">1 - Lisa</span><br><span class="line">2 - Bart</span><br><span class="line">3 - Paul</span><br></pre></td></tr></table></figure><p>使用 <code>enumerate()</code>函数，我们可以在for循环中同时绑定索引index和元素name。但是，这不是 enumerate() 的特殊语法。实际上，enumerate() 函数把：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br></pre></td></tr></table></figure><p>变成了类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(0, &apos;Adam&apos;), (1, &apos;Lisa&apos;), (2, &apos;Bart&apos;), (3, &apos;Paul&apos;)]</span><br></pre></td></tr></table></figure><p>因此，迭代的每一个元素实际上是一个<code>tuple</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for t in enumerate(L):</span><br><span class="line">    index = t[0]</span><br><span class="line">    name = t[1]</span><br><span class="line">    print index, &apos;-&apos;, name</span><br></pre></td></tr></table></figure><p>如果我们知道每个tuple元素都包含两个元素，for循环又可以进一步简写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for index, name in enumerate(L):</span><br><span class="line">    print index, &apos;-&apos;, name</span><br></pre></td></tr></table></figure><p>这样不但代码更简单，而且还少了两条赋值语句。</p><p>可见，知识点: <strong>索引迭代也不是真的按索引访问，而是由 enumerate() 函数自动把每个元素变成 (index, element) 这样的tuple，再迭代，就同时获得了索引和元素本身。</strong></p><h3 id="编程任务-天涯-1"><a href="#编程任务-天涯-1" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><blockquote><p>zip()函数可以把两个 list 变成一个 list：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; zip([10, 20, 30], [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])</span><br><span class="line">[(10, &apos;A&apos;), (20, &apos;B&apos;), (30, &apos;C&apos;)]</span><br></pre></td></tr></table></figure><p>在迭代 <code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;, &#39;Paul&#39;]</code>时，如果我们想打印出名次 - 名字（名次从1开始)，请考虑如何在迭代中打印出来。</p><p>提示：考虑使用zip()函数和range()函数</p><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> zip(range(<span class="number">1</span>, len(L)+<span class="number">1</span>), L):</span><br><span class="line">    <span class="keyword">print</span> index, <span class="string">'-'</span>, name</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 - Adam</span><br><span class="line">2 - Lisa</span><br><span class="line">3 - Bart</span><br><span class="line">4 - Paul</span><br></pre></td></tr></table></figure><h2 id="迭代dict的value"><a href="#迭代dict的value" class="headerlink" title="迭代dict的value"></a>迭代dict的value</h2><p>迭代dict的value<br>我们已经了解了dict对象本身就是<code>可迭代对象</code>，用 <strong>for 循环直接迭代 dict，可以每次拿到dict的一个key。</strong></p><p>如果我们希望迭代 dict 对象的value，应该怎么做？</p><p>知识点：values()把dict转换成一个包含所有value的list<br>dict 对象有一个 <code>values()</code> 方法，这个方法把dict转换成一个包含所有value的list，这样，我们迭代的就是 dict的每一个 value：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">print d.values()</span><br><span class="line"># [85, 95, 59]</span><br><span class="line">for v in d.values():</span><br><span class="line">    print v</span><br><span class="line"># 85</span><br><span class="line"># 95</span><br><span class="line"># 59</span><br></pre></td></tr></table></figure><p>如果仔细阅读Python的文档，还可以发现，<code>dict</code>除了<code>values()</code>方法外，还有一个 <code>itervalues()</code> 方法，<strong>用 itervalues() 方法替代 values() 方法，迭代效果完全一样：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">print d.itervalues()</span><br><span class="line"># &lt;dictionary-valueiterator object at 0x106adbb50&gt;</span><br><span class="line">for v in d.itervalues():</span><br><span class="line">    print v</span><br><span class="line"># 85</span><br><span class="line"># 95</span><br><span class="line"># 59</span><br></pre></td></tr></table></figure><p>那这两个方法有何不同之处呢？</p><ol><li>values() 方法实际上把一个 dict 转换成了包含 value 的list。</li><li>但是 itervalues() 方法<strong>不会转换</strong>，它会在迭代过程中依次从 dict 中取出 value，所以 itervalues() 方法比 values() 方法<strong>节省了生成 list 所需的内存。</strong></li><li>打印 itervalues() 发现它返回一个 <dictionary-valueiterator> 对象，这说明在Python中，for 循环可作用的迭代对象远不止 list，tuple，str，unicode，dict等，知识点: <strong>任何可迭代对象都可以作用于for循环，</strong>而内部如何迭代我们通常并不用关心。</dictionary-valueiterator></li></ol><p>如果一个对象说自己可迭代，那我们就直接用 for 循环去迭代它，知识点: 可见，<strong>迭代是一种抽象的数据操作，它不对迭代对象内部的数据有任何要求。</strong></p><h3 id="编程任务-36"><a href="#编程任务-36" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>给定一个dict：d = { ‘Adam’: 95, ‘Lisa’: 85, ‘Bart’: 59, ‘Paul’: 74 }</p></blockquote><p>请计算所有同学的平均分。</p><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59, &apos;Paul&apos;: 74 &#125;</span><br><span class="line">sum = 0.0</span><br><span class="line">for v in d.itervalues():</span><br><span class="line">    sum = sum + v</span><br><span class="line">print sum / len(d)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">78.25</span><br></pre></td></tr></table></figure><h2 id="迭代dict的key和value"><a href="#迭代dict的key和value" class="headerlink" title="迭代dict的key和value"></a>迭代dict的key和value</h2><p>我们了解了如何迭代 dict 的key和value，那么，在一个 for 循环中，<strong>能否同时迭代 key和value？</strong>答案是肯定的。</p><p>首先，我们看看 dict 对象的 <code>items()</code>方法返回的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">&gt;&gt;&gt; print d.items()</span><br><span class="line">[(&apos;Lisa&apos;, 85), (&apos;Adam&apos;, 95), (&apos;Bart&apos;, 59)]</span><br></pre></td></tr></table></figure><p>可以看到，items() 方法把dict对象转换成了包含tuple的list，我们对这个list进行迭代，可以同时获得key和value：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for key, value in d.items():</span><br><span class="line">...     print key, &apos;:&apos;, value</span><br><span class="line">... </span><br><span class="line">Lisa : 85</span><br><span class="line">Adam : 95</span><br><span class="line">Bart : 59</span><br></pre></td></tr></table></figure><p>和 <code>values()</code>有一个 <code>itervalues()</code> 类似，<code>items()</code> 也有一个对应的 <code>iteritems()</code>，知识点： <strong>iteritems() 不把dict转换成list，而是在迭代过程中不断给出 tuple，所以， iteritems() 不占用额外的内存。</strong></p><h3 id="编程任务-37"><a href="#编程任务-37" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请根据dict：d = { ‘Adam’: 95, ‘Lisa’: 85, ‘Bart’: 59, ‘Paul’: 74 }</p></blockquote><p>打印出 <code>name : score</code>，最后再打印出平均分 <code>average : score</code>。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span>, <span class="string">'Paul'</span>: <span class="number">74</span> &#125;</span><br><span class="line">sum = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.iteritems():</span><br><span class="line">    sum = sum + v</span><br><span class="line">    <span class="keyword">print</span> k, <span class="string">':'</span>, v</span><br><span class="line"><span class="keyword">print</span> <span class="string">'average'</span>, <span class="string">':'</span>, sum / len(d)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Lisa : 85</span><br><span class="line">Paul : 74</span><br><span class="line">Adam : 95</span><br><span class="line">Bart : 59</span><br><span class="line">average : 78.25</span><br></pre></td></tr></table></figure><h1 id="列表生成式-快速生成列表"><a href="#列表生成式-快速生成列表" class="headerlink" title="列表生成式:快速生成列表"></a>列表生成式:快速生成列表</h1><h2 id="生成列表"><a href="#生成列表" class="headerlink" title="生成列表"></a>生成列表</h2><p>要生成<code>list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>，我们可以用<code>range(1, 11)</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>, <span class="number">11</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>但如果要生成<code>[1x1, 2x2, 3x3, ..., 10x10]</code>怎么做？</p><ul><li>方法一是循环：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = []</span><br><span class="line">&gt;&gt;&gt; for x in range(1, 11):</span><br><span class="line">...    L.append(x * x)</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>但是循环太繁琐，而<strong>列表生成式</strong>则可以用一行语句代替循环生成上面的list：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>这种写法就是Python特有的列表生成式。利用列表生成式，可以以非常简洁的代码生成 list。</p><p>知识点: 写列表生成式时，把要生成的元素 <code>x * x</code>放到前面，后面跟 for 循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。</p><h3 id="编程任务-38"><a href="#编程任务-38" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请利用列表生成式生成列表 <code>[1x2, 3x4, 5x6, 7x8, ..., 99x100]</code></p></blockquote><p>提示：<code>range(1, 100, 2)</code>可以生<code>成list [1, 3, 5, 7, 9,...]</code></p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> [x * (x + <span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 12, 30, 56, 90, 132, 182, 240, 306, 380, 462, 552, 650, 756, 870, 992, 1122, 1260, 1406, 1560, 1722, 1892, 2070, 2256, 2450, 2652, 2862, 3080, 3306, 3540, 3782, 4032, 4290, 4556, 4830, 5112, 5402, 5700, 6006, 6320, 6642, 6972, 7310, 7656, 8010, 8372, 8742, 9120, 9506, 9900]</span><br></pre></td></tr></table></figure><h2 id="复杂表达式"><a href="#复杂表达式" class="headerlink" title="复杂表达式"></a>复杂表达式</h2><p>使用for循环的迭代不仅可以迭代普通的<code>list</code>，还可以迭代<code>dict</code>。</p><p>假设有如下的dict：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> &#125;</span><br></pre></td></tr></table></figure><p>完全可以通过一个复杂的列表生成式把它变成一个 HTML 表格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tds = [<span class="string">'&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;'</span> % (name, score) <span class="keyword">for</span> name, score <span class="keyword">in</span> d.iteritems()]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;table&gt;'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\n'</span>.join(tds)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;/table&gt;'</span></span><br></pre></td></tr></table></figure><p>个人：<code>&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;</code> 中：</p><ul><li>第一个%s是name的填充位置。</li><li>第二个%s为score的填充位置。</li></ul><p>有多少个name和score，会通过循环生成多少个。<br><code>&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;</code>设置表格头<br>print ‘\n’.join(tds)。列表里的项通过<code>\n</code>连接成字符串。</p><p>注：字符串可以通过<code>%</code>进行格式化，用指定的参数替代 <code>%s</code>。字符串的<code>join()</code>方法可以把一个 <code>list</code>拼接成一个字符串。</p><p>把打印出来的结果保存为一个html文件，就可以在浏览器中看到效果了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Score<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Lisa<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>85<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Adam<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>95<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Bart<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>59<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编程任务-天涯-2"><a href="#编程任务-天涯-2" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><blockquote><p>在生成的表格中，对于没有及格的同学，请把分数标记为红色。</p></blockquote><p>提示：红色可以用 <code>&lt;td style=&quot;color:red&quot;&gt;</code> 实现。</p><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class="line">def generate_tr(name, score):</span><br><span class="line">    if score &lt; 60:</span><br><span class="line">        return &apos;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td style=&quot;color:red&quot;&gt;%s&lt;/td&gt;&lt;/tr&gt;&apos; % (name, score)</span><br><span class="line">    return &apos;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&apos; % (name, score)</span><br><span class="line">tds = [generate_tr(name, score) for name, score in d.iteritems()]</span><br><span class="line">print &apos;&lt;table border=&quot;1&quot;&gt;&apos;</span><br><span class="line">print &apos;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;&apos;</span><br><span class="line">print &apos;\n&apos;.join(tds)</span><br><span class="line">print &apos;&lt;/table&gt;&apos;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/Igih291DA3.png?imageslim" alt="mark"></p><h2 id="条件过滤"><a href="#条件过滤" class="headerlink" title="条件过滤"></a>条件过滤</h2><p>列表生成式的 <code>for</code> 循环后面还可以加上 <code>if</code> 判断。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>如果我们只想要偶数的平方，不改动 range()的情况下，可以加上 if 来筛选：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]</span><br><span class="line">[4, 16, 36, 64, 100]</span><br></pre></td></tr></table></figure><p>有了 if 条件，只有 if 判断为 True 的时候，才把循环的当前元素添加到列表中。</p><h3 id="编程任务-39"><a href="#编程任务-39" class="headerlink" title="编程任务"></a>编程任务</h3><blockquote><p>请编写一个函数，它接受一个 list，然后把list中的所有字符串变成大写后返回，非字符串元素将被忽略。</p></blockquote><p>提示：</p><ol><li>isinstance(x, str) 可以判断变量 x 是否是字符串；</li><li>字符串的 upper() 方法可以返回大写的字母。</li></ol><p>实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toUppers</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [x.upper() <span class="keyword">for</span> x <span class="keyword">in</span> L <span class="keyword">if</span> isinstance(x, str)]</span><br><span class="line"><span class="keyword">print</span> toUppers([<span class="string">'Hello'</span>, <span class="string">'world'</span>, <span class="number">101</span>])</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;HELLO&apos;, &apos;WORLD&apos;]</span><br></pre></td></tr></table></figure><h2 id="多层表达式-知识点"><a href="#多层表达式-知识点" class="headerlink" title="多层表达式(知识点)"></a>多层表达式(知识点)</h2><p>for循环可以<code>嵌套</code>，知识点：因此，在列表生成式中，也可以用<code>多层 for 循环来生成列表</code>。</p><p>对于字符串 <code>&#39;ABC&#39;</code> 和 <code>&#39;123&#39;</code>，可以使用两层循环，生成全排列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>]</span><br><span class="line">[<span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>]</span><br></pre></td></tr></table></figure><p>翻译成循环代码就像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span>:</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>:</span><br><span class="line">        L.append(m + n)</span><br></pre></td></tr></table></figure><h3 id="编程任务-天涯-3"><a href="#编程任务-天涯-3" class="headerlink" title="编程任务(天涯)"></a>编程任务(天涯)</h3><blockquote><p>利用 3 层for循环的列表生成式，找出对称的 3 位数。例如，121 就是对称数，因为从右到左倒过来还是 121。</p></blockquote><p>实现代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print [100 * n1 + 10 * n2 + n3 for n1 in range(1, 10) for n2 in range(10) for n3 in range(10) if n1==n3]</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;复习是为了更好的学习更新的知识。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note default&quot;&gt;&lt;p&gt; 学习python有一年多了，希望通过学习笔记来复习了，也能让后来者少走一点弯路。在课程笔记的同时加入了一部分自己的经验补充。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[√] 廖雪峰老师在慕课网的课程: Python入门&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="python从入门到精通" scheme="http://fanpengtao.tk/categories/python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    
    
      <category term="Python" scheme="http://fanpengtao.tk/tags/Python/"/>
    
      <category term="零基础入门" scheme="http://fanpengtao.tk/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
      <category term="学习笔记" scheme="http://fanpengtao.tk/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python开发环境搭建指南(Anaconda2,3共存)</title>
    <link href="http://fanpengtao.tk/post/230a7ad6.html"/>
    <id>http://fanpengtao.tk/post/230a7ad6.html</id>
    <published>2018-01-02T14:14:08.000Z</published>
    <updated>2018-10-21T16:59:32.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>工欲利器事必先善其器</p></blockquote><div class="note "><p> 对于Python环境搭建的指南，分为普通版和进阶版。<br>推荐进阶版：Windows下Anaconda2(Python2)和Anaconda3(Python3)的共存</p><ul><li>[√] 慕课网Python开发环境搭建: 配开发环境</li></ul></div><a id="more"></a><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/DHImeGED84.png?imageslim" alt="mark"></p><h1 id="Python开发环境搭建"><a href="#Python开发环境搭建" class="headerlink" title="Python开发环境搭建"></a>Python开发环境搭建</h1><p>搭建环境分为两个版本：</p><ul><li>基础版，供初学者快速安装体验。</li><li>进阶版, 供对于数据科学，机器学习有兴趣者安装。</li></ul><p><code>推荐：</code>安装进阶版，一步到位。</p><h2 id="基础版：Windows下安装python环境-2-7-3-x"><a href="#基础版：Windows下安装python环境-2-7-3-x" class="headerlink" title="基础版：Windows下安装python环境(2.7 | 3.x)"></a>基础版：Windows下安装python环境(2.7 | 3.x)</h2><blockquote><p>官网： <a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></p></blockquote><h3 id="安装包下载。"><a href="#安装包下载。" class="headerlink" title="安装包下载。"></a>安装包下载。</h3><p>选择download下的windows。点击进入。</p><p><img src="http://upload-images.jianshu.io/upload_images/1779926-6c1b1786c1c2134a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="download下的windows"></p><p>下图中红框为64位版本。32位版本可以选择Windows x86 executable installer</p><p><img src="http://upload-images.jianshu.io/upload_images/1779926-7d2044c2a9c2045c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择3.7下的executable installer"></p><p><strong>2.7版本的安装包下载：</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/1779926-3a24a247dce81ddf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.7版本"></p><h3 id="安装python。"><a href="#安装python。" class="headerlink" title="安装python。"></a>安装python。</h3><p>点击下一步下一步进行默认安装即可。（跟平常装个qq啥的没两样）</p><h3 id="安装完成的测试。"><a href="#安装完成的测试。" class="headerlink" title="安装完成的测试。"></a>安装完成的测试。</h3><p><code>win（即徽标键）</code> + <code>R</code> 输入<code>cmd</code> ：<br>打开命令行。输入<code>python</code>不报错的进入python控制台下。</p><h2 id="进阶版：Windows下Anaconda2-Python2-和Anaconda3-Python3-的共存"><a href="#进阶版：Windows下Anaconda2-Python2-和Anaconda3-Python3-的共存" class="headerlink" title="进阶版：Windows下Anaconda2(Python2)和Anaconda3(Python3)的共存"></a>进阶版：Windows下Anaconda2(Python2)和Anaconda3(Python3)的共存</h2><p><strong>转载</strong></p><p>原文地址：<a href="http://blog.csdn.net/infin1te/article/details/50445217" target="_blank" rel="noopener">http://blog.csdn.net/infin1te/article/details/50445217</a></p><blockquote><p>Anaconda是一个Python的科学计算发行版，包含了超过300个流行的用于科学、数学、工程和数据分析的Python Packages。由于Python有2和3两个版本，因此Anaconda也在Python2和Python3的基础上推出了两个发行版，即Anaconda2和Anaconda3。</p></blockquote><p>以上文字摘自转载博客。通俗讲就是一个python的各种科学计算包的大合集版本。省去了自己安装大量基本包的过程。</p><p><code>Tips:</code> 3.x版本建议选择Python 3.5.1 |Anaconda 4.1.0 (64-bit)</p><p>以后如果要使用python进行TensorFlow windows版的配置可以省下时间。</p><p><strong>这是博主自入python坑以来找到的最好的共存方法，没有出过问任何题</strong>！！！</p><p><strong>这是博主自入python坑以来找到的最好的共存方法，没有出过问任何题</strong>！！！</p><p><strong>这是博主自入python坑以来找到的最好的共存方法，没有出过问任何题</strong>！！！</p><p><img src="http://oerdwodsk.bkt.clouddn.com/blog/180103/E4H8flhgjA.png?imageslim" alt="最终实现"></p><h2 id="Linux下的python使用。"><a href="#Linux下的python使用。" class="headerlink" title="Linux下的python使用。"></a>Linux下的python使用。</h2><ul><li>Linux 默认安装python，建议安装IPython；</li><li><code>sudo apt-get install ipython</code>安装Ipython（支持Tab键自动补齐）</li><li>使用Vim来创建<code>.py</code>文件</li><li>输入<code>python</code>即可查看当前版本</li></ul><blockquote><p>IPython是Python的交互式Shell，提供了代码自动补完，自动缩进，高亮显示，执行Shell命令等非常有用的特性。特别是它的代码补完功能.</p></blockquote><h2 id="python文件类型-常识"><a href="#python文件类型-常识" class="headerlink" title="python文件类型(常识)"></a>python文件类型(常识)</h2><p>python执行过程：</p><p><code>.py</code>文件 –&gt; python解释器 –&gt; 字节码文件 –&gt; python解释器 –&gt; 二进制文件 –&gt; 内存、运行 –&gt; 打印结果</p><p>字节码文件:</p><ul><li><p><code>.pyc</code><br>转换方式： <code>python -m py_compile xxx.py</code><br>作用：提高程序的加载速度</p></li><li><p><code>.pyo</code>(优化编译的.pyc文件)<br>转换方式： <code>python -O -m py_compile xxx.py</code><br>作用：提高程序的运行速度</p></li></ul><h2 id="eclipse下的python环境安装。"><a href="#eclipse下的python环境安装。" class="headerlink" title="eclipse下的python环境安装。"></a>eclipse下的python环境安装。</h2><p>添加python开发环境到eclipse：</p><ul><li>点击<code>help</code>——<code>install New Software</code></li><li>点击<code>add</code>，弹出新窗口：</li><li>Name:填PyDev</li><li>Location:填 <a href="http://pydev.org/updates" target="_blank" rel="noopener">http://pydev.org/updates</a></li><li>确认后会出现 PyDev，勾选Pydev。</li><li>pydev for eclipse–&gt; next–&gt; accept–&gt;finish</li><li>file–&gt; new–&gt; project –&gt;Pydev下 pydevProject</li></ul><p>python的dev下载地址：<a href="http://pydev.org/updates" target="_blank" rel="noopener">http://pydev.org/updates</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;工欲利器事必先善其器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt; 对于Python环境搭建的指南，分为普通版和进阶版。&lt;br&gt;推荐进阶版：Windows下Anaconda2(Python2)和Anaconda3(Python3)的共存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[√] 慕课网Python开发环境搭建: 配开发环境&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://fanpengtao.tk/tags/Python/"/>
    
      <category term="零基础入门" scheme="http://fanpengtao.tk/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    
      <category term="环境搭建" scheme="http://fanpengtao.tk/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Next主题搭建博客安装美化及SEO优化指南</title>
    <link href="http://fanpengtao.tk/post/a625fa82.html"/>
    <id>http://fanpengtao.tk/post/a625fa82.html</id>
    <published>2018-01-02T10:02:43.000Z</published>
    <updated>2018-10-21T16:59:32.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>做博客最重要的是用心啦</p></blockquote><div class="note success"><p> 最终成果当然是本站了。安装，美化，SEO推广，部署通通奉上。</p><ul><li>持续集成自动部署已提上日程：已完成。</li><li>查看持续集成：《用TravisCI持续集成自动部署Hexo博客的个人实践》</li></ul></div><a id="more"></a><h2 id="Hexo-Next主题-搭建博客-“真”零基础安装配置"><a href="#Hexo-Next主题-搭建博客-“真”零基础安装配置" class="headerlink" title="Hexo + Next主题 搭建博客 “真”零基础安装配置"></a>Hexo + Next主题 搭建博客 “真”零基础安装配置</h2><p>最终成果: 本站</p><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><p>官网下载:  <strong>下一步下一步安装法</strong></p><p>node-v8.9.3-x64</p><p>C:\softEnvir\nodejs</p><p>验证安装:</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/b7lilij8GG.png?imageslim" alt="mark"></p><h4 id="设置npm下载目录"><a href="#设置npm下载目录" class="headerlink" title="设置npm下载目录"></a>设置npm下载目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix D:\softEnvDown\nodejs\node_global</span><br><span class="line">npm config set cache D:\softEnvDown\nodejs\node_cache</span><br><span class="line">npm config ls</span><br></pre></td></tr></table></figure><blockquote><p>npm模块安装的默认全局路径已经改到了相应的文件夹中，但是 这时候用户还是无法require这些模块。因为电脑系统现在还不知道你把默认路径给改了，所以需要在<code>win+R</code>–&gt;“<code>sysdm.cpl</code>–&gt;<code>高级</code>–&gt;<code>环境变量</code>打开设置对话框。</p></blockquote><ul><li>首先在<code>系统变量</code>中新建，新建一个名为<code>NODE_PATH</code>的变量，变量值: 全局模块的文件夹中的node_modules文件夹的绝对路径.</li></ul><p>即：<code>D:\softEnvDown\nodejs\node_global\node_modules</code></p><p>配置文件目录：<code>C:\Users\mtian\.npmrc</code></p><h4 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h4><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>Git-2.15.1.2-64-bit（同样官网下载: <strong>下一步下一步安装法</strong>）</p><p>C:\softEnvir\Git</p><h3 id="hexo-cli-1-0-4安装"><a href="#hexo-cli-1-0-4安装" class="headerlink" title="hexo-cli: 1.0.4安装"></a>hexo-cli: 1.0.4安装</h3><p>cmd控制台下:</p><pre><code>`npm install -g hexo-cli`</code></pre><h3 id="初始化hexo博客目录"><a href="#初始化hexo博客目录" class="headerlink" title="初始化hexo博客目录"></a>初始化hexo博客目录</h3><p>D:/mtianBlog:</p><p><code>hexo init hexoBlog</code></p><h3 id="下载next主题及主题美化"><a href="#下载next主题及主题美化" class="headerlink" title="下载next主题及主题美化"></a>下载next主题及主题美化</h3><p>官方文档地址： <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p><p>下载主题next：v5.1.4。名字改为next</p><p>然后放入<code>D:\mtianBlog\hexoBlog\themes</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure><h4 id="主题美化。"><a href="#主题美化。" class="headerlink" title="主题美化。"></a>主题美化。</h4><p>推荐阅读：<a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">https://www.jianshu.com/p/f054333ac9e6</a></p><p>部分节选：</p><ol><li>圆形头像旋转。</li></ol><p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></span><br><span class="line"><span class="comment">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 </span></span><br><span class="line"><span class="comment">  -webkit-animation-play-state:paused;</span></span><br><span class="line"><span class="comment">  animation-play-state:paused;*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>配置百度统计站长版。(官方文档有写)</li></ol><p>baidu_analytics: <em>*</em></p><ol><li>配置leancloud (官方文档有写)</li></ol><p>leancloud_visitors:<br>  enable: true<br>  app_id: *<br>  app_key: #<app_key></app_key></p><ol><li>配置搜索(更推荐localSearch)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">algolia:</span><br><span class="line">  applicationID: &apos;*&apos;</span><br><span class="line">  apiKey: &apos;*&apos;</span><br><span class="line">  adminApiKey: &apos;*&apos;</span><br><span class="line">  indexName: &apos;*&apos;</span><br><span class="line">  chunkSize: 5000</span><br><span class="line"></span><br><span class="line">$ export(windows 为 set) HEXO_ALGOLIA_INDEXING_KEY=***</span><br><span class="line">$ hexo algolia</span><br></pre></td></tr></table></figure><p>您好！当我集成Algolia时候一直出错——上传不了记录，请问知道如何解决嘛？</p><p>答案地址：<a href="https://github.com/iissnan/theme-next-docs/issues/162" target="_blank" rel="noopener">https://github.com/iissnan/theme-next-docs/issues/162</a></p><h4 id="使用gulp进行博文压缩（持续集成自动部署前提）"><a href="#使用gulp进行博文压缩（持续集成自动部署前提）" class="headerlink" title="使用gulp进行博文压缩（持续集成自动部署前提）"></a>使用gulp进行博文压缩（持续集成自动部署前提）</h4><p>在站点的根目录下执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure><p>新建文件<code>gulpfile.js</code>:</p><p><img src="http://myphoto.mtianyan.cn/blog/180105/6h9cD64BAa.png?imageslim" alt="mark"></p><p>内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line">// 压缩 public 目录 css</span><br><span class="line">gulp.task(&apos;minify-css&apos;, function() &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public 目录 html</span><br><span class="line">gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: true,</span><br><span class="line">         minifyJS: true,</span><br><span class="line">         minifyCSS: true,</span><br><span class="line">         minifyURLs: true,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public/js 目录 js</span><br><span class="line">gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.js&apos;)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task(&apos;default&apos;, [</span><br><span class="line">    &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="部署hexo："><a href="#部署hexo：" class="headerlink" title="部署hexo："></a>部署hexo：</h3><p><code>npm install hexo-deployer-git --save</code></p><p>修改站点配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/mtianyan/mtianyan.github.io</span><br><span class="line">  branch: master</span><br><span class="line">  message: new version first commit</span><br></pre></td></tr></table></figure><p>需要使用的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;1147727180@qq.com&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;mtianyan&quot;</span><br><span class="line"></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g &amp;&amp; gulp</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="将博客源码备份到github或码云-持续集成自动部署前提"><a href="#将博客源码备份到github或码云-持续集成自动部署前提" class="headerlink" title="将博客源码备份到github或码云(持续集成自动部署前提)"></a>将博客源码备份到github或码云(持续集成自动部署前提)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git remote add origin https://github.com/mtianyan/hexoBlog-Github.git</span><br><span class="line">git commit -m &quot;first&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>想要弄到码云替换第三行为下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://gitee.com/mtianyan/hexoBlog-mayun.git</span><br></pre></td></tr></table></figure><h3 id="SEO优化指南"><a href="#SEO优化指南" class="headerlink" title="SEO优化指南"></a>SEO优化指南</h3><h3 id="URL唯一化"><a href="#URL唯一化" class="headerlink" title="URL唯一化:"></a>URL唯一化:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>站点配置文件里添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">permalink: post/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><h4 id="安装sitemap站点地图生成插件"><a href="#安装sitemap站点地图生成插件" class="headerlink" title="安装sitemap站点地图生成插件"></a>安装sitemap站点地图生成插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>在站点配置文件或主题配置文件加入。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/gEGJ5chIDd.png?imageslim" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sitemap: </span><br><span class="line">    path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p>注意缩进</p><p>在<code>hexo-site\source</code>中新建文件<code>robots.txt</code>,内容如下，请自行替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/ </span><br><span class="line">Allow: /about/ </span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: http://mtianyan.gitee.io/sitemap.xml</span><br><span class="line">Sitemap: http://mtianyan.gitee.io/baidusitemap.xml</span><br></pre></td></tr></table></figure><p><code>Allow</code>后面的就是你的<code>menu</code> 可以在主题配置文件中找到。</p><p>前往链接：<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">https://www.google.com/webmasters/</a><br>添加你的网站。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/JIicldkLjj.png?imageslim" alt="mark"></p><p>下载验证文件放入<code>hexo-site\source</code>中</p><p>Tips: 站点配置文件忽略Google的验证文件。这样<code>clean</code>的时候就不会被删除了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render: </span><br><span class="line">  - README.md</span><br><span class="line">  - google*****.html</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180104/bje64IcECF.png?imageslim" alt="mark"></p><p>打开站点地图：添加站点地图。<br><img src="http://myphoto.mtianyan.cn/blog/180104/A8IbeF4E28.png?imageslim" alt="mark"></p><p>可以进入站点地图详情查看有没有报错。</p><p><strong>robots.txt测试</strong></p><p><img src="http://myphoto.mtianyan.cn/blog/180104/I02kIkA5bf.png?imageslim" alt="mark"></p><p>确保0错误，0警告。</p><h3 id="百度搜索资源平台"><a href="#百度搜索资源平台" class="headerlink" title="百度搜索资源平台"></a>百度搜索资源平台</h3><p><a href="http://ziyuan.baidu.com/" target="_blank" rel="noopener">http://ziyuan.baidu.com/</a></p><p><img src="http://myphoto.mtianyan.cn/blog/180104/Fa7hDABmLC.png?imageslim" alt="mark"></p><p>点击用户中心。站点管理 进行 添加网站操作。</p><p>下载验证文件放入<code>hexo-site\source</code>中</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/hBgbcAegeB.png?imageslim" alt="mark"></p><p>验证完成之后点击域名进入控制台。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/LDE1J3hFd5.png?imageslim" alt="mark"></p><p>对于Robots文件进行验证。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/KB20Hi3dbb.png?imageslim" alt="mark"></p><p>点击链接提交，往下多翻点</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/Ah2j2DcDCF.png?imageslim" alt="mark"></p><p>选择sitemap：填入自己网站的sitemap地址。点击提交</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/Hd75Ffd844.png?imageslim" alt="mark"></p><p>查看状态。</p><p><img src="http://myphoto.mtianyan.cn/blog/180104/2A73HjBl59.png?imageslim" alt="mark"></p><h3 id="页面关键字优化"><a href="#页面关键字优化" class="headerlink" title="页面关键字优化"></a>页面关键字优化</h3><p>title</p><p>文件路径是<code>your-hexo-site\themes\next\layout\index.swig</code></p><p>将文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% if theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><img src="http://myphoto.mtianyan.cn/blog/180104/fIbh9eei1a.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;做博客最重要的是用心啦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;note success&quot;&gt;&lt;p&gt; 最终成果当然是本站了。安装，美化，SEO推广，部署通通奉上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持续集成自动部署已提上日程：已完成。&lt;/li&gt;
&lt;li&gt;查看持续集成：《用TravisCI持续集成自动部署Hexo博客的个人实践》&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="运维环境配置" scheme="http://fanpengtao.tk/categories/%E8%BF%90%E7%BB%B4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Hexo" scheme="http://fanpengtao.tk/tags/Hexo/"/>
    
      <category term="Next主题" scheme="http://fanpengtao.tk/tags/Next%E4%B8%BB%E9%A2%98/"/>
    
      <category term="网站搭建" scheme="http://fanpengtao.tk/tags/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    
      <category term="SEO" scheme="http://fanpengtao.tk/tags/SEO/"/>
    
  </entry>
  
</feed>
